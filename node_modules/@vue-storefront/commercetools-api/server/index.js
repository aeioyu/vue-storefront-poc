'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var ApolloClient = _interopDefault(require('apollo-client'));
var apolloCacheInmemory = require('apollo-cache-inmemory');
var gql = _interopDefault(require('graphql-tag'));
var core = require('@vue-storefront/core');
var apolloLinkHttp = require('apollo-link-http');
var apolloLinkContext = require('apollo-link-context');
var apolloLink = require('apollo-link');
var apolloLinkRetry = require('apollo-link-retry');
var fetch = _interopDefault(require('isomorphic-fetch'));
var SdkAuth = require('@commercetools/sdk-auth');
var SdkAuth__default = _interopDefault(SdkAuth);
var utilities = require('@apollo/client/utilities');
var apolloLinkError = require('apollo-link-error');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
}

var ProductPriceFragment = "\n  fragment DefaultProductPrice on ProductPrice {\n    discounted {\n      value {\n        type\n        currencyCode\n        centAmount\n        fractionDigits\n      }\n      discount {\n        validFrom\n        validUntil\n        isActive\n        name(acceptLanguage: $acceptLanguage)\n      }\n    }\n    value {\n      type\n      currencyCode\n      centAmount\n      fractionDigits\n    }\n  }\n";
var AddressFragment = "\n  fragment DefaultAddress on Address {\n    id\n    title\n    firstName\n    lastName\n    streetName\n    streetNumber\n    postalCode\n    city\n    country\n    state\n    region\n    company\n    apartment\n    phone\n    mobile\n  }\n";
// TODO: Remove all address information and update PRO packages to use customQueries when this is implemented: https://github.com/DivanteLtd/vue-storefront/issues/5049
var CustomerFragment = "\n  " + AddressFragment + "\n\n  fragment DefaultCustomer on Customer {\n    version\n    firstName\n    lastName\n    email\n    addresses {\n      id\n    }\n    shippingAddresses {\n      ...DefaultAddress\n    }\n    billingAddresses {\n      ...DefaultAddress\n    }\n    defaultBillingAddressId\n    defaultShippingAddressId\n  }\n";
var LineItemFragment = "\n  " + ProductPriceFragment + "\n\n  fragment DefaultLineItem on LineItem {\n    id\n    productId\n    name(acceptLanguage: $acceptLanguage)\n    productSlug(acceptLanguage: $acceptLanguage)\n    quantity\n    discountedPricePerQuantity {\n      quantity\n      discountedPrice {\n        value {\n          centAmount\n        }\n        includedDiscounts {\n          discount {\n            name(acceptLanguage: $acceptLanguage)\n            isActive\n          }\n        }\n      }\n    }\n    variant {\n      id\n      sku\n      price(currency: \"USD\") {\n        tiers {\n          value {\n            centAmount\n          }\n        }\n        value {\n          centAmount\n        }\n        discounted {\n          value {\n            centAmount\n          }\n          discount {\n            isActive\n            name(acceptLanguage: $acceptLanguage)\n          }\n        }\n      }\n      images {\n        url\n        label\n      }\n      attributesRaw {\n        name\n        value\n        attributeDefinition {\n          type {\n            name\n          }\n          label(locale: $locale)\n        }\n      }\n    }\n    price {\n      ...DefaultProductPrice\n    }\n  }\n";
var ShippingMethodFragment = "\n  fragment DefaultShippingMethod on ShippingMethod {\n    id\n    version\n    name\n    isDefault\n    localizedDescription(acceptLanguage: $acceptLanguage)\n    zoneRates {\n      zone {\n        id\n        name\n      }\n      shippingRates {\n        freeAbove {\n          type\n          centAmount\n        }\n        isMatching\n        price {\n          centAmount\n        }\n      }\n    }\n  }\n";
var CartFragment = "\n  " + AddressFragment + "\n  " + CustomerFragment + "\n  " + LineItemFragment + "\n  " + ShippingMethodFragment + "\n\n  fragment DefaultCart on Cart {\n    id\n    customerId\n    customerEmail\n    lineItems {\n      ...DefaultLineItem\n    }\n    totalPrice {\n      centAmount\n    }\n    shippingAddress {\n      ...DefaultAddress\n    }\n    billingAddress {\n      ...DefaultAddress\n    }\n    customer {\n      ...DefaultCustomer\n    }\n    totalPrice {\n      centAmount\n    }\n    taxedPrice {\n      totalNet {\n        centAmount\n      }\n      totalGross {\n        centAmount\n      }\n    }\n    paymentInfo {\n      payments {\n        id\n      }\n    }\n    shippingInfo {\n      price {\n        centAmount\n      }\n      shippingMethod {\n        ...DefaultShippingMethod\n      }\n    }\n    discountCodes {\n      discountCode {\n        id\n        code\n        isActive\n        validFrom\n        validUntil\n        name(acceptLanguage: $acceptLanguage)\n      }\n    }\n    refusedGifts {\n      isActive\n      validFrom\n      validUntil\n      name(acceptLanguage: $acceptLanguage)\n    }\n    custom {\n      customFieldsRaw {\n        name\n        value\n      }\n    }\n    cartState\n    version\n  }\n";
var OrderFragment = "\n  " + AddressFragment + "\n  " + LineItemFragment + "\n\n  fragment DefaultOrder on Order {\n    lineItems {\n      ...DefaultLineItem\n    }\n    totalPrice {\n      centAmount\n    }\n    orderState\n    id\n    orderNumber\n    version\n    createdAt\n    customerEmail\n    shipmentState\n    paymentState\n    shippingAddress {\n      ...DefaultAddress\n    }\n    billingAddress {\n      ...DefaultAddress\n    }\n    cart {\n      id\n      version\n    }\n  }\n";

var defaultQuery = gql(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", "\n\n  mutation updateCart($id: String!, $version: Long!, $actions: [MyCartUpdateAction!]!, $locale: Locale!, $acceptLanguage: [Locale!]) {\n    cart: updateMyCart(id: $id, version: $version, actions: $actions) {\n      ...DefaultCart\n    }\n  }\n"], ["\n  ", "\n\n  mutation updateCart($id: String!, $version: Long!, $actions: [MyCartUpdateAction!]!, $locale: Locale!, $acceptLanguage: [Locale!]) {\n    cart: updateMyCart(id: $id, version: $version, actions: $actions) {\n      ...DefaultCart\n    }\n  }\n"])), CartFragment);
var templateObject_1;

var VERSION_MISSMATCH_CODE = 'ConcurrentModification';
var updateCart = function (context, params, customQuery) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, locale, acceptLanguage, defaultVariables, updateCartGql, request, error_1, canRetry, causedByMissmatch;
    var _b, _c, _d, _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _a = context.config, locale = _a.locale, acceptLanguage = _a.acceptLanguage;
                defaultVariables = params
                    ? __assign({ locale: locale,
                        acceptLanguage: acceptLanguage }, params) : { acceptLanguage: acceptLanguage };
                updateCartGql = context.extendQuery(customQuery, { updateCart: { query: defaultQuery, variables: defaultVariables } }).updateCart;
                _f.label = 1;
            case 1:
                _f.trys.push([1, 3, , 4]);
                return [4 /*yield*/, context.client.mutate({
                        mutation: gql(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject(["", ""], ["", ""])), updateCartGql.query),
                        variables: updateCartGql.variables,
                        fetchPolicy: 'no-cache'
                    })];
            case 2:
                request = _f.sent();
                return [2 /*return*/, request];
            case 3:
                error_1 = _f.sent();
                canRetry = (_b = params.versionFallback) !== null && _b !== void 0 ? _b : true;
                causedByMissmatch = (_e = (_d = (_c = error_1.graphQLErrors) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.code) === null || _e === void 0 ? void 0 : _e.includes(VERSION_MISSMATCH_CODE);
                if (!causedByMissmatch || !canRetry) {
                    throw error_1;
                }
                core.Logger.debug('Cart version missmatch. Retrying with current version.');
                return [2 /*return*/, updateCart(context, __assign(__assign({}, params), { version: error_1.graphQLErrors[0].currentVersion }))];
            case 4: return [2 /*return*/];
        }
    });
}); };
var templateObject_1$1;

var hasContactInfo = function (details) { return Object.keys(details.contactInfo || {}).some(function (c) { return ['phone', 'email', 'mobile', 'fax'].includes(c); }); };
var createAddLineItemAction = function (variant, quantity) { return ({
    addLineItem: {
        variantId: variant.id,
        quantity: quantity,
        sku: variant.sku
    }
}); };
var createRemoveLineItemAction = function (product) { return ({
    removeLineItem: {
        lineItemId: product.id,
        quantity: product.quantity
    }
}); };
var createChangeLineItemQuantityAction = function (product) { return ({
    changeLineItemQuantity: {
        lineItemId: product.id,
        quantity: product.quantity
    }
}); };
var setShippingAddressAction = function (shippingDetails) {
    var _a, _b, _c, _d;
    if (hasContactInfo(shippingDetails)) {
        core.Logger.warn('Using `contactInfo` on Address is being deprecated in the CT API, use `email` `phone` `mobile` and `fax` fields directly.');
    }
    return {
        setShippingAddress: {
            address: {
                title: shippingDetails.title,
                salutation: shippingDetails.salutation,
                firstName: shippingDetails.firstName,
                lastName: shippingDetails.lastName,
                streetName: shippingDetails.streetName,
                streetNumber: shippingDetails.streetNumber,
                additionalStreetInfo: shippingDetails.additionalStreetInfo,
                postalCode: shippingDetails.postalCode,
                city: shippingDetails.city,
                region: shippingDetails.region,
                state: shippingDetails.state,
                country: shippingDetails.country,
                company: shippingDetails.company,
                department: shippingDetails.department,
                building: shippingDetails.building,
                apartment: shippingDetails.apartment,
                pOBox: shippingDetails.pOBox,
                phone: shippingDetails.phone || ((_a = shippingDetails.contactInfo) === null || _a === void 0 ? void 0 : _a.phone),
                mobile: shippingDetails.mobile || ((_b = shippingDetails.contactInfo) === null || _b === void 0 ? void 0 : _b.mobile),
                email: shippingDetails.email || ((_c = shippingDetails.contactInfo) === null || _c === void 0 ? void 0 : _c.email),
                fax: shippingDetails.fax || ((_d = shippingDetails.contactInfo) === null || _d === void 0 ? void 0 : _d.fax),
                additionalAddressInfo: shippingDetails.additionalAddressInfo
            }
        }
    };
};
var addDiscountCodeAction = function (code) { return ({
    addDiscountCode: { code: code }
}); };
var removeDiscountCodeAction = function (discountCode) { return ({
    removeDiscountCode: { discountCode: discountCode }
}); };

var addToCart = function (settings, _a, product, quantity, customQuery) {
    var id = _a.id, version = _a.version;
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, updateCart(settings, {
                        id: id,
                        version: version,
                        actions: [createAddLineItemAction(product, quantity)]
                    }, customQuery)];
                case 1: return [2 /*return*/, _b.sent()];
            }
        });
    });
};

var applyCartCoupon = function (settings, cart, discountCode, customQuery) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, updateCart(settings, {
                    id: cart.id,
                    version: cart.version,
                    actions: [addDiscountCodeAction(discountCode)]
                }, customQuery)];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };

var defaultMutation = gql(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject(["\n  ", "\n\n  mutation createCart($draft: MyCartDraft!, $locale: Locale!, $acceptLanguage: [Locale!], $storeKey: KeyReferenceInput) {\n    cart: createMyCart(draft: $draft, storeKey: $storeKey) {\n      ...DefaultCart\n    }\n  }\n"], ["\n  ", "\n\n  mutation createCart($draft: MyCartDraft!, $locale: Locale!, $acceptLanguage: [Locale!], $storeKey: KeyReferenceInput) {\n    cart: createMyCart(draft: $draft, storeKey: $storeKey) {\n      ...DefaultCart\n    }\n  }\n"])), CartFragment);
var templateObject_1$2;

var createCart = function (context, cartDraft, customQuery) {
    if (cartDraft === void 0) { cartDraft = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var _a, locale, acceptLanguage, currency, defaultVariables, createCartGql, request;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = context.config, locale = _a.locale, acceptLanguage = _a.acceptLanguage, currency = _a.currency;
                    defaultVariables = {
                        acceptLanguage: acceptLanguage,
                        locale: locale,
                        draft: __assign({ currency: currency }, cartDraft)
                    };
                    createCartGql = context.extendQuery(customQuery, { createCart: { query: defaultMutation, variables: defaultVariables } }).createCart;
                    return [4 /*yield*/, context.client.mutate({
                            mutation: gql(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject(["", ""], ["", ""])), createCartGql.query),
                            variables: createCartGql.variables,
                            fetchPolicy: 'no-cache'
                        })];
                case 1:
                    request = _b.sent();
                    return [2 /*return*/, request];
            }
        });
    });
};
var templateObject_1$3;

var defaultMutation$1 = gql(templateObject_1$4 || (templateObject_1$4 = __makeTemplateObject(["\n  ", "\n\n  mutation createMyOrderFromCart($draft: OrderMyCartCommand!, $locale: Locale!, $acceptLanguage: [Locale!], $storeKey: KeyReferenceInput) {\n    order: createMyOrderFromCart(draft: $draft, storeKey: $storeKey) {\n      ...DefaultOrder\n    }\n  }\n"], ["\n  ", "\n\n  mutation createMyOrderFromCart($draft: OrderMyCartCommand!, $locale: Locale!, $acceptLanguage: [Locale!], $storeKey: KeyReferenceInput) {\n    order: createMyOrderFromCart(draft: $draft, storeKey: $storeKey) {\n      ...DefaultOrder\n    }\n  }\n"])), OrderFragment);
var templateObject_1$4;

var createMyOrderFromCart = function (context, draft, customQuery) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, locale, acceptLanguage, defaultVariables, createMyOrderFromCart;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = context.config, locale = _a.locale, acceptLanguage = _a.acceptLanguage;
                defaultVariables = { locale: locale,
                    acceptLanguage: acceptLanguage,
                    draft: draft
                };
                createMyOrderFromCart = context.extendQuery(customQuery, { createMyOrderFromCart: { query: defaultMutation$1, variables: defaultVariables } }).createMyOrderFromCart;
                return [4 /*yield*/, context.client.mutate({
                        mutation: gql(templateObject_1$5 || (templateObject_1$5 = __makeTemplateObject(["", ""], ["", ""])), createMyOrderFromCart.query),
                        variables: createMyOrderFromCart.variables,
                        fetchPolicy: 'no-cache'
                    })];
            case 1: return [2 /*return*/, _b.sent()];
        }
    });
}); };
var templateObject_1$5;

var CustomerChangeMyPassword = gql(templateObject_1$6 || (templateObject_1$6 = __makeTemplateObject(["\n  ", "\n\n  mutation customerChangeMyPassword($version: Long!, $currentPassword: String!, $newPassword: String!, $storeKey: KeyReferenceInput) {\n    user: customerChangeMyPassword(version: $version, currentPassword: $currentPassword, newPassword: $newPassword, storeKey: $storeKey) {\n      ...DefaultCustomer\n    }\n  }\n"], ["\n  ", "\n\n  mutation customerChangeMyPassword($version: Long!, $currentPassword: String!, $newPassword: String!, $storeKey: KeyReferenceInput) {\n    user: customerChangeMyPassword(version: $version, currentPassword: $currentPassword, newPassword: $newPassword, storeKey: $storeKey) {\n      ...DefaultCustomer\n    }\n  }\n"])), CustomerFragment);
var templateObject_1$6;

var customerChangeMyPassword = function (_a, version, currentPassword, newPassword) {
    var client = _a.client;
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, client.mutate({
                        mutation: CustomerChangeMyPassword,
                        variables: {
                            version: version,
                            currentPassword: currentPassword,
                            newPassword: newPassword
                        },
                        fetchPolicy: 'no-cache'
                    })];
                case 1: return [2 /*return*/, _b.sent()];
            }
        });
    });
};

var CustomerSignMeInMutation = gql(templateObject_1$7 || (templateObject_1$7 = __makeTemplateObject(["\n  ", "\n  ", "\n\n  mutation customerSignMeIn($draft: CustomerSignMeInDraft!, $locale: Locale!, $acceptLanguage: [Locale!], $storeKey: KeyReferenceInput) {\n    user: customerSignMeIn(draft: $draft, storeKey: $storeKey) {\n      customer {\n        ...DefaultCustomer\n      }\n      cart {\n        ...DefaultCart\n      }\n    }\n  }\n"], ["\n  ", "\n  ", "\n\n  mutation customerSignMeIn($draft: CustomerSignMeInDraft!, $locale: Locale!, $acceptLanguage: [Locale!], $storeKey: KeyReferenceInput) {\n    user: customerSignMeIn(draft: $draft, storeKey: $storeKey) {\n      customer {\n        ...DefaultCustomer\n      }\n      cart {\n        ...DefaultCart\n      }\n    }\n  }\n"])), CustomerFragment, CartFragment);
var templateObject_1$7;

var customerSignMeIn = function (context, draft) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, locale, acceptLanguage, loginResponse;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = context.config, locale = _a.locale, acceptLanguage = _a.acceptLanguage;
                return [4 /*yield*/, context.client.mutate({
                        mutation: CustomerSignMeInMutation,
                        variables: { draft: draft, locale: locale, acceptLanguage: acceptLanguage },
                        fetchPolicy: 'no-cache'
                    })];
            case 1:
                loginResponse = _b.sent();
                return [2 /*return*/, loginResponse];
        }
    });
}); };

var CustomerSignMeUpMutation = gql(templateObject_1$8 || (templateObject_1$8 = __makeTemplateObject(["\n  ", "\n  ", "\n\n  mutation customerSignMeUp($draft: CustomerSignMeUpDraft!, $locale: Locale!, $acceptLanguage: [Locale!], $storeKey: KeyReferenceInput) {\n    user: customerSignMeUp(draft: $draft, storeKey: $storeKey) {\n      customer {\n        ...DefaultCustomer\n      }\n      cart {\n        ...DefaultCart\n      }\n    }\n  }\n"], ["\n  ", "\n  ", "\n\n  mutation customerSignMeUp($draft: CustomerSignMeUpDraft!, $locale: Locale!, $acceptLanguage: [Locale!], $storeKey: KeyReferenceInput) {\n    user: customerSignMeUp(draft: $draft, storeKey: $storeKey) {\n      customer {\n        ...DefaultCustomer\n      }\n      cart {\n        ...DefaultCart\n      }\n    }\n  }\n"])), CustomerFragment, CartFragment);
var templateObject_1$8;

var customerSignMeUp = function (context, draft) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, locale, acceptLanguage, registerResponse;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = context.config, locale = _a.locale, acceptLanguage = _a.acceptLanguage;
                return [4 /*yield*/, context.client.mutate({
                        mutation: CustomerSignMeUpMutation,
                        variables: { draft: draft, locale: locale, acceptLanguage: acceptLanguage },
                        fetchPolicy: 'no-cache'
                    })];
            case 1:
                registerResponse = _b.sent();
                return [2 /*return*/, registerResponse];
        }
    });
}); };

var customerSignOut = function (_a) {
    var config = _a.config, client = _a.client;
    return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_b) {
            if (config.auth.onTokenRemove) {
                config.auth.onTokenRemove();
            }
            if (client.tokenProvider) {
                client.tokenProvider.invalidateTokenInfo();
            }
            return [2 /*return*/];
        });
    });
};

var changeCustomerEmailAction = function (email) { return ({
    changeEmail: { email: email }
}); };
var setCustomerFirstNameAction = function (firstName) { return ({
    setFirstName: { firstName: firstName }
}); };
var setCustomerLastNameAction = function (lastName) { return ({
    setLastName: { lastName: lastName }
}); };

var CustomerUpdateMeMutation = gql(templateObject_1$9 || (templateObject_1$9 = __makeTemplateObject(["\n  ", "\n\n  mutation customerUpdateMe($version: Long!, $actions: [MyCustomerUpdateAction!]!, $storeKey: KeyReferenceInput) {\n    user: updateMyCustomer(version: $version, actions: $actions, storeKey: $storeKey) {\n      ...DefaultCustomer\n    }\n  }\n"], ["\n  ", "\n\n  mutation customerUpdateMe($version: Long!, $actions: [MyCustomerUpdateAction!]!, $storeKey: KeyReferenceInput) {\n    user: updateMyCustomer(version: $version, actions: $actions, storeKey: $storeKey) {\n      ...DefaultCustomer\n    }\n  }\n"])), CustomerFragment);
var templateObject_1$9;

var customerUpdateMe = function (_a, currentUser, updatedUserData) {
    var client = _a.client;
    return __awaiter(void 0, void 0, void 0, function () {
        var updateResponse;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, client.mutate({
                        mutation: CustomerUpdateMeMutation,
                        variables: {
                            version: currentUser.version,
                            actions: [
                                changeCustomerEmailAction(updatedUserData.email),
                                setCustomerFirstNameAction(updatedUserData.firstName),
                                setCustomerLastNameAction(updatedUserData.lastName)
                            ]
                        },
                        fetchPolicy: 'no-cache'
                    })];
                case 1:
                    updateResponse = _b.sent();
                    return [2 /*return*/, updateResponse.data];
            }
        });
    });
};

var defaultQuery$1 = gql(templateObject_1$a || (templateObject_1$a = __makeTemplateObject(["\n  ", "\n\n  query getCart($cartId: String!, $locale: Locale!, $acceptLanguage: [Locale!]) {\n    cart(id: $cartId) {\n      ...DefaultCart\n    }\n  }\n"], ["\n  ", "\n\n  query getCart($cartId: String!, $locale: Locale!, $acceptLanguage: [Locale!]) {\n    cart(id: $cartId) {\n      ...DefaultCart\n    }\n  }\n"])), CartFragment);
var templateObject_1$a;

var getCart = function (_a, cartId) {
    var config = _a.config, client = _a.client;
    return __awaiter(void 0, void 0, void 0, function () {
        var locale, acceptLanguage;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    locale = config.locale, acceptLanguage = config.acceptLanguage;
                    return [4 /*yield*/, client.query({
                            query: defaultQuery$1,
                            variables: { cartId: cartId,
                                locale: locale,
                                acceptLanguage: acceptLanguage },
                            fetchPolicy: 'no-cache'
                        })];
                case 1: return [2 /*return*/, _b.sent()];
            }
        });
    });
};

var defaultQuery$2 = gql(templateObject_1$b || (templateObject_1$b = __makeTemplateObject(["\n  fragment Children on Category {\n    id\n    slug(acceptLanguage: $acceptLanguage)\n    name(acceptLanguage: $acceptLanguage)\n    childCount\n  }\n\n  fragment DefaultCategory on Category {\n    id\n    slug(acceptLanguage: $acceptLanguage)\n    name(acceptLanguage: $acceptLanguage)\n    childCount\n    children {\n      ...Children\n      children {\n        ...Children\n        children {\n          ...Children\n        }\n      }\n    }\n  }\n\n  query categories($where: String, $sort: [String!], $limit: Int, $offset: Int, $acceptLanguage: [Locale!]) {\n    categories(where: $where, sort: $sort, limit: $limit, offset: $offset) {\n      offset\n      count\n      total\n      results {\n        id\n        slug(acceptLanguage: $acceptLanguage)\n        name(acceptLanguage: $acceptLanguage)\n        description(acceptLanguage: $acceptLanguage)\n        childCount\n        parent {\n          ...DefaultCategory\n          parent {\n            ...DefaultCategory\n            parent {\n              ...DefaultCategory\n            }\n          }\n        }\n        children {\n          ...DefaultCategory\n        }\n      }\n    }\n  }\n"], ["\n  fragment Children on Category {\n    id\n    slug(acceptLanguage: $acceptLanguage)\n    name(acceptLanguage: $acceptLanguage)\n    childCount\n  }\n\n  fragment DefaultCategory on Category {\n    id\n    slug(acceptLanguage: $acceptLanguage)\n    name(acceptLanguage: $acceptLanguage)\n    childCount\n    children {\n      ...Children\n      children {\n        ...Children\n        children {\n          ...Children\n        }\n      }\n    }\n  }\n\n  query categories($where: String, $sort: [String!], $limit: Int, $offset: Int, $acceptLanguage: [Locale!]) {\n    categories(where: $where, sort: $sort, limit: $limit, offset: $offset) {\n      offset\n      count\n      total\n      results {\n        id\n        slug(acceptLanguage: $acceptLanguage)\n        name(acceptLanguage: $acceptLanguage)\n        description(acceptLanguage: $acceptLanguage)\n        childCount\n        parent {\n          ...DefaultCategory\n          parent {\n            ...DefaultCategory\n            parent {\n              ...DefaultCategory\n            }\n          }\n        }\n        children {\n          ...DefaultCategory\n        }\n      }\n    }\n  }\n"])));
var templateObject_1$b;

var AttributeType;
(function (AttributeType) {
    AttributeType["STRING"] = "StringAttribute";
    AttributeType["DATE"] = "DateAttribute";
    AttributeType["DATETIME"] = "DateTimeAttribute";
    AttributeType["TIME"] = "TimeAttribute";
    AttributeType["NUMBER"] = "NumberAttribute";
    AttributeType["ENUM"] = "EnumAttribute";
    AttributeType["LOCALIZED_ENUM"] = "LocalizedEnumAttribute";
    AttributeType["LOCALIZED_STRING"] = "LocalizedStringAttribute";
    AttributeType["MONEY"] = "MoneyAttribute";
    AttributeType["BOOLEAN"] = "BooleanAttribute";
})(AttributeType || (AttributeType = {}));

var mapFilterToPredicate = function (settings, filter) {
    var locale = settings.locale, currency = settings.currency;
    var valuePredicate;
    switch (filter.type) {
        case AttributeType.STRING:
            valuePredicate = "value = \"" + filter.value + "\"";
            break;
        case AttributeType.DATE:
        case AttributeType.DATETIME:
        case AttributeType.TIME:
            valuePredicate = Array.isArray(filter.value) ? "value >= \"" + filter.value[0] + "\" and value <= \"" + filter.value[1] + "\"" : "value = \"" + filter.value + "\"";
            break;
        case AttributeType.NUMBER:
            valuePredicate = Array.isArray(filter.value) ? "value >= " + filter.value[0] + " and value <= " + filter.value[1] : "value = " + filter.value;
            break;
        case AttributeType.ENUM:
        case AttributeType.LOCALIZED_ENUM:
            valuePredicate = "value(key = \"" + filter.value + "\")";
            break;
        case AttributeType.LOCALIZED_STRING:
            valuePredicate = "value(" + locale.toLowerCase() + " = \"" + filter.value + "\")";
            break;
        case AttributeType.MONEY:
            valuePredicate = Array.isArray(filter.value)
                ? "value(centAmount >= " + filter.value[0] * 100 + " and centAmount <= " + filter.value[1] * 100 + " and currencyCode = \"" + currency + "\")"
                : "value(centAmount = " + filter.value + " and currencyCode = \"" + currency + "\")";
            break;
        case AttributeType.BOOLEAN:
            valuePredicate = "value = " + filter.value;
            break;
    }
    return "masterData(current(masterVariant(attributes(name = \"" + filter.name + "\" and " + valuePredicate + "))))";
};
var buildProductWhere = function (settings, search) {
    var acceptLanguage = settings.acceptLanguage;
    var predicates = [];
    if (search === null || search === void 0 ? void 0 : search.catId) {
        var catIds = (Array.isArray(search.catId) ? search.catId : [search.catId]).join('","');
        predicates.push("masterData(current(categories(id in (\"" + catIds + "\"))))");
    }
    if (search === null || search === void 0 ? void 0 : search.slug) {
        var predicate = acceptLanguage.map(function (locale) { return locale + "=\"" + search.slug + "\""; }).join(' or ');
        predicates.push("masterData(current(slug(" + predicate + ")))");
    }
    if (search === null || search === void 0 ? void 0 : search.id) {
        predicates.push("id=\"" + search.id + "\"");
    }
    if (search === null || search === void 0 ? void 0 : search.filters) {
        var filterPredicates = search.filters.map(function (f) { return mapFilterToPredicate(settings, f); }).join(' or ');
        if (filterPredicates) {
            predicates.push(filterPredicates);
        }
    }
    return predicates.join(' and ');
};
var buildCategoryWhere = function (settings, search) {
    var acceptLanguage = settings.acceptLanguage;
    if (search === null || search === void 0 ? void 0 : search.catId) {
        return "id=\"" + search.catId + "\"";
    }
    if (search === null || search === void 0 ? void 0 : search.slug) {
        var predicate = acceptLanguage.map(function (locale) { return locale + "=\"" + search.slug + "\""; }).join(' or ');
        return "slug(" + predicate + ")";
    }
    return undefined;
};
var buildOrderWhere = function (search) {
    if (search === null || search === void 0 ? void 0 : search.id) {
        return "id=\"" + search.id + "\"";
    }
    return null;
};

var getCategory = function (context, params, customQuery) { return __awaiter(void 0, void 0, void 0, function () {
    var acceptLanguage, defaultVariables, categories, request;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                acceptLanguage = context.config.acceptLanguage;
                defaultVariables = params ? {
                    where: buildCategoryWhere(context.config, params),
                    limit: params.limit,
                    offset: params.offset,
                    acceptLanguage: acceptLanguage
                } : { acceptLanguage: acceptLanguage };
                categories = context.extendQuery(customQuery, { categories: { query: defaultQuery$2, variables: defaultVariables } }).categories;
                return [4 /*yield*/, context.client.query({
                        query: gql(templateObject_1$c || (templateObject_1$c = __makeTemplateObject(["", ""], ["", ""])), categories.query),
                        variables: categories.variables,
                        fetchPolicy: 'no-cache'
                    })];
            case 1:
                request = _a.sent();
                return [2 /*return*/, request];
        }
    });
}); };
var templateObject_1$c;

var basicProfile = gql(templateObject_1$d || (templateObject_1$d = __makeTemplateObject(["\n  ", "\n\n  query getBasicProfile($locale: Locale!, $acceptLanguage: [Locale!]) {\n    me {\n      activeCart {\n        ...DefaultCart\n      }\n    }\n  }\n"], ["\n  ", "\n\n  query getBasicProfile($locale: Locale!, $acceptLanguage: [Locale!]) {\n    me {\n      activeCart {\n        ...DefaultCart\n      }\n    }\n  }\n"])), CartFragment);
var fullProfile = gql(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  ", "\n  ", "\n\n  query getFullProfile($locale: Locale!, $acceptLanguage: [Locale!]) {\n    me {\n      activeCart {\n        ...DefaultCart\n      }\n      customer {\n        ...DefaultCustomer\n      }\n    }\n  }\n"], ["\n  ", "\n  ", "\n\n  query getFullProfile($locale: Locale!, $acceptLanguage: [Locale!]) {\n    me {\n      activeCart {\n        ...DefaultCart\n      }\n      customer {\n        ...DefaultCustomer\n      }\n    }\n  }\n"])), CartFragment, CustomerFragment);
var templateObject_1$d, templateObject_2;

var getMe = function (context, params, customQuery) {
    if (params === void 0) { params = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var _a, locale, acceptLanguage, customer, defaultVariables, _b, getBasicProfile, getFullProfile, profile, request;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _a = context.config, locale = _a.locale, acceptLanguage = _a.acceptLanguage;
                    customer = params.customer;
                    defaultVariables = {
                        locale: locale,
                        acceptLanguage: acceptLanguage
                    };
                    _b = context.extendQuery(customQuery, {
                        getBasicProfile: { query: basicProfile, variables: defaultVariables },
                        getFullProfile: { query: fullProfile, variables: defaultVariables }
                    }), getBasicProfile = _b.getBasicProfile, getFullProfile = _b.getFullProfile;
                    profile = customer ? getFullProfile : getBasicProfile;
                    return [4 /*yield*/, context.client.query({
                            query: gql(templateObject_1$e || (templateObject_1$e = __makeTemplateObject(["", ""], ["", ""])), profile.query),
                            variables: profile.variables,
                            fetchPolicy: 'no-cache'
                        })];
                case 1:
                    request = _c.sent();
                    return [2 /*return*/, request];
            }
        });
    });
};
var templateObject_1$e;

var defaultQuery$3 = gql(templateObject_1$f || (templateObject_1$f = __makeTemplateObject(["\n  ", "\n\n  query getMyOrders($where: String, $sort: [String!], $limit: Int, $offset: Int, $locale: Locale!, $acceptLanguage: [Locale!]) {\n    me {\n      orders(where: $where, sort: $sort, limit: $limit, offset: $offset) {\n        results {\n          ...DefaultOrder\n        }\n      }\n    }\n  }\n"], ["\n  ", "\n\n  query getMyOrders($where: String, $sort: [String!], $limit: Int, $offset: Int, $locale: Locale!, $acceptLanguage: [Locale!]) {\n    me {\n      orders(where: $where, sort: $sort, limit: $limit, offset: $offset) {\n        results {\n          ...DefaultOrder\n        }\n      }\n    }\n  }\n"])), OrderFragment);
var templateObject_1$f;

var getOrders = function (context, params, customQuery) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, locale, acceptLanguage, defaultVariables, getMyOrders, request;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = context.config, locale = _a.locale, acceptLanguage = _a.acceptLanguage;
                defaultVariables = {
                    where: buildOrderWhere(params),
                    sort: params.sort,
                    limit: params.limit,
                    offset: params.offset,
                    acceptLanguage: acceptLanguage,
                    locale: locale
                };
                getMyOrders = context.extendQuery(customQuery, { getMyOrders: { query: defaultQuery$3, variables: defaultVariables } }).getMyOrders;
                return [4 /*yield*/, context.client.query({
                        query: gql(templateObject_1$g || (templateObject_1$g = __makeTemplateObject(["", ""], ["", ""])), getMyOrders.query),
                        variables: getMyOrders.variables,
                        fetchPolicy: 'no-cache'
                    })];
            case 1:
                request = _b.sent();
                return [2 /*return*/, request];
        }
    });
}); };
var templateObject_1$g;

var defaultQuery$4 = gql(templateObject_1$h || (templateObject_1$h = __makeTemplateObject(["\n  ", "\n\n  fragment Images on ProductVariant {\n    images {\n      url\n      label\n    }\n  }\n\n  fragment Price on ProductVariant {\n    price(currency: $currency, country: $country) {\n      ...DefaultProductPrice\n    }\n  }\n\n  fragment Attributes on ProductVariant {\n    attributesRaw {\n      name\n      value\n      attributeDefinition {\n        type {\n          name\n        }\n        label(locale: $locale)\n      }\n    }\n  }\n\n  fragment DefaultVariant on ProductVariant {\n    id\n    sku\n    ...Images\n    ...Price\n    ...Attributes\n  }\n\n  query products(\n    $where: String\n    $sort: [String!]\n    $limit: Int\n    $offset: Int\n    $skus: [String!]\n    $locale: Locale!\n    $acceptLanguage: [Locale!]\n    $currency: Currency!\n    $country: Country!\n  ) {\n    products(\n      where: $where\n      sort: $sort\n      limit: $limit\n      offset: $offset\n      skus: $skus\n    ) {\n      offset\n      count\n      total\n      results {\n        id\n        reviewRatingStatistics {\t\n          averageRating,\n          ratingsDistribution,\n          count\n        }\n        masterData {\n          current {\n            slug(acceptLanguage: $acceptLanguage)\n            name(acceptLanguage: $acceptLanguage)\n            metaTitle(acceptLanguage: $acceptLanguage)\n            metaKeywords(acceptLanguage: $acceptLanguage)\n            metaDescription(acceptLanguage: $acceptLanguage)\n            description(acceptLanguage: $acceptLanguage)\n            categoriesRef {\n              id\n            }\n            allVariants {\n              ...DefaultVariant\n            }\n            masterVariant {\n              ...DefaultVariant\n            }\n          }\n        }\n      }\n    }\n  }\n"], ["\n  ", "\n\n  fragment Images on ProductVariant {\n    images {\n      url\n      label\n    }\n  }\n\n  fragment Price on ProductVariant {\n    price(currency: $currency, country: $country) {\n      ...DefaultProductPrice\n    }\n  }\n\n  fragment Attributes on ProductVariant {\n    attributesRaw {\n      name\n      value\n      attributeDefinition {\n        type {\n          name\n        }\n        label(locale: $locale)\n      }\n    }\n  }\n\n  fragment DefaultVariant on ProductVariant {\n    id\n    sku\n    ...Images\n    ...Price\n    ...Attributes\n  }\n\n  query products(\n    $where: String\n    $sort: [String!]\n    $limit: Int\n    $offset: Int\n    $skus: [String!]\n    $locale: Locale!\n    $acceptLanguage: [Locale!]\n    $currency: Currency!\n    $country: Country!\n  ) {\n    products(\n      where: $where\n      sort: $sort\n      limit: $limit\n      offset: $offset\n      skus: $skus\n    ) {\n      offset\n      count\n      total\n      results {\n        id\n        reviewRatingStatistics {\t\n          averageRating,\n          ratingsDistribution,\n          count\n        }\n        masterData {\n          current {\n            slug(acceptLanguage: $acceptLanguage)\n            name(acceptLanguage: $acceptLanguage)\n            metaTitle(acceptLanguage: $acceptLanguage)\n            metaKeywords(acceptLanguage: $acceptLanguage)\n            metaDescription(acceptLanguage: $acceptLanguage)\n            description(acceptLanguage: $acceptLanguage)\n            categoriesRef {\n              id\n            }\n            allVariants {\n              ...DefaultVariant\n            }\n            masterVariant {\n              ...DefaultVariant\n            }\n          }\n        }\n      }\n    }\n  }\n"])), ProductPriceFragment);
var templateObject_1$h;

var getProduct = function (context, params, customQuery) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, locale, acceptLanguage, currency, country, defaultVariables, products, request, error_1;
    var _b, _c;
    return __generator(this, function (_d) {
        switch (_d.label) {
            case 0:
                _a = context.config, locale = _a.locale, acceptLanguage = _a.acceptLanguage, currency = _a.currency, country = _a.country;
                defaultVariables = {
                    where: buildProductWhere(context.config, params),
                    skus: params.skus,
                    limit: params.limit,
                    offset: params.offset,
                    locale: locale,
                    acceptLanguage: acceptLanguage,
                    currency: currency,
                    country: country
                };
                products = context.extendQuery(customQuery, { products: { query: defaultQuery$4, variables: defaultVariables } }).products;
                _d.label = 1;
            case 1:
                _d.trys.push([1, 3, , 4]);
                return [4 /*yield*/, context.client.query({
                        query: gql(templateObject_1$i || (templateObject_1$i = __makeTemplateObject(["", ""], ["", ""])), products.query),
                        variables: products.variables,
                        // temporary, seems like bug in apollo:
                        // @link: https://github.com/apollographql/apollo-client/issues/3234
                        fetchPolicy: 'no-cache'
                    })];
            case 2:
                request = _d.sent();
                return [2 /*return*/, request];
            case 3:
                error_1 = _d.sent();
                throw ((_b = error_1.graphQLErrors) === null || _b === void 0 ? void 0 : _b[0]) || ((_c = error_1.networkError) === null || _c === void 0 ? void 0 : _c.result) || error_1;
            case 4: return [2 /*return*/];
        }
    });
}); };
var templateObject_1$i;

var defaultQuery$5 = gql(templateObject_1$j || (templateObject_1$j = __makeTemplateObject(["\n  ", "\n\n  query shippingMethods($acceptLanguage: [Locale!], $cartId: String!) {\n    shippingMethods: shippingMethodsByCart(id: $cartId) {\n      ...DefaultShippingMethod\n    }\n  }\n"], ["\n  ", "\n\n  query shippingMethods($acceptLanguage: [Locale!], $cartId: String!) {\n    shippingMethods: shippingMethodsByCart(id: $cartId) {\n      ...DefaultShippingMethod\n    }\n  }\n"])), ShippingMethodFragment);
var templateObject_1$j;

var getShippingMethods = function (context, cartId, customQuery) { return __awaiter(void 0, void 0, void 0, function () {
    var acceptLanguage, defaultVariables, shippingMethods;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                acceptLanguage = context.config.acceptLanguage;
                defaultVariables = {
                    acceptLanguage: acceptLanguage, cartId: cartId
                };
                shippingMethods = context.extendQuery(customQuery, { shippingMethods: { query: defaultQuery$5, variables: defaultVariables } }).shippingMethods;
                return [4 /*yield*/, context.client.query({
                        query: gql(templateObject_1$k || (templateObject_1$k = __makeTemplateObject(["", ""], ["", ""])), shippingMethods.query),
                        variables: shippingMethods.variables,
                        fetchPolicy: 'no-cache'
                    })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };
var templateObject_1$k;

var isAnonymousSession = function (token) { var _a; return (_a = token === null || token === void 0 ? void 0 : token.scope) === null || _a === void 0 ? void 0 : _a.includes('anonymous_id'); };
var isUserSession = function (token) { var _a; return (_a = token === null || token === void 0 ? void 0 : token.scope) === null || _a === void 0 ? void 0 : _a.includes('customer_id'); };
var getAccessToken = function (token) { return token ? token.access_token : null; };

var isGuest = function (context) {
    var client = context.client, config = context.config;
    if (config.handleIsGuest) {
        return config.handleIsGuest(context);
    }
    if (client.tokenProvider || context.isProxy) {
        var token = config.auth.onTokenRead();
        return !isAnonymousSession(token) && !isUserSession(token);
    }
    return false;
};

var removeCartCoupon = function (context, cart, discountCode, customQuery) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, updateCart(context, {
                    id: cart.id,
                    version: cart.version,
                    actions: [removeDiscountCodeAction(discountCode)]
                }, customQuery)];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };

var removeFromCart = function (context, cart, product, customQuery) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, updateCart(context, {
                    id: cart.id,
                    version: cart.version,
                    actions: [createRemoveLineItemAction(product)]
                }, customQuery)];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };

var updateCartQuantity = function (context, cart, product, customQuery) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, updateCart(context, {
                    id: cart.id,
                    version: cart.version,
                    actions: [createChangeLineItemQuantityAction(product)]
                }, customQuery)];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); };

var updateShippingDetails = function (context, cart, shippingDetails, customQuery) { return __awaiter(void 0, void 0, void 0, function () {
    var cartResponse;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, updateCart(context, {
                    id: cart.id,
                    version: cart.version,
                    actions: [setShippingAddressAction(shippingDetails)]
                }, customQuery)];
            case 1:
                cartResponse = _a.sent();
                return [2 /*return*/, cartResponse];
        }
    });
}); };



var api = /*#__PURE__*/Object.freeze({
    __proto__: null,
    addToCart: addToCart,
    applyCartCoupon: applyCartCoupon,
    createCart: createCart,
    createMyOrderFromCart: createMyOrderFromCart,
    customerChangeMyPassword: customerChangeMyPassword,
    customerSignMeIn: customerSignMeIn,
    customerSignMeUp: customerSignMeUp,
    customerSignOut: customerSignOut,
    customerUpdateMe: customerUpdateMe,
    getCart: getCart,
    getCategory: getCategory,
    getMe: getMe,
    getOrders: getOrders,
    getProduct: getProduct,
    getShippingMethods: getShippingMethods,
    isGuest: isGuest,
    removeCartCoupon: removeCartCoupon,
    removeFromCart: removeFromCart,
    updateCart: updateCart,
    updateCartQuantity: updateCartQuantity,
    updateShippingDetails: updateShippingDetails
});

/* istanbul ignore file */
var restrictedOperations = {
    anonymous: [
        'createCart',
        'createMyShoppingList'
    ],
    user: [
        'customerSignMeIn',
        'customerSignMeUp'
    ]
};
var isAnonymousOperation = function (operationName) { return restrictedOperations.anonymous.includes(operationName); };
var isUserOperation = function (operationName) { return restrictedOperations.user.includes(operationName); };

var handleBeforeAuth = function (_a) {
    var sdkAuth = _a.sdkAuth, tokenProvider = _a.tokenProvider, apolloReq = _a.apolloReq, currentToken = _a.currentToken;
    return __awaiter(void 0, void 0, void 0, function () {
        var isAnonymous, isUser, isGuest, token;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    isAnonymous = isAnonymousSession(currentToken);
                    isUser = isUserSession(currentToken);
                    isGuest = !isAnonymous && !isUser;
                    if (!(isGuest && isAnonymousOperation(apolloReq.operationName))) return [3 /*break*/, 2];
                    core.Logger.debug('Apollo authLinkBefore, anonymousFlow', apolloReq.operationName);
                    return [4 /*yield*/, sdkAuth.anonymousFlow()];
                case 1:
                    token = _b.sent();
                    tokenProvider.setTokenInfo(token);
                    core.Logger.debug('Apollo authLinkBefore, anonymousFlow, generated token: ', getAccessToken(token));
                    return [2 /*return*/, token];
                case 2: return [2 /*return*/, tokenProvider.getTokenInfo()];
            }
        });
    });
};
var handleAfterAuth = function (_a) {
    var sdkAuth = _a.sdkAuth, tokenProvider = _a.tokenProvider, apolloReq = _a.apolloReq, currentToken = _a.currentToken, response = _a.response;
    return __awaiter(void 0, void 0, void 0, function () {
        var _b, email, password, token;
        var _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (!(!isUserSession(currentToken) && isUserOperation(apolloReq.operationName))) return [3 /*break*/, 3];
                    _b = apolloReq.variables.draft, email = _b.email, password = _b.password;
                    core.Logger.debug('Apollo authLinkAfter, customerPasswordFlow', apolloReq.operationName);
                    if (!!((_c = response.errors) === null || _c === void 0 ? void 0 : _c.length)) return [3 /*break*/, 2];
                    return [4 /*yield*/, sdkAuth.customerPasswordFlow({ username: email, password: password })];
                case 1:
                    token = _d.sent();
                    tokenProvider.setTokenInfo(token);
                    core.Logger.debug('Apollo authLinkAfter, customerPasswordFlow, generated token: ', getAccessToken(token));
                    return [2 /*return*/, token];
                case 2: return [2 /*return*/, currentToken];
                case 3: return [2 /*return*/, currentToken];
            }
        });
    });
};
var handleRetry = function (_a) {
    var tokenProvider = _a.tokenProvider;
    return function (count, operation, error) {
        var _a;
        if (count > 3) {
            return false;
        }
        if (((_a = error === null || error === void 0 ? void 0 : error.result) === null || _a === void 0 ? void 0 : _a.message) === 'invalid_token') {
            core.Logger.debug("Apollo retry-link, the operation (" + operation.operationName + ") sent with wrong token, creating a new one... (attempt: " + count + ")");
            tokenProvider.invalidateTokenInfo();
            return true;
        }
        return false;
    };
};

var createAuthClient = function (config) {
    return new SdkAuth__default({
        host: config.authHost,
        projectKey: config.projectKey,
        disableRefreshToken: false,
        credentials: {
            clientId: config.clientId,
            clientSecret: config.clientSecret
        },
        scopes: config.scopes
    });
};
var createTokenProvider = function (settings, _a) {
    var sdkAuth = _a.sdkAuth, currentToken = _a.currentToken;
    return new SdkAuth.TokenProvider({
        sdkAuth: sdkAuth,
        fetchTokenInfo: function (sdkAuthInstance) { return sdkAuthInstance.clientCredentialsFlow(); },
        onTokenInfoChanged: function (tokenInfo) {
            core.Logger.debug('TokenProvider.onTokenInfoChanged', getAccessToken(tokenInfo));
            settings.auth.onTokenChange(tokenInfo);
        },
        onTokenInfoRefreshed: function (tokenInfo) {
            core.Logger.debug('TokenProvider.onTokenInfoRefreshed', getAccessToken(tokenInfo));
        }
    }, currentToken);
};
var createErrorHandler = function () {
    return apolloLinkError.onError(function (_a) {
        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;
        if (graphQLErrors) {
            graphQLErrors.map(function (_a) {
                var message = _a.message, locations = _a.locations, path = _a.path;
                if (!message.includes('Resource Owner Password Credentials Grant')) {
                    if (!locations) {
                        core.Logger.error("[GraphQL error]: Message: " + message + ", Path: " + path);
                        return;
                    }
                    var parsedLocations = locations.map(function (_a) {
                        var column = _a.column, line = _a.line;
                        return "[column: " + column + ", line: " + line + "]";
                    });
                    core.Logger.error("[GraphQL error]: Message: " + message + ", Location: " + parsedLocations.join(', ') + ", Path: " + path);
                }
            });
        }
        if (networkError) {
            core.Logger.error("[Network error]: " + networkError);
        }
    });
};
var createCommerceToolsConnection = function (settings) {
    var currentToken = settings.auth.onTokenRead();
    core.Logger.debug('createCommerceToolsConnection', getAccessToken(currentToken));
    var sdkAuth = createAuthClient(settings.api);
    var tokenProvider = createTokenProvider(settings, { sdkAuth: sdkAuth, currentToken: currentToken });
    var httpLink = apolloLinkHttp.createHttpLink({ uri: settings.api.uri, fetch: fetch });
    var onErrorLink = createErrorHandler();
    var authLinkBefore = apolloLinkContext.setContext(function (apolloReq, _a) {
        var headers = _a.headers;
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        core.Logger.debug('Apollo authLinkBefore', apolloReq.operationName);
                        return [4 /*yield*/, handleBeforeAuth({ sdkAuth: sdkAuth, tokenProvider: tokenProvider, apolloReq: apolloReq, currentToken: currentToken })];
                    case 1:
                        currentToken = _b.sent();
                        core.Logger.debug('Apollo authLinkBefore, finished, generated token: ', getAccessToken(currentToken));
                        return [2 /*return*/, {
                                headers: __assign(__assign({}, headers), { authorization: "Bearer " + currentToken.access_token })
                            }];
                }
            });
        });
    });
    var authLinkAfter = new apolloLink.ApolloLink(function (apolloReq, forward) {
        return utilities.asyncMap(forward(apolloReq), function (response) { return __awaiter(void 0, void 0, void 0, function () {
            var errors;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        core.Logger.debug('Apollo authLinkAfter', apolloReq.operationName);
                        return [4 /*yield*/, handleAfterAuth({ sdkAuth: sdkAuth, tokenProvider: tokenProvider, apolloReq: apolloReq, currentToken: currentToken, response: response })];
                    case 1:
                        currentToken = _a.sent();
                        errors = (response.errors || []).filter(function (_a) {
                            var message = _a.message;
                            return !message.includes('Resource Owner Password Credentials Grant') &&
                                !message.includes('This endpoint requires an access token issued either');
                        });
                        return [2 /*return*/, __assign(__assign({}, response), { errors: errors })];
                }
            });
        }); });
    });
    var errorRetry = new apolloLinkRetry.RetryLink({
        attempts: handleRetry({ tokenProvider: tokenProvider }),
        delay: function () { return 0; }
    });
    var apolloLink$1 = apolloLink.ApolloLink.from([onErrorLink, errorRetry, authLinkBefore, authLinkAfter.concat(httpLink)]);
    return {
        apolloLink: apolloLink$1,
        sdkAuth: sdkAuth,
        tokenProvider: tokenProvider
    };
};

var defaultSettings = {
    locale: 'en',
    acceptLanguage: ['en'],
    auth: {
        onTokenChange: function () { },
        onTokenRead: function () { return ''; },
        onTokenRemove: function () { }
    },
    cookies: {
        currencyCookieName: 'vsf-currency',
        countryCookieName: 'vsf-country',
        localeCookieName: 'vsf-locale'
    }
};

var onCreate = function (settings) {
    var languageMap = settings.languageMap || {};
    var acceptLanguage = settings.acceptLanguage || defaultSettings.acceptLanguage;
    var locale = settings.locale || defaultSettings.locale;
    var config = __assign(__assign(__assign({}, defaultSettings), settings), { languageMap: languageMap, acceptLanguage: languageMap[locale] || acceptLanguage, auth: settings.auth || defaultSettings.auth });
    if (settings.client) {
        return { client: settings.client, config: config };
    }
    if (settings.customOptions && settings.customOptions.link) {
        return {
            client: new ApolloClient(__assign({ cache: new apolloCacheInmemory.InMemoryCache() }, settings.customOptions)),
            config: config
        };
    }
    var _a = createCommerceToolsConnection(config), apolloLink = _a.apolloLink, sdkAuth = _a.sdkAuth, tokenProvider = _a.tokenProvider;
    var client = new ApolloClient(__assign({ link: apolloLink, cache: new apolloCacheInmemory.InMemoryCache() }, settings.customOptions));
    client.sdkAuth = sdkAuth;
    client.tokenProvider = tokenProvider;
    return {
        config: config,
        client: client
    };
};
var parseToken = function (rawToken) {
    try {
        return JSON.parse(rawToken);
    }
    catch (e) {
        return null;
    }
};
var tokenExtension = {
    name: 'tokenExtension',
    hooks: function (req, res) {
        var rawCurrentToken = req.cookies['vsf-commercetools-token'];
        var currentToken = parseToken(rawCurrentToken);
        return {
            beforeCreate: function (_a) {
                var configuration = _a.configuration;
                return (__assign(__assign({}, configuration), { auth: {
                        onTokenChange: function (newToken) {
                            if (!currentToken || currentToken.access_token !== newToken.access_token) {
                                res.cookie('vsf-commercetools-token', JSON.stringify(newToken));
                            }
                        },
                        onTokenRead: function () {
                            res.cookie('vsf-commercetools-token', rawCurrentToken);
                            return currentToken;
                        },
                        onTokenRemove: function () {
                            delete req.cookies['vsf-commercetools-token'];
                        }
                    } }));
            }
        };
    }
};
var createApiClient = core.apiClientFactory({
    onCreate: onCreate,
    api: api,
    extensions: [tokenExtension]
}).createApiClient;

exports.createApiClient = createApiClient;
//# sourceMappingURL=index.js.map
