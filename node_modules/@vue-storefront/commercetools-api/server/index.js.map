{"version":3,"file":"index.js","sources":["../src/fragments/index.ts","../src/api/updateCart/defaultMutation.ts","../src/api/updateCart/index.ts","../src/helpers/cart/actions.ts","../src/api/addToCart/index.ts","../src/api/applyCartCoupon/index.ts","../src/api/createCart/defaultMutation.ts","../src/api/createCart/index.ts","../src/api/createMyOrderFromCart/defaultMutation.ts","../src/api/createMyOrderFromCart/index.ts","../src/api/customerChangeMyPassword/defaultMutation.ts","../src/api/customerChangeMyPassword/index.ts","../src/api/customerSignMeIn/defaultMutation.ts","../src/api/customerSignMeIn/index.ts","../src/api/customerSignMeUp/defaultMutation.ts","../src/api/customerSignMeUp/index.ts","../src/api/customerSignOut/index.ts","../src/helpers/customer/index.ts","../src/api/customerUpdateMe/defaultMutation.ts","../src/api/customerUpdateMe/index.ts","../src/api/getCart/defaultQuery.ts","../src/api/getCart/index.ts","../src/api/getCategory/defaultQuery.ts","../src/types/Api.ts","../src/helpers/search/index.ts","../src/api/getCategory/index.ts","../src/api/getMe/defaultQuery.ts","../src/api/getMe/index.ts","../src/api/getOrders/defaultQuery.ts","../src/api/getOrders/index.ts","../src/api/getProduct/defaultQuery.ts","../src/api/getProduct/index.ts","../src/api/getShippingMethods/defaultQuery.ts","../src/api/getShippingMethods/index.ts","../src/helpers/utils.ts","../src/api/isGuest/index.ts","../src/api/removeCartCoupon/index.ts","../src/api/removeFromCart/index.ts","../src/api/updateCartQuantity/index.ts","../src/api/updateShippingDetails/index.ts","../src/helpers/commercetoolsLink/restrictedOperations.ts","../src/helpers/commercetoolsLink/linkHandlers.ts","../src/helpers/commercetoolsLink/index.ts","../src/helpers/apiClient/defaultSettings.ts","../src/index.server.ts"],"sourcesContent":["export const ProductPriceFragment = `\n  fragment DefaultProductPrice on ProductPrice {\n    discounted {\n      value {\n        type\n        currencyCode\n        centAmount\n        fractionDigits\n      }\n      discount {\n        validFrom\n        validUntil\n        isActive\n        name(acceptLanguage: $acceptLanguage)\n      }\n    }\n    value {\n      type\n      currencyCode\n      centAmount\n      fractionDigits\n    }\n  }\n`;\n\nexport const AddressFragment = `\n  fragment DefaultAddress on Address {\n    id\n    title\n    firstName\n    lastName\n    streetName\n    streetNumber\n    postalCode\n    city\n    country\n    state\n    region\n    company\n    apartment\n    phone\n    mobile\n  }\n`;\n\n// TODO: Remove all address information and update PRO packages to use customQueries when this is implemented: https://github.com/DivanteLtd/vue-storefront/issues/5049\nexport const CustomerFragment = `\n  ${AddressFragment}\n\n  fragment DefaultCustomer on Customer {\n    version\n    firstName\n    lastName\n    email\n    addresses {\n      id\n    }\n    shippingAddresses {\n      ...DefaultAddress\n    }\n    billingAddresses {\n      ...DefaultAddress\n    }\n    defaultBillingAddressId\n    defaultShippingAddressId\n  }\n`;\n\nexport const LineItemFragment = `\n  ${ProductPriceFragment}\n\n  fragment DefaultLineItem on LineItem {\n    id\n    productId\n    name(acceptLanguage: $acceptLanguage)\n    productSlug(acceptLanguage: $acceptLanguage)\n    quantity\n    discountedPricePerQuantity {\n      quantity\n      discountedPrice {\n        value {\n          centAmount\n        }\n        includedDiscounts {\n          discount {\n            name(acceptLanguage: $acceptLanguage)\n            isActive\n          }\n        }\n      }\n    }\n    variant {\n      id\n      sku\n      price(currency: \"USD\") {\n        tiers {\n          value {\n            centAmount\n          }\n        }\n        value {\n          centAmount\n        }\n        discounted {\n          value {\n            centAmount\n          }\n          discount {\n            isActive\n            name(acceptLanguage: $acceptLanguage)\n          }\n        }\n      }\n      images {\n        url\n        label\n      }\n      attributesRaw {\n        name\n        value\n        attributeDefinition {\n          type {\n            name\n          }\n          label(locale: $locale)\n        }\n      }\n    }\n    price {\n      ...DefaultProductPrice\n    }\n  }\n`;\n\nexport const ShippingMethodFragment = `\n  fragment DefaultShippingMethod on ShippingMethod {\n    id\n    version\n    name\n    isDefault\n    localizedDescription(acceptLanguage: $acceptLanguage)\n    zoneRates {\n      zone {\n        id\n        name\n      }\n      shippingRates {\n        freeAbove {\n          type\n          centAmount\n        }\n        isMatching\n        price {\n          centAmount\n        }\n      }\n    }\n  }\n`;\n\nexport const CartFragment = `\n  ${AddressFragment}\n  ${CustomerFragment}\n  ${LineItemFragment}\n  ${ShippingMethodFragment}\n\n  fragment DefaultCart on Cart {\n    id\n    customerId\n    customerEmail\n    lineItems {\n      ...DefaultLineItem\n    }\n    totalPrice {\n      centAmount\n    }\n    shippingAddress {\n      ...DefaultAddress\n    }\n    billingAddress {\n      ...DefaultAddress\n    }\n    customer {\n      ...DefaultCustomer\n    }\n    totalPrice {\n      centAmount\n    }\n    taxedPrice {\n      totalNet {\n        centAmount\n      }\n      totalGross {\n        centAmount\n      }\n    }\n    paymentInfo {\n      payments {\n        id\n      }\n    }\n    shippingInfo {\n      price {\n        centAmount\n      }\n      shippingMethod {\n        ...DefaultShippingMethod\n      }\n    }\n    discountCodes {\n      discountCode {\n        id\n        code\n        isActive\n        validFrom\n        validUntil\n        name(acceptLanguage: $acceptLanguage)\n      }\n    }\n    refusedGifts {\n      isActive\n      validFrom\n      validUntil\n      name(acceptLanguage: $acceptLanguage)\n    }\n    custom {\n      customFieldsRaw {\n        name\n        value\n      }\n    }\n    cartState\n    version\n  }\n`;\n\nexport const OrderFragment = `\n  ${AddressFragment}\n  ${LineItemFragment}\n\n  fragment DefaultOrder on Order {\n    lineItems {\n      ...DefaultLineItem\n    }\n    totalPrice {\n      centAmount\n    }\n    orderState\n    id\n    orderNumber\n    version\n    createdAt\n    customerEmail\n    shipmentState\n    paymentState\n    shippingAddress {\n      ...DefaultAddress\n    }\n    billingAddress {\n      ...DefaultAddress\n    }\n    cart {\n      id\n      version\n    }\n  }\n`;\n\n","import gql from 'graphql-tag';\nimport { CartFragment } from './../../fragments';\n\nexport default gql`\n  ${CartFragment}\n\n  mutation updateCart($id: String!, $version: Long!, $actions: [MyCartUpdateAction!]!, $locale: Locale!, $acceptLanguage: [Locale!]) {\n    cart: updateMyCart(id: $id, version: $version, actions: $actions) {\n      ...DefaultCart\n    }\n  }\n`;\n","import gql from 'graphql-tag';\nimport { Logger, CustomQuery } from '@vue-storefront/core';\nimport defaultQuery from './defaultMutation';\nimport { CartUpdateAction, MyCartUpdateAction } from '../../types/GraphQL';\n\nconst VERSION_MISSMATCH_CODE = 'ConcurrentModification';\n\nexport interface UpdateCartParams {\n  id: string;\n  version: number;\n  actions: CartUpdateAction[] | MyCartUpdateAction[];\n  versionFallback?: boolean;\n}\n\nconst updateCart = async (context, params: UpdateCartParams, customQuery?: CustomQuery) => {\n  const { locale, acceptLanguage } = context.config;\n  const defaultVariables = params\n    ? {\n      locale,\n      acceptLanguage,\n      ...params\n    }\n    : { acceptLanguage };\n\n  const { updateCart: updateCartGql } = context.extendQuery(\n    customQuery, { updateCart: { query: defaultQuery, variables: defaultVariables } }\n  );\n\n  try {\n    const request = await context.client.mutate({\n      mutation: gql`${updateCartGql.query}`,\n      variables: updateCartGql.variables,\n      fetchPolicy: 'no-cache'\n    });\n\n    return request;\n  } catch (error) {\n    const canRetry = params.versionFallback ?? true;\n    const causedByMissmatch = error.graphQLErrors?.[0]?.code?.includes(VERSION_MISSMATCH_CODE);\n\n    if (!causedByMissmatch || !canRetry) {\n      throw error;\n    }\n\n    Logger.debug('Cart version missmatch. Retrying with current version.');\n\n    return updateCart(context, {\n      ...params,\n      version: error.graphQLErrors[0].currentVersion\n    });\n  }\n};\n\nexport default updateCart;\n","import { Logger } from '@vue-storefront/core';\nimport { ProductVariant, Address, LineItem, ReferenceInput, ResourceIdentifierInput, AddressInput } from './../../types/GraphQL';\n\nconst hasContactInfo = details => Object.keys(details.contactInfo || {}).some(c => ['phone', 'email', 'mobile', 'fax'].includes(c));\n\nexport const createAddLineItemAction = (variant: ProductVariant, quantity: number) => ({\n  addLineItem: {\n    variantId: variant.id,\n    quantity: quantity,\n    sku: variant.sku\n  }\n});\n\nexport const createRemoveLineItemAction = (product: LineItem) => ({\n  removeLineItem: {\n    lineItemId: product.id,\n    quantity: product.quantity\n  }\n});\n\nexport const createChangeLineItemQuantityAction = (product: LineItem) => ({\n  changeLineItemQuantity: {\n    lineItemId: product.id,\n    quantity: product.quantity\n  }\n});\n\nexport const setShippingAddressAction = (shippingDetails: Address): { setShippingAddress: { address: AddressInput } } => {\n  if (hasContactInfo(shippingDetails)) {\n    Logger.warn('Using `contactInfo` on Address is being deprecated in the CT API, use `email` `phone` `mobile` and `fax` fields directly.');\n  }\n  return {\n    setShippingAddress: {\n      address: {\n        title: shippingDetails.title,\n        salutation: shippingDetails.salutation,\n        firstName: shippingDetails.firstName,\n        lastName: shippingDetails.lastName,\n        streetName: shippingDetails.streetName,\n        streetNumber: shippingDetails.streetNumber,\n        additionalStreetInfo: shippingDetails.additionalStreetInfo,\n        postalCode: shippingDetails.postalCode,\n        city: shippingDetails.city,\n        region: shippingDetails.region,\n        state: shippingDetails.state,\n        country: shippingDetails.country,\n        company: shippingDetails.company,\n        department: shippingDetails.department,\n        building: shippingDetails.building,\n        apartment: shippingDetails.apartment,\n        pOBox: shippingDetails.pOBox,\n        phone: shippingDetails.phone || shippingDetails.contactInfo?.phone,\n        mobile: shippingDetails.mobile || shippingDetails.contactInfo?.mobile,\n        email: shippingDetails.email || shippingDetails.contactInfo?.email,\n        fax: shippingDetails.fax || shippingDetails.contactInfo?.fax,\n        additionalAddressInfo: shippingDetails.additionalAddressInfo\n      }\n    }\n  };\n};\n\nexport const setShippingMethodAction = (shippingMethodId?: string) => ({\n  setShippingMethod: {\n    shippingMethod: shippingMethodId ? { id: shippingMethodId } : null\n  }\n});\n\nexport const addPayment = (payment: ResourceIdentifierInput) => ({\n  addPayment: { payment }\n});\n\nexport const setBillingAddressAction = (billingDetails: Address): { setBillingAddress: { address: AddressInput } } => {\n  if (hasContactInfo(billingDetails)) {\n    Logger.warn('Using `contactInfo` on Address is being deprecated in the CT API, use `email` `phone` `mobile` and `fax` fields directly.');\n  }\n  return {\n    setBillingAddress: {\n      address: {\n        title: billingDetails.title,\n        salutation: billingDetails.salutation,\n        firstName: billingDetails.firstName,\n        lastName: billingDetails.lastName,\n        streetName: billingDetails.streetName,\n        streetNumber: billingDetails.streetNumber,\n        additionalStreetInfo: billingDetails.additionalStreetInfo,\n        postalCode: billingDetails.postalCode,\n        city: billingDetails.city,\n        region: billingDetails.region,\n        state: billingDetails.state,\n        country: billingDetails.country,\n        company: billingDetails.company,\n        department: billingDetails.department,\n        building: billingDetails.building,\n        apartment: billingDetails.apartment,\n        pOBox: billingDetails.pOBox,\n        phone: billingDetails.phone || billingDetails.contactInfo?.phone,\n        mobile: billingDetails.mobile || billingDetails.contactInfo?.mobile,\n        email: billingDetails.email || billingDetails.contactInfo?.email,\n        fax: billingDetails.fax || billingDetails.contactInfo?.fax,\n        additionalAddressInfo: billingDetails.additionalAddressInfo\n      }\n    }\n  };\n};\n\nexport const addPaymentAction = (paymentMethodId: string) => ({\n  addPayment: {\n    payment: {\n      id: paymentMethodId\n    }\n  }\n});\n\nexport const addDiscountCodeAction = (code: string) => ({\n  addDiscountCode: { code }\n});\n\nexport const removeDiscountCodeAction = (discountCode: ReferenceInput) => ({\n  removeDiscountCode: { discountCode }\n});\n\nexport const setCustomerEmail = (email: string) => ({\n  setCustomerEmail: { email }\n});\n","import { CustomQuery } from '@vue-storefront/core';\nimport updateCart from './../updateCart';\nimport { CartResponse } from './../../types/Api';\nimport { Cart, ProductVariant } from './../../types/GraphQL';\nimport { createAddLineItemAction } from './../../helpers/cart/actions';\n\nconst addToCart = async (\n  settings,\n  { id, version }: Cart,\n  product: ProductVariant,\n  quantity: number,\n  customQuery?: CustomQuery\n): Promise<CartResponse> => {\n  return await updateCart(\n    settings,\n    {\n      id,\n      version,\n      actions: [createAddLineItemAction(product, quantity)]\n    },\n    customQuery\n  );\n};\n\nexport default addToCart;\n","import { CustomQuery } from '@vue-storefront/core';\nimport updateCart from '../updateCart';\nimport { CartResponse } from '../../types/Api';\nimport { Cart } from '../../types/GraphQL';\nimport { addDiscountCodeAction } from '../../helpers/cart/actions';\n\nconst applyCartCoupon = async (\n  settings,\n  cart: Cart,\n  discountCode: string,\n  customQuery?: CustomQuery\n): Promise<CartResponse> => {\n  return await updateCart(settings, {\n    id: cart.id,\n    version: cart.version,\n    actions: [addDiscountCodeAction(discountCode)]\n  }, customQuery);\n};\n\nexport default applyCartCoupon;\n","import gql from 'graphql-tag';\nimport { CartFragment } from './../../fragments';\n\nexport default gql`\n  ${CartFragment}\n\n  mutation createCart($draft: MyCartDraft!, $locale: Locale!, $acceptLanguage: [Locale!], $storeKey: KeyReferenceInput) {\n    cart: createMyCart(draft: $draft, storeKey: $storeKey) {\n      ...DefaultCart\n    }\n  }\n`;\n","import defaultMutation from './defaultMutation';\nimport { CartData } from './../../types/Api';\nimport gql from 'graphql-tag';\nimport { CustomQuery } from '@vue-storefront/core';\n\nconst createCart = async (context, cartDraft: CartData = {}, customQuery?: CustomQuery) => {\n  const { locale, acceptLanguage, currency } = context.config;\n\n  const defaultVariables = {\n    acceptLanguage,\n    locale,\n    draft: {\n      currency,\n      ...cartDraft\n    }\n  };\n\n  const { createCart: createCartGql } = context.extendQuery(\n    customQuery, { createCart: { query: defaultMutation, variables: defaultVariables } }\n  );\n\n  const request = await context.client.mutate({\n    mutation: gql`${createCartGql.query}`,\n    variables: createCartGql.variables,\n    fetchPolicy: 'no-cache'\n  });\n\n  return request;\n};\n\nexport default createCart;\n","import gql from 'graphql-tag';\nimport { OrderFragment } from '../../fragments';\n\nexport default gql`\n  ${OrderFragment}\n\n  mutation createMyOrderFromCart($draft: OrderMyCartCommand!, $locale: Locale!, $acceptLanguage: [Locale!], $storeKey: KeyReferenceInput) {\n    order: createMyOrderFromCart(draft: $draft, storeKey: $storeKey) {\n      ...DefaultOrder\n    }\n  }\n`;\n","import { OrderMyCartCommand } from '../../types/GraphQL';\nimport defaultMutation from './defaultMutation';\nimport { OrderMutationResponse } from '../../types/Api';\nimport gql from 'graphql-tag';\nimport { CustomQuery } from '@vue-storefront/core';\n\nconst createMyOrderFromCart = async (context, draft: OrderMyCartCommand, customQuery?: CustomQuery): Promise<OrderMutationResponse> => {\n  const { locale, acceptLanguage } = context.config;\n  const defaultVariables = { locale,\n    acceptLanguage,\n    draft\n  };\n\n  const { createMyOrderFromCart } = context.extendQuery(\n    customQuery, { createMyOrderFromCart: { query: defaultMutation, variables: defaultVariables } }\n  );\n\n  return await context.client.mutate({\n    mutation: gql`${createMyOrderFromCart.query}`,\n    variables: createMyOrderFromCart.variables,\n    fetchPolicy: 'no-cache'\n  });\n};\n\nexport default createMyOrderFromCart;\n","import gql from 'graphql-tag';\nimport { CustomerFragment } from '../../fragments';\n\nexport default gql`\n  ${CustomerFragment}\n\n  mutation customerChangeMyPassword($version: Long!, $currentPassword: String!, $newPassword: String!, $storeKey: KeyReferenceInput) {\n    user: customerChangeMyPassword(version: $version, currentPassword: $currentPassword, newPassword: $newPassword, storeKey: $storeKey) {\n      ...DefaultCustomer\n    }\n  }\n`;\n","import CustomerChangeMyPassword from './defaultMutation';\nimport { ChangeMyPasswordResponse } from '../../types/Api';\n\nconst customerChangeMyPassword = async ({ client }, version: any, currentPassword: string, newPassword: string): Promise<ChangeMyPasswordResponse> => {\n  return await client.mutate({\n    mutation: CustomerChangeMyPassword,\n    variables: {\n      version,\n      currentPassword,\n      newPassword\n    },\n    fetchPolicy: 'no-cache'\n  }) as ChangeMyPasswordResponse;\n};\n\nexport default customerChangeMyPassword;\n","import gql from 'graphql-tag';\nimport { CustomerFragment, CartFragment } from '../../fragments';\n\nexport default gql`\n  ${CustomerFragment}\n  ${CartFragment}\n\n  mutation customerSignMeIn($draft: CustomerSignMeInDraft!, $locale: Locale!, $acceptLanguage: [Locale!], $storeKey: KeyReferenceInput) {\n    user: customerSignMeIn(draft: $draft, storeKey: $storeKey) {\n      customer {\n        ...DefaultCustomer\n      }\n      cart {\n        ...DefaultCart\n      }\n    }\n  }\n`;\n","import { CustomerSignMeInDraft } from '../../types/GraphQL';\nimport CustomerSignMeInMutation from './defaultMutation';\nimport { SignInResponse } from './../../types/Api';\n\nconst customerSignMeIn = async (context, draft: CustomerSignMeInDraft): Promise<SignInResponse> => {\n  const { locale, acceptLanguage } = context.config;\n  const loginResponse = await context.client.mutate({\n    mutation: CustomerSignMeInMutation,\n    variables: { draft, locale, acceptLanguage },\n    fetchPolicy: 'no-cache'\n  }) as SignInResponse;\n\n  return loginResponse;\n};\n\nexport default customerSignMeIn;\n","import gql from 'graphql-tag';\nimport { CustomerFragment, CartFragment } from './../../fragments';\n\nexport default gql`\n  ${CustomerFragment}\n  ${CartFragment}\n\n  mutation customerSignMeUp($draft: CustomerSignMeUpDraft!, $locale: Locale!, $acceptLanguage: [Locale!], $storeKey: KeyReferenceInput) {\n    user: customerSignMeUp(draft: $draft, storeKey: $storeKey) {\n      customer {\n        ...DefaultCustomer\n      }\n      cart {\n        ...DefaultCart\n      }\n    }\n  }\n`;\n","import { CustomerSignMeUpDraft } from '../../types/GraphQL';\nimport CustomerSignMeUpMutation from './defaultMutation';\nimport { SignInResponse } from '../../types/Api';\n\nconst customerSignMeUp = async (context, draft: CustomerSignMeUpDraft): Promise<SignInResponse> => {\n  const { locale, acceptLanguage } = context.config;\n  const registerResponse = await context.client.mutate({\n    mutation: CustomerSignMeUpMutation,\n    variables: { draft, locale, acceptLanguage },\n    fetchPolicy: 'no-cache'\n  }) as SignInResponse;\n\n  return registerResponse;\n};\n\nexport default customerSignMeUp;\n","const customerSignOut = async ({ config, client }) => {\n  if (config.auth.onTokenRemove) {\n    config.auth.onTokenRemove();\n  }\n\n  if (client.tokenProvider) {\n    client.tokenProvider.invalidateTokenInfo();\n  }\n};\n\nexport default customerSignOut;\n","export const changeCustomerEmailAction = (email: string) => ({\n  changeEmail: { email }\n});\n\nexport const setCustomerFirstNameAction = (firstName: string) => ({\n  setFirstName: { firstName }\n});\n\nexport const setCustomerLastNameAction = (lastName: string) => ({\n  setLastName: { lastName }\n});\n","import gql from 'graphql-tag';\nimport { CustomerFragment } from '../../fragments';\n\nexport default gql`\n  ${CustomerFragment}\n\n  mutation customerUpdateMe($version: Long!, $actions: [MyCustomerUpdateAction!]!, $storeKey: KeyReferenceInput) {\n    user: updateMyCustomer(version: $version, actions: $actions, storeKey: $storeKey) {\n      ...DefaultCustomer\n    }\n  }\n`;\n","import { changeCustomerEmailAction, setCustomerFirstNameAction, setCustomerLastNameAction } from '../../helpers/customer';\nimport CustomerUpdateMeMutation from './defaultMutation';\n\nconst customerUpdateMe = async ({ client }, currentUser, updatedUserData) => {\n  const updateResponse = await client.mutate({\n    mutation: CustomerUpdateMeMutation,\n    variables: {\n      version: currentUser.version,\n      actions: [\n        changeCustomerEmailAction(updatedUserData.email),\n        setCustomerFirstNameAction(updatedUserData.firstName),\n        setCustomerLastNameAction(updatedUserData.lastName)\n      ]\n    },\n    fetchPolicy: 'no-cache'\n  });\n\n  return updateResponse.data;\n};\n\nexport default customerUpdateMe;\n","import gql from 'graphql-tag';\nimport { CartFragment } from './../../fragments';\n\nexport default gql`\n  ${CartFragment}\n\n  query getCart($cartId: String!, $locale: Locale!, $acceptLanguage: [Locale!]) {\n    cart(id: $cartId) {\n      ...DefaultCart\n    }\n  }\n`;\n","import { CartQueryResponse } from '../../types/Api';\nimport defaultQuery from './defaultQuery';\n\nconst getCart = async ({ config, client }, cartId: string): Promise<CartQueryResponse> => {\n  const { locale, acceptLanguage } = config;\n  return await client.query({\n    query: defaultQuery,\n    variables: { cartId,\n      locale,\n      acceptLanguage },\n    fetchPolicy: 'no-cache'\n  });\n};\n\nexport default getCart;\n","import gql from 'graphql-tag';\n\nexport default gql`\n  fragment Children on Category {\n    id\n    slug(acceptLanguage: $acceptLanguage)\n    name(acceptLanguage: $acceptLanguage)\n    childCount\n  }\n\n  fragment DefaultCategory on Category {\n    id\n    slug(acceptLanguage: $acceptLanguage)\n    name(acceptLanguage: $acceptLanguage)\n    childCount\n    children {\n      ...Children\n      children {\n        ...Children\n        children {\n          ...Children\n        }\n      }\n    }\n  }\n\n  query categories($where: String, $sort: [String!], $limit: Int, $offset: Int, $acceptLanguage: [Locale!]) {\n    categories(where: $where, sort: $sort, limit: $limit, offset: $offset) {\n      offset\n      count\n      total\n      results {\n        id\n        slug(acceptLanguage: $acceptLanguage)\n        name(acceptLanguage: $acceptLanguage)\n        description(acceptLanguage: $acceptLanguage)\n        childCount\n        parent {\n          ...DefaultCategory\n          parent {\n            ...DefaultCategory\n            parent {\n              ...DefaultCategory\n            }\n          }\n        }\n        children {\n          ...DefaultCategory\n        }\n      }\n    }\n  }\n`;\n","import { ApolloQueryResult } from 'apollo-client';\nimport { FetchResult } from 'apollo-link';\nimport { ApiClientMethods } from '@vue-storefront/core';\nimport { Token, CustomerCredentials } from './setup';\nimport { UpdateCartParams } from '../api/updateCart';\nimport { GetMeParams } from '../api/getMe';\nimport { ShippingMethodData } from '../api/getShippingMethods';\nimport {\n  Cart,\n  Order,\n  ShippingMethod,\n  CustomerSignInResult,\n  Customer,\n  CartDraft,\n  ProductVariant,\n  OrderMyCartCommand,\n  CustomerSignMeInDraft,\n  CustomerSignMeUpDraft,\n  ReferenceInput,\n  Address,\n  LineItem,\n  CategoryQueryResult,\n  ProductQueryResult,\n  Me,\n  CartQueryInterface\n} from './GraphQL';\n\nexport interface BaseSearch {\n  limit?: number;\n  offset?: number;\n  sort?: string[];\n}\n\nexport enum AttributeType {\n  STRING = 'StringAttribute',\n  DATE = 'DateAttribute',\n  DATETIME = 'DateTimeAttribute',\n  TIME = 'TimeAttribute',\n  NUMBER = 'NumberAttribute',\n  ENUM = 'EnumAttribute',\n  LOCALIZED_ENUM = 'LocalizedEnumAttribute',\n  LOCALIZED_STRING = 'LocalizedStringAttribute',\n  MONEY = 'MoneyAttribute',\n  BOOLEAN = 'BooleanAttribute'\n}\n\nexport interface Filter {\n  type: AttributeType;\n  name: string;\n  value: any;\n}\n\nexport interface ProductWhereSearch extends BaseSearch {\n  catId?: string | string[];\n  skus?: string[];\n  slug?: string;\n  id?: string;\n  filters?: Filter[];\n}\n\nexport interface FilterOption {\n  label: string;\n  value: string | number | boolean | [number, number] | [string, string];\n  selected: boolean;\n}\n\nexport interface CategoryWhereSearch extends BaseSearch {\n  catId?: string;\n  slug?: string;\n}\n\nexport interface OrderWhereSearch extends BaseSearch {\n  id?: string;\n}\n\nexport interface FlowOptions {\n  currentToken?: Token;\n  customerCredentials?: CustomerCredentials;\n  requireUserSession?: boolean;\n}\n\nexport interface CartData extends Omit<CartDraft, 'currency'> {\n  currency?: string;\n}\n\nexport type QueryResponse<K extends string, V> = ApolloQueryResult<Record<K, V>>;\nexport type MutationResponse<K extends string, V> = FetchResult<Record<K, V>>;\nexport type CartQueryResponse = QueryResponse<'cart', Cart>;\nexport type OrderQueryResponse = QueryResponse<'order', Order>;\nexport type CartMutationResponse = MutationResponse<'cart', Cart>;\nexport type CartResponse = CartQueryResponse | CartMutationResponse;\nexport type OrderMutationResponse = MutationResponse<'order', Order>;\nexport type OrderResponse = OrderQueryResponse | OrderMutationResponse;\nexport type ShippingMethodsResponse = QueryResponse<'shippingMethods', ShippingMethod>;\nexport type SignInResponse = QueryResponse<'user', CustomerSignInResult>;\nexport type ChangeMyPasswordResponse = QueryResponse<'user', Customer>;\n\ninterface ApiMethods {\n  addToCart ({ id, version }: Cart, product: ProductVariant, quantity: number): Promise<CartResponse>;\n  applyCartCoupon (cart: Cart, discountCode: string): Promise<CartResponse>;\n  createCart (cartDraft?: CartData): Promise<{ data: CartQueryInterface }>;\n  createMyOrderFromCart (draft: OrderMyCartCommand): Promise<OrderMutationResponse>;\n  customerChangeMyPassword (version: any, currentPassword: string, newPassword: string): Promise<ChangeMyPasswordResponse>;\n  customerSignMeIn (draft: CustomerSignMeInDraft): Promise<SignInResponse>;\n  customerSignMeUp (draft: CustomerSignMeUpDraft): Promise<SignInResponse>;\n  customerSignOut (): Promise<void>;\n  customerUpdateMe (currentUser, updatedUserData): Promise<any>;\n  getCart (cartId: string): Promise<CartQueryResponse>;\n  getCategory (params): Promise<QueryResponse<'categories', CategoryQueryResult>>;\n  getMe (params?: GetMeParams): Promise<{ data: { me: Me } }>;\n  getOrders (params): Promise<{ data: { me: Me } }>;\n  getProduct (params): Promise<QueryResponse<'products', ProductQueryResult>>;\n  getShippingMethods (cartId?: string): Promise<ShippingMethodData>;\n  removeCartCoupon (cart: Cart, discountCode: ReferenceInput): Promise<CartResponse>;\n  removeFromCart (cart: Cart, product: LineItem): Promise<CartResponse>;\n  updateCart (params: UpdateCartParams): Promise<CartResponse>;\n  updateCartQuantity (cart: Cart, product: LineItem): Promise<CartResponse>;\n  updateShippingDetails (cart: Cart, shippingDetails: Address): Promise<CartResponse>;\n  isGuest: () => boolean;\n}\n\nexport type CommercetoolsMethods = ApiClientMethods<ApiMethods>\n","import {\n  CategoryWhereSearch,\n  ProductWhereSearch,\n  OrderWhereSearch,\n  Filter,\n  AttributeType\n} from './../../types/Api';\nimport { Config } from './../../types/setup';\n\nconst mapFilterToPredicate = (settings: Config, filter: Filter) => {\n  const { locale, currency } = settings;\n\n  let valuePredicate: string;\n  switch (filter.type) {\n    case AttributeType.STRING:\n      valuePredicate = `value = \"${filter.value}\"`;\n      break;\n    case AttributeType.DATE:\n    case AttributeType.DATETIME:\n    case AttributeType.TIME:\n      valuePredicate = Array.isArray(filter.value) ? `value >= \"${filter.value[0]}\" and value <= \"${filter.value[1]}\"` : `value = \"${filter.value}\"`;\n      break;\n    case AttributeType.NUMBER:\n      valuePredicate = Array.isArray(filter.value) ? `value >= ${filter.value[0]} and value <= ${filter.value[1]}` : `value = ${filter.value}`;\n      break;\n    case AttributeType.ENUM:\n    case AttributeType.LOCALIZED_ENUM:\n      valuePredicate = `value(key = \"${filter.value}\")`;\n      break;\n    case AttributeType.LOCALIZED_STRING:\n      valuePredicate = `value(${locale.toLowerCase()} = \"${filter.value}\")`;\n      break;\n    case AttributeType.MONEY:\n      valuePredicate = Array.isArray(filter.value)\n        ? `value(centAmount >= ${(filter.value[0] as number) * 100} and centAmount <= ${(filter.value[1] as number) * 100} and currencyCode = \"${currency}\")`\n        : `value(centAmount = ${filter.value} and currencyCode = \"${currency}\")`;\n      break;\n    case AttributeType.BOOLEAN:\n      valuePredicate = `value = ${filter.value}`;\n      break;\n  }\n\n  return `masterData(current(masterVariant(attributes(name = \"${filter.name}\" and ${valuePredicate}))))`;\n};\n\nconst buildProductWhere = (settings: Config, search: ProductWhereSearch) => {\n  const { acceptLanguage } = settings;\n\n  const predicates: string[] = [];\n\n  if (search?.catId) {\n    const catIds = (Array.isArray(search.catId) ? search.catId : [search.catId]).join('\",\"');\n    predicates.push(`masterData(current(categories(id in (\"${catIds}\"))))`);\n  }\n\n  if (search?.slug) {\n    const predicate = acceptLanguage.map(locale => `${locale}=\"${search.slug}\"`).join(' or ');\n    predicates.push(`masterData(current(slug(${predicate})))`);\n  }\n\n  if (search?.id) {\n    predicates.push(`id=\"${search.id}\"`);\n  }\n\n  if (search?.filters) {\n    const filterPredicates = search.filters.map((f) => mapFilterToPredicate(settings, f)).join(' or ');\n    if (filterPredicates) {\n      predicates.push(filterPredicates);\n    }\n  }\n\n  return predicates.join(' and ');\n};\n\nconst buildCategoryWhere = (settings: Config, search: CategoryWhereSearch) => {\n  const { acceptLanguage } = settings;\n\n  if (search?.catId) {\n    return `id=\"${search.catId}\"`;\n  }\n\n  if (search?.slug) {\n    const predicate = acceptLanguage.map(locale => `${locale}=\"${search.slug}\"`).join(' or ');\n    return `slug(${predicate})`;\n  }\n\n  return undefined;\n};\n\nconst buildOrderWhere = (search: OrderWhereSearch): string => {\n  if (search?.id) {\n    return `id=\"${search.id}\"`;\n  }\n\n  return null;\n};\n\nexport {\n  buildProductWhere,\n  buildCategoryWhere,\n  buildOrderWhere\n};\n","import gql from 'graphql-tag';\nimport defaultQuery from './defaultQuery';\nimport { CategoryQueryResult } from '../../types/GraphQL';\nimport { buildCategoryWhere } from '../../helpers/search';\nimport ApolloClient from 'apollo-client';\nimport { CustomQuery } from '@vue-storefront/core';\n\nexport interface CategoryData {\n  categories: CategoryQueryResult;\n}\n\nconst getCategory = async (context, params, customQuery?: CustomQuery) => {\n  const { acceptLanguage } = context.config;\n  const defaultVariables = params ? {\n    where: buildCategoryWhere(context.config, params),\n    limit: params.limit,\n    offset: params.offset,\n    acceptLanguage\n  } : { acceptLanguage };\n\n  const { categories } = context.extendQuery(customQuery,\n    { categories: { query: defaultQuery, variables: defaultVariables } }\n  );\n\n  const request = await (context.client as ApolloClient<any>).query<CategoryData>({\n    query: gql`${categories.query}`,\n    variables: categories.variables,\n    fetchPolicy: 'no-cache'\n  });\n\n  return request;\n};\n\nexport default getCategory;\n","import gql from 'graphql-tag';\nimport { CartFragment, CustomerFragment } from './../../fragments';\n\nconst basicProfile = gql`\n  ${CartFragment}\n\n  query getBasicProfile($locale: Locale!, $acceptLanguage: [Locale!]) {\n    me {\n      activeCart {\n        ...DefaultCart\n      }\n    }\n  }\n`;\n\nconst fullProfile = gql`\n  ${CartFragment}\n  ${CustomerFragment}\n\n  query getFullProfile($locale: Locale!, $acceptLanguage: [Locale!]) {\n    me {\n      activeCart {\n        ...DefaultCart\n      }\n      customer {\n        ...DefaultCustomer\n      }\n    }\n  }\n`;\n\nexport { basicProfile, fullProfile };\n","import { basicProfile, fullProfile } from './defaultQuery';\nimport gql from 'graphql-tag';\nimport ApolloClient from 'apollo-client';\nimport { CustomQuery } from '@vue-storefront/core';\n\nexport interface GetMeParams {\n  customer?: boolean;\n}\n\nexport interface OrdersData {\n  // TODO: When https://github.com/DivanteLtd/vue-storefront/issues/4900 is finished, please change \"me: any\" to \"me: Pick<MeQueryInterface, \"activeCart\" | \"customer\">\"\n  me: any;\n}\n\nconst getMe = async (context, params: GetMeParams = {}, customQuery?: CustomQuery) => {\n  const { locale, acceptLanguage } = context.config;\n\n  const { customer }: GetMeParams = params;\n  const defaultVariables = {\n    locale,\n    acceptLanguage\n  };\n\n  const { getBasicProfile, getFullProfile } = context.extendQuery(customQuery, {\n    getBasicProfile: { query: basicProfile, variables: defaultVariables },\n    getFullProfile: { query: fullProfile, variables: defaultVariables }\n  });\n\n  const profile = customer ? getFullProfile : getBasicProfile;\n\n  const request = await (context.client as ApolloClient<any>).query<OrdersData>({\n    query: gql`${profile.query}`,\n    variables: profile.variables,\n    fetchPolicy: 'no-cache'\n  });\n\n  return request;\n};\n\nexport default getMe;\n","import gql from 'graphql-tag';\nimport { OrderFragment } from '../../fragments';\n\nexport default gql`\n  ${OrderFragment}\n\n  query getMyOrders($where: String, $sort: [String!], $limit: Int, $offset: Int, $locale: Locale!, $acceptLanguage: [Locale!]) {\n    me {\n      orders(where: $where, sort: $sort, limit: $limit, offset: $offset) {\n        results {\n          ...DefaultOrder\n        }\n      }\n    }\n  }\n`;\n","import { MeQueryInterface } from '../../index';\nimport defaultQuery from './defaultQuery';\nimport { buildOrderWhere } from '../../helpers/search';\nimport gql from 'graphql-tag';\nimport ApolloClient from 'apollo-client';\nimport { CustomQuery } from '@vue-storefront/core';\n\ninterface OrdersData {\n  me: Pick<MeQueryInterface, 'orders'>;\n}\n\nconst getOrders = async (context, params, customQuery?: CustomQuery) => {\n  const { locale, acceptLanguage } = context.config;\n  const defaultVariables = {\n    where: buildOrderWhere(params),\n    sort: params.sort,\n    limit: params.limit,\n    offset: params.offset,\n    acceptLanguage,\n    locale\n  };\n\n  const { getMyOrders } = context.extendQuery(\n    customQuery, { getMyOrders: { query: defaultQuery, variables: defaultVariables } }\n  );\n\n  const request = await (context.client as ApolloClient<any>).query<OrdersData>({\n    query: gql`${getMyOrders.query}`,\n    variables: getMyOrders.variables,\n    fetchPolicy: 'no-cache'\n  });\n  return request;\n};\n\nexport default getOrders;\n","import gql from 'graphql-tag';\nimport { ProductPriceFragment } from './../../fragments';\n\nexport default gql`\n  ${ProductPriceFragment}\n\n  fragment Images on ProductVariant {\n    images {\n      url\n      label\n    }\n  }\n\n  fragment Price on ProductVariant {\n    price(currency: $currency, country: $country) {\n      ...DefaultProductPrice\n    }\n  }\n\n  fragment Attributes on ProductVariant {\n    attributesRaw {\n      name\n      value\n      attributeDefinition {\n        type {\n          name\n        }\n        label(locale: $locale)\n      }\n    }\n  }\n\n  fragment DefaultVariant on ProductVariant {\n    id\n    sku\n    ...Images\n    ...Price\n    ...Attributes\n  }\n\n  query products(\n    $where: String\n    $sort: [String!]\n    $limit: Int\n    $offset: Int\n    $skus: [String!]\n    $locale: Locale!\n    $acceptLanguage: [Locale!]\n    $currency: Currency!\n    $country: Country!\n  ) {\n    products(\n      where: $where\n      sort: $sort\n      limit: $limit\n      offset: $offset\n      skus: $skus\n    ) {\n      offset\n      count\n      total\n      results {\n        id\n        reviewRatingStatistics {\t\n          averageRating,\n          ratingsDistribution,\n          count\n        }\n        masterData {\n          current {\n            slug(acceptLanguage: $acceptLanguage)\n            name(acceptLanguage: $acceptLanguage)\n            metaTitle(acceptLanguage: $acceptLanguage)\n            metaKeywords(acceptLanguage: $acceptLanguage)\n            metaDescription(acceptLanguage: $acceptLanguage)\n            description(acceptLanguage: $acceptLanguage)\n            categoriesRef {\n              id\n            }\n            allVariants {\n              ...DefaultVariant\n            }\n            masterVariant {\n              ...DefaultVariant\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import gql from 'graphql-tag';\nimport { ProductQueryResult } from '../../types/GraphQL';\nimport defaultQuery from './defaultQuery';\nimport { buildProductWhere } from '../../helpers/search';\nimport ApolloClient from 'apollo-client';\nimport { CustomQuery } from '@vue-storefront/core';\n\nexport interface ProductData {\n  products: ProductQueryResult;\n}\n\nconst getProduct = async (context, params, customQuery?: CustomQuery) => {\n  const { locale, acceptLanguage, currency, country } = context.config;\n  const defaultVariables = {\n    where: buildProductWhere(context.config, params),\n    skus: params.skus,\n    limit: params.limit,\n    offset: params.offset,\n    locale,\n    acceptLanguage,\n    currency,\n    country\n  };\n\n  const { products } = context.extendQuery(\n    customQuery, { products: { query: defaultQuery, variables: defaultVariables } }\n  );\n\n  try {\n    const request = await (context.client as ApolloClient<any>).query<ProductData>({\n      query: gql`${products.query}`,\n      variables: products.variables,\n      // temporary, seems like bug in apollo:\n      // @link: https://github.com/apollographql/apollo-client/issues/3234\n      fetchPolicy: 'no-cache'\n    });\n    return request;\n  } catch (error) {\n    throw error.graphQLErrors?.[0] || error.networkError?.result || error;\n  }\n\n};\n\nexport default getProduct;\n","import gql from 'graphql-tag';\nimport { ShippingMethodFragment } from '../../fragments';\n\nexport default gql`\n  ${ShippingMethodFragment}\n\n  query shippingMethods($acceptLanguage: [Locale!], $cartId: String!) {\n    shippingMethods: shippingMethodsByCart(id: $cartId) {\n      ...DefaultShippingMethod\n    }\n  }\n`;\n","import defaultQuery from './defaultQuery';\nimport { ShippingMethod } from '../../types/GraphQL';\nimport gql from 'graphql-tag';\nimport ApolloClient from 'apollo-client';\nimport { CustomQuery } from '@vue-storefront/core';\n\nexport interface ShippingMethodData {\n  shippingMethods: ShippingMethod[];\n}\n\nconst getShippingMethods = async (context, cartId?: string, customQuery?: CustomQuery) => {\n  const { acceptLanguage } = context.config;\n  const defaultVariables = {\n    acceptLanguage, cartId\n  };\n\n  const { shippingMethods } = context.extendQuery(\n    customQuery, { shippingMethods: { query: defaultQuery, variables: defaultVariables } }\n  );\n\n  return await (context.client as ApolloClient<any>).query<ShippingMethodData>({\n    query: gql`${shippingMethods.query}`,\n    variables: shippingMethods.variables,\n    fetchPolicy: 'no-cache'\n  });\n};\n\nexport default getShippingMethods;\n","export const isAnonymousSession = (token) => token?.scope?.includes('anonymous_id');\nexport const isUserSession = (token) => token?.scope?.includes('customer_id');\nexport const getAccessToken = (token) => token ? token.access_token : null;\n","import { isAnonymousSession, isUserSession } from '../../helpers/utils';\n\nconst isGuest = (context) => {\n  const { client, config } = context;\n\n  if (config.handleIsGuest) {\n    return config.handleIsGuest(context);\n  }\n\n  if (client.tokenProvider || context.isProxy) {\n    const token = config.auth.onTokenRead();\n    return !isAnonymousSession(token) && !isUserSession(token);\n  }\n\n  return false;\n};\n\nexport default isGuest;\n","import { CustomQuery } from '@vue-storefront/core';\nimport updateCart from '../updateCart';\nimport { CartResponse } from '../../types/Api';\nimport { Cart, ReferenceInput } from '../../types/GraphQL';\nimport { removeDiscountCodeAction } from '../../helpers/cart/actions';\n\nconst removeCartCoupon = async (\n  context,\n  cart: Cart,\n  discountCode: ReferenceInput,\n  customQuery?: CustomQuery\n): Promise<CartResponse> => {\n  return await updateCart(context, {\n    id: cart.id,\n    version: cart.version,\n    actions: [removeDiscountCodeAction(discountCode)]\n  }, customQuery);\n};\n\nexport default removeCartCoupon;\n","import { CustomQuery } from '@vue-storefront/core';\nimport updateCart from './../updateCart';\nimport { CartResponse } from './../../types/Api';\nimport { Cart, LineItem } from './../../types/GraphQL';\nimport { createRemoveLineItemAction } from './../../helpers/cart/actions';\n\nconst removeFromCart = async (context, cart: Cart, product: LineItem, customQuery?: CustomQuery): Promise<CartResponse> => {\n  return await updateCart(\n    context,\n    {\n      id: cart.id,\n      version: cart.version,\n      actions: [createRemoveLineItemAction(product)]\n    },\n    customQuery\n  );\n};\n\nexport default removeFromCart;\n","import { CustomQuery } from '@vue-storefront/core';\nimport updateCart from '../updateCart';\nimport { CartResponse } from '../../types/Api';\nimport { Cart, LineItem } from '../../types/GraphQL';\nimport { createChangeLineItemQuantityAction } from '../../helpers/cart/actions';\n\nconst updateCartQuantity = async (\n  context,\n  cart: Cart,\n  product: LineItem,\n  customQuery?: CustomQuery\n): Promise<CartResponse> => {\n  return await updateCart(\n    context,\n    {\n      id: cart.id,\n      version: cart.version,\n      actions: [createChangeLineItemQuantityAction(product)]\n    },\n    customQuery\n  );\n};\n\nexport default updateCartQuantity;\n","import { CustomQuery } from '@vue-storefront/core';\nimport updateCart from '../updateCart';\nimport { CartResponse } from '../../types/Api';\nimport { Cart, Address } from '../../types/GraphQL';\nimport { setShippingAddressAction } from '../../helpers/cart/actions';\n\nconst updateShippingDetails = async (context, cart: Cart, shippingDetails: Address, customQuery?: CustomQuery): Promise<CartResponse> => {\n  const cartResponse = await updateCart(context, {\n    id: cart.id,\n    version: cart.version,\n    actions: [setShippingAddressAction(shippingDetails)]\n  }, customQuery);\n\n  return cartResponse;\n};\n\nexport default updateShippingDetails;\n","/* istanbul ignore file */\nconst restrictedOperations = {\n  anonymous: [\n    'createCart',\n    'createMyShoppingList'\n  ],\n  user: [\n    'customerSignMeIn',\n    'customerSignMeUp'\n  ]\n};\n\nexport const isAnonymousOperation = (operationName) => restrictedOperations.anonymous.includes(operationName);\nexport const isUserOperation = (operationName) => restrictedOperations.user.includes(operationName);\n","import { Logger } from '@vue-storefront/core';\nimport { isAnonymousSession, isUserSession, getAccessToken } from '../utils';\nimport { isAnonymousOperation, isUserOperation } from './restrictedOperations';\n\nexport const handleBeforeAuth = async ({ sdkAuth, tokenProvider, apolloReq, currentToken }) => {\n  const isAnonymous = isAnonymousSession(currentToken);\n  const isUser = isUserSession(currentToken);\n  const isGuest = !isAnonymous && !isUser;\n\n  if (isGuest && isAnonymousOperation(apolloReq.operationName)) {\n    Logger.debug('Apollo authLinkBefore, anonymousFlow', apolloReq.operationName);\n\n    const token = await sdkAuth.anonymousFlow();\n    tokenProvider.setTokenInfo(token);\n    Logger.debug('Apollo authLinkBefore, anonymousFlow, generated token: ', getAccessToken(token));\n\n    return token;\n  }\n\n  return tokenProvider.getTokenInfo();\n};\n\nexport const handleAfterAuth = async ({ sdkAuth, tokenProvider, apolloReq, currentToken, response }) => {\n  if (!isUserSession(currentToken) && isUserOperation(apolloReq.operationName)) {\n    const { email, password } = apolloReq.variables.draft;\n    Logger.debug('Apollo authLinkAfter, customerPasswordFlow', apolloReq.operationName);\n\n    if (!response.errors?.length) {\n      const token = await sdkAuth.customerPasswordFlow({ username: email, password });\n      tokenProvider.setTokenInfo(token);\n      Logger.debug('Apollo authLinkAfter, customerPasswordFlow, generated token: ', getAccessToken(token));\n\n      return token;\n    }\n\n    return currentToken;\n  }\n\n  return currentToken;\n};\n\nexport const handleRetry = ({ tokenProvider }) => (count, operation, error) => {\n  if (count > 3) {\n    return false;\n  }\n\n  if (error?.result?.message === 'invalid_token') {\n    Logger.debug(`Apollo retry-link, the operation (${operation.operationName}) sent with wrong token, creating a new one... (attempt: ${count})`);\n    tokenProvider.invalidateTokenInfo();\n    return true;\n  }\n\n  return false;\n};\n","import { createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { ApolloLink } from 'apollo-link';\nimport { RetryLink } from 'apollo-link-retry';\nimport fetch from 'isomorphic-fetch';\nimport SdkAuth, { TokenProvider } from '@commercetools/sdk-auth';\nimport { asyncMap } from '@apollo/client/utilities';\nimport { Logger } from '@vue-storefront/core';\nimport { onError } from 'apollo-link-error';\nimport { Config, ApiConfig } from '../../types/setup';\nimport { handleBeforeAuth, handleAfterAuth, handleRetry } from './linkHandlers';\nimport { isAnonymousSession, isUserSession, getAccessToken } from '../utils';\n\nconst createAuthClient = (config: ApiConfig): SdkAuth => {\n  return new SdkAuth({\n    host: config.authHost,\n    projectKey: config.projectKey,\n    disableRefreshToken: false,\n    credentials: {\n      clientId: config.clientId,\n      clientSecret: config.clientSecret\n    },\n    scopes: config.scopes\n  });\n};\n\nconst createTokenProvider = (settings: Config, { sdkAuth, currentToken }) => {\n  return new TokenProvider({\n    sdkAuth,\n    fetchTokenInfo: (sdkAuthInstance) => sdkAuthInstance.clientCredentialsFlow(),\n    onTokenInfoChanged: (tokenInfo) => {\n      Logger.debug('TokenProvider.onTokenInfoChanged', getAccessToken(tokenInfo));\n      settings.auth.onTokenChange(tokenInfo);\n    },\n    onTokenInfoRefreshed: (tokenInfo) => {\n      Logger.debug('TokenProvider.onTokenInfoRefreshed', getAccessToken(tokenInfo));\n    }\n  }, currentToken);\n};\n\nconst createErrorHandler = () => {\n  return onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n      graphQLErrors.map(({ message, locations, path }) => {\n        if (!message.includes('Resource Owner Password Credentials Grant')) {\n          if (!locations) {\n            Logger.error(`[GraphQL error]: Message: ${message}, Path: ${path}`);\n            return;\n          }\n\n          const parsedLocations = locations.map(({ column, line }) => `[column: ${column}, line: ${line}]`);\n\n          Logger.error(`[GraphQL error]: Message: ${message}, Location: ${parsedLocations.join(', ')}, Path: ${path}`);\n        }\n      });\n    }\n\n    if (networkError) {\n      Logger.error(`[Network error]: ${networkError}`);\n    }\n  });\n};\n\nconst createCommerceToolsConnection = (settings: Config): any => {\n  let currentToken: any = settings.auth.onTokenRead();\n  Logger.debug('createCommerceToolsConnection', getAccessToken(currentToken));\n\n  const sdkAuth = createAuthClient(settings.api);\n  const tokenProvider = createTokenProvider(settings, { sdkAuth, currentToken });\n  const httpLink = createHttpLink({ uri: settings.api.uri, fetch });\n  const onErrorLink = createErrorHandler();\n\n  const authLinkBefore = setContext(async (apolloReq, { headers }) => {\n    Logger.debug('Apollo authLinkBefore', apolloReq.operationName);\n    currentToken = await handleBeforeAuth({ sdkAuth, tokenProvider, apolloReq, currentToken });\n    Logger.debug('Apollo authLinkBefore, finished, generated token: ', getAccessToken(currentToken));\n\n    return {\n      headers: {\n        ...headers,\n        authorization: `Bearer ${currentToken.access_token}`\n      }\n    };\n  });\n\n  const authLinkAfter = new ApolloLink((apolloReq, forward): any => {\n    return asyncMap(forward(apolloReq) as any, async (response: any) => {\n      Logger.debug('Apollo authLinkAfter', apolloReq.operationName);\n      currentToken = await handleAfterAuth({ sdkAuth, tokenProvider, apolloReq, currentToken, response });\n\n      const errors = (response.errors || []).filter(({ message }) =>\n        !message.includes('Resource Owner Password Credentials Grant') &&\n        !message.includes('This endpoint requires an access token issued either')\n      );\n\n      return { ...response, errors };\n    });\n  });\n\n  const errorRetry = new RetryLink({\n    attempts: handleRetry({ tokenProvider }),\n    delay: () => 0\n  });\n\n  const apolloLink = ApolloLink.from([onErrorLink, errorRetry, authLinkBefore, authLinkAfter.concat(httpLink)]);\n\n  return {\n    apolloLink,\n    sdkAuth,\n    tokenProvider\n  };\n};\n\nexport {\n  isAnonymousSession,\n  isUserSession,\n  createCommerceToolsConnection\n};\n","export const defaultSettings = {\n  locale: 'en',\n  acceptLanguage: ['en'],\n  auth: {\n    onTokenChange: () => {},\n    onTokenRead: () => '',\n    onTokenRemove: () => {}\n  },\n  cookies: {\n    currencyCookieName: 'vsf-currency',\n    countryCookieName: 'vsf-country',\n    localeCookieName: 'vsf-locale'\n  }\n};\n","/* istanbul ignore file */\nimport ApolloClient from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport * as api from './api';\nimport { Config, ClientInstance } from './types/setup';\nimport { createCommerceToolsConnection } from './helpers/commercetoolsLink';\nimport { defaultSettings } from './helpers/apiClient/defaultSettings';\nimport { apiClientFactory, ApiClientExtension } from '@vue-storefront/core';\n\nconst onCreate = (settings: Config): { config: Config; client: ClientInstance } => {\n  const languageMap = settings.languageMap || {};\n  const acceptLanguage = settings.acceptLanguage || defaultSettings.acceptLanguage;\n  const locale = settings.locale || defaultSettings.locale;\n\n  const config = {\n    ...defaultSettings,\n    ...settings,\n    languageMap,\n    acceptLanguage: languageMap[locale] || acceptLanguage,\n    auth: settings.auth || defaultSettings.auth\n  } as any as Config;\n\n  if (settings.client) {\n    return { client: settings.client, config };\n  }\n\n  if (settings.customOptions && settings.customOptions.link) {\n    return {\n      client: new ApolloClient({\n        cache: new InMemoryCache(),\n        ...settings.customOptions\n      }),\n      config\n    };\n  }\n\n  const { apolloLink, sdkAuth, tokenProvider } = createCommerceToolsConnection(config);\n\n  const client = new ApolloClient({\n    link: apolloLink,\n    cache: new InMemoryCache(),\n    ...settings.customOptions\n  });\n  (client as ClientInstance).sdkAuth = sdkAuth;\n  (client as ClientInstance).tokenProvider = tokenProvider;\n\n  return {\n    config,\n    client\n  };\n};\n\nconst parseToken = (rawToken) => {\n  try {\n    return JSON.parse(rawToken);\n  } catch (e) {\n    return null;\n  }\n};\n\nconst tokenExtension: ApiClientExtension = {\n  name: 'tokenExtension',\n  hooks: (req, res) => {\n    const rawCurrentToken = req.cookies['vsf-commercetools-token'];\n    const currentToken = parseToken(rawCurrentToken);\n\n    return {\n      beforeCreate: ({ configuration }) => ({\n        ...configuration,\n        auth: {\n          onTokenChange: (newToken) => {\n            if (!currentToken || currentToken.access_token !== newToken.access_token) {\n              res.cookie('vsf-commercetools-token', JSON.stringify(newToken));\n            }\n          },\n          onTokenRead: () => {\n            res.cookie('vsf-commercetools-token', rawCurrentToken);\n            return currentToken;\n          },\n          onTokenRemove: () => {\n            delete req.cookies['vsf-commercetools-token'];\n          }\n        }\n      })\n    };\n  }\n};\n\nconst { createApiClient } = apiClientFactory({\n  onCreate,\n  api,\n  extensions: [tokenExtension]\n});\n\nexport {\n  createApiClient\n};\n"],"names":["Logger","defaultMutation","defaultQuery","SdkAuth","TokenProvider","onError","createHttpLink","setContext","ApolloLink","asyncMap","RetryLink","apolloLink","InMemoryCache","apiClientFactory"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAM,oBAAoB,GAAG,2ZAuBnC,CAAC;AAEK,IAAM,eAAe,GAAG,oPAkB9B,CAAC;AAEF;AACO,IAAM,gBAAgB,GAAG,SAC5B,eAAe,2TAmBlB,CAAC;AAEK,IAAM,gBAAgB,GAAG,SAC5B,oBAAoB,6pCA+DvB,CAAC;AAEK,IAAM,sBAAsB,GAAG,6ZAwBrC,CAAC;AAEK,IAAM,YAAY,GAAG,SACxB,eAAe,YACf,gBAAgB,YAChB,gBAAgB,YAChB,sBAAsB,6mCAsEzB,CAAC;AAEK,IAAM,aAAa,GAAG,SACzB,eAAe,YACf,gBAAgB,qaA4BnB;;ACvQD,mBAAe,GAAG,oUAAA,MACd,EAAY,yPAOf,KAPG,YAAY,EAOd;;;ACNF,IAAM,sBAAsB,GAAG,wBAAwB,CAAC;AASxD,IAAM,UAAU,GAAG,UAAO,OAAO,EAAE,MAAwB,EAAE,WAAyB;;;;;;gBAC9E,KAA6B,OAAO,CAAC,MAAM,EAAzC,MAAM,YAAA,EAAE,cAAc,oBAAA,CAAoB;gBAC5C,gBAAgB,GAAG,MAAM;iCAE3B,MAAM,QAAA;wBACN,cAAc,gBAAA,IACX,MAAM,IAET,EAAE,cAAc,gBAAA,EAAE,CAAC;gBAEH,aAAa,GAAK,OAAO,CAAC,WAAW,CACvD,WAAW,EAAE,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,SAAS,EAAE,gBAAgB,EAAE,EAAE,CAClF,WAFgC,CAE/B;;;;gBAGgB,qBAAM,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;wBAC1C,QAAQ,EAAE,GAAG,6EAAA,EAAG,EAAmB,EAAE,KAArB,aAAa,CAAC,KAAK,CAAE;wBACrC,SAAS,EAAE,aAAa,CAAC,SAAS;wBAClC,WAAW,EAAE,UAAU;qBACxB,CAAC,EAAA;;gBAJI,OAAO,GAAG,SAId;gBAEF,sBAAO,OAAO,EAAC;;;gBAET,QAAQ,GAAG,MAAA,MAAM,CAAC,eAAe,mCAAI,IAAI,CAAC;gBAC1C,iBAAiB,GAAG,MAAA,MAAA,MAAA,OAAK,CAAC,aAAa,0CAAG,CAAC,CAAC,0CAAE,IAAI,0CAAE,QAAQ,CAAC,sBAAsB,CAAC,CAAC;gBAE3F,IAAI,CAAC,iBAAiB,IAAI,CAAC,QAAQ,EAAE;oBACnC,MAAM,OAAK,CAAC;iBACb;gBAEDA,WAAM,CAAC,KAAK,CAAC,wDAAwD,CAAC,CAAC;gBAEvE,sBAAO,UAAU,CAAC,OAAO,wBACpB,MAAM,KACT,OAAO,EAAE,OAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,cAAc,IAC9C,EAAC;;;;KAEN,CAAC;AAEF;;AClDA,IAAM,cAAc,GAAG,UAAA,OAAO,IAAI,OAAA,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAA,CAAC,GAAA,CAAC;AAEpI,AAAO,IAAM,uBAAuB,GAAG,UAAC,OAAuB,EAAE,QAAgB,IAAK,QAAC;IACrF,WAAW,EAAE;QACX,SAAS,EAAE,OAAO,CAAC,EAAE;QACrB,QAAQ,EAAE,QAAQ;QAClB,GAAG,EAAE,OAAO,CAAC,GAAG;KACjB;CACF,IAAC,CAAC;AAEH,AAAO,IAAM,0BAA0B,GAAG,UAAC,OAAiB,IAAK,QAAC;IAChE,cAAc,EAAE;QACd,UAAU,EAAE,OAAO,CAAC,EAAE;QACtB,QAAQ,EAAE,OAAO,CAAC,QAAQ;KAC3B;CACF,IAAC,CAAC;AAEH,AAAO,IAAM,kCAAkC,GAAG,UAAC,OAAiB,IAAK,QAAC;IACxE,sBAAsB,EAAE;QACtB,UAAU,EAAE,OAAO,CAAC,EAAE;QACtB,QAAQ,EAAE,OAAO,CAAC,QAAQ;KAC3B;CACF,IAAC,CAAC;AAEH,AAAO,IAAM,wBAAwB,GAAG,UAAC,eAAwB;;IAC/D,IAAI,cAAc,CAAC,eAAe,CAAC,EAAE;QACnCA,WAAM,CAAC,IAAI,CAAC,2HAA2H,CAAC,CAAC;KAC1I;IACD,OAAO;QACL,kBAAkB,EAAE;YAClB,OAAO,EAAE;gBACP,KAAK,EAAE,eAAe,CAAC,KAAK;gBAC5B,UAAU,EAAE,eAAe,CAAC,UAAU;gBACtC,SAAS,EAAE,eAAe,CAAC,SAAS;gBACpC,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,UAAU,EAAE,eAAe,CAAC,UAAU;gBACtC,YAAY,EAAE,eAAe,CAAC,YAAY;gBAC1C,oBAAoB,EAAE,eAAe,CAAC,oBAAoB;gBAC1D,UAAU,EAAE,eAAe,CAAC,UAAU;gBACtC,IAAI,EAAE,eAAe,CAAC,IAAI;gBAC1B,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,KAAK;gBAC5B,OAAO,EAAE,eAAe,CAAC,OAAO;gBAChC,OAAO,EAAE,eAAe,CAAC,OAAO;gBAChC,UAAU,EAAE,eAAe,CAAC,UAAU;gBACtC,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,SAAS,EAAE,eAAe,CAAC,SAAS;gBACpC,KAAK,EAAE,eAAe,CAAC,KAAK;gBAC5B,KAAK,EAAE,eAAe,CAAC,KAAK,KAAI,MAAA,eAAe,CAAC,WAAW,0CAAE,KAAK,CAAA;gBAClE,MAAM,EAAE,eAAe,CAAC,MAAM,KAAI,MAAA,eAAe,CAAC,WAAW,0CAAE,MAAM,CAAA;gBACrE,KAAK,EAAE,eAAe,CAAC,KAAK,KAAI,MAAA,eAAe,CAAC,WAAW,0CAAE,KAAK,CAAA;gBAClE,GAAG,EAAE,eAAe,CAAC,GAAG,KAAI,MAAA,eAAe,CAAC,WAAW,0CAAE,GAAG,CAAA;gBAC5D,qBAAqB,EAAE,eAAe,CAAC,qBAAqB;aAC7D;SACF;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,AAoDO,IAAM,qBAAqB,GAAG,UAAC,IAAY,IAAK,QAAC;IACtD,eAAe,EAAE,EAAE,IAAI,MAAA,EAAE;CAC1B,IAAC,CAAC;AAEH,AAAO,IAAM,wBAAwB,GAAG,UAAC,YAA4B,IAAK,QAAC;IACzE,kBAAkB,EAAE,EAAE,YAAY,cAAA,EAAE;CACrC,IAAC,CAAC;;ACjHH,IAAM,SAAS,GAAG,UAChB,QAAQ,EACR,EAAqB,EACrB,OAAuB,EACvB,QAAgB,EAChB,WAAyB;QAHvB,EAAE,QAAA,EAAE,OAAO,aAAA;;;;wBAKN,qBAAM,UAAU,CACrB,QAAQ,EACR;wBACE,EAAE,IAAA;wBACF,OAAO,SAAA;wBACP,OAAO,EAAE,CAAC,uBAAuB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;qBACtD,EACD,WAAW,CACZ,EAAA;wBARD,sBAAO,SAQN,EAAC;;;;CACH,CAAC;;AChBF,IAAM,eAAe,GAAG,UACtB,QAAQ,EACR,IAAU,EACV,YAAoB,EACpB,WAAyB;;;oBAElB,qBAAM,UAAU,CAAC,QAAQ,EAAE;oBAChC,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,OAAO,EAAE,CAAC,qBAAqB,CAAC,YAAY,CAAC,CAAC;iBAC/C,EAAE,WAAW,CAAC,EAAA;oBAJf,sBAAO,SAIQ,EAAC;;;KACjB,CAAC;;ACdF,sBAAe,GAAG,gTAAA,MACd,EAAY,iOAOf,KAPG,YAAY,EAOd;;;ACNF,IAAM,UAAU,GAAG,UAAO,OAAO,EAAE,SAAwB,EAAE,WAAyB;IAAnD,0BAAA,EAAA,cAAwB;;;;;;oBACnD,KAAuC,OAAO,CAAC,MAAM,EAAnD,MAAM,YAAA,EAAE,cAAc,oBAAA,EAAE,QAAQ,cAAA,CAAoB;oBAEtD,gBAAgB,GAAG;wBACvB,cAAc,gBAAA;wBACd,MAAM,QAAA;wBACN,KAAK,aACH,QAAQ,UAAA,IACL,SAAS,CACb;qBACF,CAAC;oBAEkB,aAAa,GAAK,OAAO,CAAC,WAAW,CACvD,WAAW,EAAE,EAAE,UAAU,EAAE,EAAE,KAAK,EAAE,eAAe,EAAE,SAAS,EAAE,gBAAgB,EAAE,EAAE,CACrF,WAFgC,CAE/B;oBAEc,qBAAM,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;4BAC1C,QAAQ,EAAE,GAAG,6EAAA,EAAG,EAAmB,EAAE,KAArB,aAAa,CAAC,KAAK,CAAE;4BACrC,SAAS,EAAE,aAAa,CAAC,SAAS;4BAClC,WAAW,EAAE,UAAU;yBACxB,CAAC,EAAA;;oBAJI,OAAO,GAAG,SAId;oBAEF,sBAAO,OAAO,EAAC;;;;CAChB,CAAC;AAEF;;AC3BA,wBAAe,GAAG,6UAAA,MACd,EAAa,8PAOhB,KAPG,aAAa,EAOf;;;ACLF,IAAM,qBAAqB,GAAG,UAAO,OAAO,EAAE,KAAyB,EAAE,WAAyB;;;;;gBAC1F,KAA6B,OAAO,CAAC,MAAM,EAAzC,MAAM,YAAA,EAAE,cAAc,oBAAA,CAAoB;gBAC5C,gBAAgB,GAAG,EAAE,MAAM,QAAA;oBAC/B,cAAc,gBAAA;oBACd,KAAK,OAAA;iBACN,CAAC;gBAEM,qBAAqB,GAAK,OAAO,CAAC,WAAW,CACnD,WAAW,EAAE,EAAE,qBAAqB,EAAE,EAAE,KAAK,EAAEC,iBAAe,EAAE,SAAS,EAAE,gBAAgB,EAAE,EAAE,CAChG,sBAF4B,CAE3B;gBAEK,qBAAM,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;wBACjC,QAAQ,EAAE,GAAG,6EAAA,EAAG,EAA2B,EAAE,KAA7B,qBAAqB,CAAC,KAAK,CAAE;wBAC7C,SAAS,EAAE,qBAAqB,CAAC,SAAS;wBAC1C,WAAW,EAAE,UAAU;qBACxB,CAAC,EAAA;oBAJF,sBAAO,SAIL,EAAC;;;KACJ,CAAC;AAEF;;ACrBA,+BAAe,GAAG,+YAAA,MACd,EAAgB,gUAOnB,KAPG,gBAAgB,EAOlB;;;ACRF,IAAM,wBAAwB,GAAG,UAAO,EAAU,EAAE,OAAY,EAAE,eAAuB,EAAE,WAAmB;QAApE,MAAM,YAAA;;;;wBACvC,qBAAM,MAAM,CAAC,MAAM,CAAC;wBACzB,QAAQ,EAAE,wBAAwB;wBAClC,SAAS,EAAE;4BACT,OAAO,SAAA;4BACP,eAAe,iBAAA;4BACf,WAAW,aAAA;yBACZ;wBACD,WAAW,EAAE,UAAU;qBACxB,CAAC,EAAA;wBARF,sBAAO,SAQuB,EAAC;;;;CAChC,CAAC;;ACVF,+BAAe,GAAG,4ZAAA,MACd,EAAgB,MAChB,EAAY,qUAYf,KAbG,gBAAgB,EAChB,YAAY,EAYd;;;ACbF,IAAM,gBAAgB,GAAG,UAAO,OAAO,EAAE,KAA4B;;;;;gBAC7D,KAA6B,OAAO,CAAC,MAAM,EAAzC,MAAM,YAAA,EAAE,cAAc,oBAAA,CAAoB;gBAC5B,qBAAM,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;wBAChD,QAAQ,EAAE,wBAAwB;wBAClC,SAAS,EAAE,EAAE,KAAK,OAAA,EAAE,MAAM,QAAA,EAAE,cAAc,gBAAA,EAAE;wBAC5C,WAAW,EAAE,UAAU;qBACxB,CAAC,EAAA;;gBAJI,aAAa,GAAG,SAIF;gBAEpB,sBAAO,aAAa,EAAC;;;KACtB,CAAC;;ACVF,+BAAe,GAAG,4ZAAA,MACd,EAAgB,MAChB,EAAY,qUAYf,KAbG,gBAAgB,EAChB,YAAY,EAYd;;;ACbF,IAAM,gBAAgB,GAAG,UAAO,OAAO,EAAE,KAA4B;;;;;gBAC7D,KAA6B,OAAO,CAAC,MAAM,EAAzC,MAAM,YAAA,EAAE,cAAc,oBAAA,CAAoB;gBACzB,qBAAM,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;wBACnD,QAAQ,EAAE,wBAAwB;wBAClC,SAAS,EAAE,EAAE,KAAK,OAAA,EAAE,MAAM,QAAA,EAAE,cAAc,gBAAA,EAAE;wBAC5C,WAAW,EAAE,UAAU;qBACxB,CAAC,EAAA;;gBAJI,gBAAgB,GAAG,SAIL;gBAEpB,sBAAO,gBAAgB,EAAC;;;KACzB,CAAC;;ACbF,IAAM,eAAe,GAAG,UAAO,EAAkB;QAAhB,MAAM,YAAA,EAAE,MAAM,YAAA;;;YAC7C,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE;gBAC7B,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;aAC7B;YAED,IAAI,MAAM,CAAC,aAAa,EAAE;gBACxB,MAAM,CAAC,aAAa,CAAC,mBAAmB,EAAE,CAAC;aAC5C;;;;CACF,CAAC;;ACRK,IAAM,yBAAyB,GAAG,UAAC,KAAa,IAAK,QAAC;IAC3D,WAAW,EAAE,EAAE,KAAK,OAAA,EAAE;CACvB,IAAC,CAAC;AAEH,AAAO,IAAM,0BAA0B,GAAG,UAAC,SAAiB,IAAK,QAAC;IAChE,YAAY,EAAE,EAAE,SAAS,WAAA,EAAE;CAC5B,IAAC,CAAC;AAEH,AAAO,IAAM,yBAAyB,GAAG,UAAC,QAAgB,IAAK,QAAC;IAC9D,WAAW,EAAE,EAAE,QAAQ,UAAA,EAAE;CAC1B,IAAC,CAAC;;ACPH,+BAAe,GAAG,wUAAA,MACd,EAAgB,yPAOnB,KAPG,gBAAgB,EAOlB;;;ACRF,IAAM,gBAAgB,GAAG,UAAO,EAAU,EAAE,WAAW,EAAE,eAAe;QAAtC,MAAM,YAAA;;;;;wBACf,qBAAM,MAAM,CAAC,MAAM,CAAC;wBACzC,QAAQ,EAAE,wBAAwB;wBAClC,SAAS,EAAE;4BACT,OAAO,EAAE,WAAW,CAAC,OAAO;4BAC5B,OAAO,EAAE;gCACP,yBAAyB,CAAC,eAAe,CAAC,KAAK,CAAC;gCAChD,0BAA0B,CAAC,eAAe,CAAC,SAAS,CAAC;gCACrD,yBAAyB,CAAC,eAAe,CAAC,QAAQ,CAAC;6BACpD;yBACF;wBACD,WAAW,EAAE,UAAU;qBACxB,CAAC,EAAA;;oBAXI,cAAc,GAAG,SAWrB;oBAEF,sBAAO,cAAc,CAAC,IAAI,EAAC;;;;CAC5B,CAAC;;ACfF,qBAAe,GAAG,mOAAA,MACd,EAAY,oJAOf,KAPG,YAAY,EAOd;;;ACRF,IAAM,OAAO,GAAG,UAAO,EAAkB,EAAE,MAAc;QAAhC,MAAM,YAAA,EAAE,MAAM,YAAA;;;;;;oBAC7B,MAAM,GAAqB,MAAM,OAA3B,EAAE,cAAc,GAAK,MAAM,eAAX,CAAY;oBACnC,qBAAM,MAAM,CAAC,KAAK,CAAC;4BACxB,KAAK,EAAEC,cAAY;4BACnB,SAAS,EAAE,EAAE,MAAM,QAAA;gCACjB,MAAM,QAAA;gCACN,cAAc,gBAAA,EAAE;4BAClB,WAAW,EAAE,UAAU;yBACxB,CAAC,EAAA;wBANF,sBAAO,SAML,EAAC;;;;CACJ,CAAC;;ACVF,qBAAe,GAAG,itCAAA,0oCAkDjB,KAAC;;;ACnBF,IAAY,aAWX;AAXD,WAAY,aAAa;IACvB,2CAA0B,CAAA;IAC1B,uCAAsB,CAAA;IACtB,+CAA8B,CAAA;IAC9B,uCAAsB,CAAA;IACtB,2CAA0B,CAAA;IAC1B,uCAAsB,CAAA;IACtB,0DAAyC,CAAA;IACzC,8DAA6C,CAAA;IAC7C,yCAAwB,CAAA;IACxB,6CAA4B,CAAA;AAC9B,CAAC,EAXW,aAAa,KAAb,aAAa,QAWxB;;ACnCD,IAAM,oBAAoB,GAAG,UAAC,QAAgB,EAAE,MAAc;IACpD,IAAA,MAAM,GAAe,QAAQ,OAAvB,EAAE,QAAQ,GAAK,QAAQ,SAAb,CAAc;IAEtC,IAAI,cAAsB,CAAC;IAC3B,QAAQ,MAAM,CAAC,IAAI;QACjB,KAAK,aAAa,CAAC,MAAM;YACvB,cAAc,GAAG,eAAY,MAAM,CAAC,KAAK,OAAG,CAAC;YAC7C,MAAM;QACR,KAAK,aAAa,CAAC,IAAI,CAAC;QACxB,KAAK,aAAa,CAAC,QAAQ,CAAC;QAC5B,KAAK,aAAa,CAAC,IAAI;YACrB,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,gBAAa,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,0BAAmB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,OAAG,GAAG,eAAY,MAAM,CAAC,KAAK,OAAG,CAAC;YAC/I,MAAM;QACR,KAAK,aAAa,CAAC,MAAM;YACvB,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,cAAY,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,sBAAiB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAG,GAAG,aAAW,MAAM,CAAC,KAAO,CAAC;YACzI,MAAM;QACR,KAAK,aAAa,CAAC,IAAI,CAAC;QACxB,KAAK,aAAa,CAAC,cAAc;YAC/B,cAAc,GAAG,mBAAgB,MAAM,CAAC,KAAK,QAAI,CAAC;YAClD,MAAM;QACR,KAAK,aAAa,CAAC,gBAAgB;YACjC,cAAc,GAAG,WAAS,MAAM,CAAC,WAAW,EAAE,aAAO,MAAM,CAAC,KAAK,QAAI,CAAC;YACtE,MAAM;QACR,KAAK,aAAa,CAAC,KAAK;YACtB,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;kBACxC,yBAAwB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAY,GAAG,GAAG,2BAAuB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAY,GAAG,GAAG,8BAAwB,QAAQ,QAAI;kBACnJ,wBAAsB,MAAM,CAAC,KAAK,8BAAwB,QAAQ,QAAI,CAAC;YAC3E,MAAM;QACR,KAAK,aAAa,CAAC,OAAO;YACxB,cAAc,GAAG,aAAW,MAAM,CAAC,KAAO,CAAC;YAC3C,MAAM;KACT;IAED,OAAO,0DAAuD,MAAM,CAAC,IAAI,eAAS,cAAc,SAAM,CAAC;AACzG,CAAC,CAAC;AAEF,IAAM,iBAAiB,GAAG,UAAC,QAAgB,EAAE,MAA0B;IAC7D,IAAA,cAAc,GAAK,QAAQ,eAAb,CAAc;IAEpC,IAAM,UAAU,GAAa,EAAE,CAAC;IAEhC,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,EAAE;QACjB,IAAM,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACzF,UAAU,CAAC,IAAI,CAAC,4CAAyC,MAAM,WAAO,CAAC,CAAC;KACzE;IAED,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,EAAE;QAChB,IAAM,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAG,MAAM,WAAK,MAAM,CAAC,IAAI,OAAG,GAAA,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1F,UAAU,CAAC,IAAI,CAAC,6BAA2B,SAAS,QAAK,CAAC,CAAC;KAC5D;IAED,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,EAAE,EAAE;QACd,UAAU,CAAC,IAAI,CAAC,UAAO,MAAM,CAAC,EAAE,OAAG,CAAC,CAAC;KACtC;IAED,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,OAAO,EAAE;QACnB,IAAM,gBAAgB,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,oBAAoB,CAAC,QAAQ,EAAE,CAAC,CAAC,GAAA,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnG,IAAI,gBAAgB,EAAE;YACpB,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;SACnC;KACF;IAED,OAAO,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;AAClC,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG,UAAC,QAAgB,EAAE,MAA2B;IAC/D,IAAA,cAAc,GAAK,QAAQ,eAAb,CAAc;IAEpC,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,KAAK,EAAE;QACjB,OAAO,UAAO,MAAM,CAAC,KAAK,OAAG,CAAC;KAC/B;IAED,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,EAAE;QAChB,IAAM,SAAS,GAAG,cAAc,CAAC,GAAG,CAAC,UAAA,MAAM,IAAI,OAAG,MAAM,WAAK,MAAM,CAAC,IAAI,OAAG,GAAA,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC1F,OAAO,UAAQ,SAAS,MAAG,CAAC;KAC7B;IAED,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,IAAM,eAAe,GAAG,UAAC,MAAwB;IAC/C,IAAI,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,EAAE,EAAE;QACd,OAAO,UAAO,MAAM,CAAC,EAAE,OAAG,CAAC;KAC5B;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;;ACpFF,IAAM,WAAW,GAAG,UAAO,OAAO,EAAE,MAAM,EAAE,WAAyB;;;;;gBAC3D,cAAc,GAAK,OAAO,CAAC,MAAM,eAAnB,CAAoB;gBACpC,gBAAgB,GAAG,MAAM,GAAG;oBAChC,KAAK,EAAE,kBAAkB,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;oBACjD,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,MAAM,EAAE,MAAM,CAAC,MAAM;oBACrB,cAAc,gBAAA;iBACf,GAAG,EAAE,cAAc,gBAAA,EAAE,CAAC;gBAEf,UAAU,GAAK,OAAO,CAAC,WAAW,CAAC,WAAW,EACpD,EAAE,UAAU,EAAE,EAAE,KAAK,EAAEA,cAAY,EAAE,SAAS,EAAE,gBAAgB,EAAE,EAAE,CACrE,WAFiB,CAEhB;gBAEc,qBAAO,OAAO,CAAC,MAA4B,CAAC,KAAK,CAAe;wBAC9E,KAAK,EAAE,GAAG,6EAAA,EAAG,EAAgB,EAAE,KAAlB,UAAU,CAAC,KAAK,CAAE;wBAC/B,SAAS,EAAE,UAAU,CAAC,SAAS;wBAC/B,WAAW,EAAE,UAAU;qBACxB,CAAC,EAAA;;gBAJI,OAAO,GAAG,SAId;gBAEF,sBAAO,OAAO,EAAC;;;KAChB,CAAC;AAEF;;AC9BA,IAAM,YAAY,GAAG,GAAG,yOAAA,MACpB,EAAY,0JASf,KATG,YAAY,CASf,CAAC;AAEF,IAAM,WAAW,GAAG,GAAG,mSAAA,MACnB,EAAY,MACZ,EAAgB,gNAYnB,KAbG,YAAY,EACZ,gBAAgB,CAYnB,CAAC;AAEF;;ACjBA,IAAM,KAAK,GAAG,UAAO,OAAO,EAAE,MAAwB,EAAE,WAAyB;IAAnD,uBAAA,EAAA,WAAwB;;;;;;oBAC9C,KAA6B,OAAO,CAAC,MAAM,EAAzC,MAAM,YAAA,EAAE,cAAc,oBAAA,CAAoB;oBAE1C,QAAQ,GAAkB,MAAM,SAAxB,CAAyB;oBACnC,gBAAgB,GAAG;wBACvB,MAAM,QAAA;wBACN,cAAc,gBAAA;qBACf,CAAC;oBAEI,KAAsC,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE;wBAC3E,eAAe,EAAE,EAAE,KAAK,EAAE,YAAY,EAAE,SAAS,EAAE,gBAAgB,EAAE;wBACrE,cAAc,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,gBAAgB,EAAE;qBACpE,CAAC,EAHM,eAAe,qBAAA,EAAE,cAAc,oBAAA,CAGpC;oBAEG,OAAO,GAAG,QAAQ,GAAG,cAAc,GAAG,eAAe,CAAC;oBAE5C,qBAAO,OAAO,CAAC,MAA4B,CAAC,KAAK,CAAa;4BAC5E,KAAK,EAAE,GAAG,6EAAA,EAAG,EAAa,EAAE,KAAf,OAAO,CAAC,KAAK,CAAE;4BAC5B,SAAS,EAAE,OAAO,CAAC,SAAS;4BAC5B,WAAW,EAAE,UAAU;yBACxB,CAAC,EAAA;;oBAJI,OAAO,GAAG,SAId;oBAEF,sBAAO,OAAO,EAAC;;;;CAChB,CAAC;AAEF;;ACpCA,qBAAe,GAAG,2XAAA,MACd,EAAa,4SAWhB,KAXG,aAAa,EAWf;;;ACJF,IAAM,SAAS,GAAG,UAAO,OAAO,EAAE,MAAM,EAAE,WAAyB;;;;;gBAC3D,KAA6B,OAAO,CAAC,MAAM,EAAzC,MAAM,YAAA,EAAE,cAAc,oBAAA,CAAoB;gBAC5C,gBAAgB,GAAG;oBACvB,KAAK,EAAE,eAAe,CAAC,MAAM,CAAC;oBAC9B,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,MAAM,EAAE,MAAM,CAAC,MAAM;oBACrB,cAAc,gBAAA;oBACd,MAAM,QAAA;iBACP,CAAC;gBAEM,WAAW,GAAK,OAAO,CAAC,WAAW,CACzC,WAAW,EAAE,EAAE,WAAW,EAAE,EAAE,KAAK,EAAEA,cAAY,EAAE,SAAS,EAAE,gBAAgB,EAAE,EAAE,CACnF,YAFkB,CAEjB;gBAEc,qBAAO,OAAO,CAAC,MAA4B,CAAC,KAAK,CAAa;wBAC5E,KAAK,EAAE,GAAG,6EAAA,EAAG,EAAiB,EAAE,KAAnB,WAAW,CAAC,KAAK,CAAE;wBAChC,SAAS,EAAE,WAAW,CAAC,SAAS;wBAChC,WAAW,EAAE,UAAU;qBACxB,CAAC,EAAA;;gBAJI,OAAO,GAAG,SAId;gBACF,sBAAO,OAAO,EAAC;;;KAChB,CAAC;AAEF;;AC/BA,qBAAe,GAAG,wyDAAA,MACd,EAAoB,ytDAsFvB,KAtFG,oBAAoB,EAsFtB;;;AC/EF,IAAM,UAAU,GAAG,UAAO,OAAO,EAAE,MAAM,EAAE,WAAyB;;;;;;gBAC5D,KAAgD,OAAO,CAAC,MAAM,EAA5D,MAAM,YAAA,EAAE,cAAc,oBAAA,EAAE,QAAQ,cAAA,EAAE,OAAO,aAAA,CAAoB;gBAC/D,gBAAgB,GAAG;oBACvB,KAAK,EAAE,iBAAiB,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;oBAChD,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,MAAM,EAAE,MAAM,CAAC,MAAM;oBACrB,MAAM,QAAA;oBACN,cAAc,gBAAA;oBACd,QAAQ,UAAA;oBACR,OAAO,SAAA;iBACR,CAAC;gBAEM,QAAQ,GAAK,OAAO,CAAC,WAAW,CACtC,WAAW,EAAE,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAEA,cAAY,EAAE,SAAS,EAAE,gBAAgB,EAAE,EAAE,CAChF,SAFe,CAEd;;;;gBAGgB,qBAAO,OAAO,CAAC,MAA4B,CAAC,KAAK,CAAc;wBAC7E,KAAK,EAAE,GAAG,6EAAA,EAAG,EAAc,EAAE,KAAhB,QAAQ,CAAC,KAAK,CAAE;wBAC7B,SAAS,EAAE,QAAQ,CAAC,SAAS;;;wBAG7B,WAAW,EAAE,UAAU;qBACxB,CAAC,EAAA;;gBANI,OAAO,GAAG,SAMd;gBACF,sBAAO,OAAO,EAAC;;;gBAEf,MAAM,CAAA,MAAA,OAAK,CAAC,aAAa,0CAAG,CAAC,CAAC,MAAI,MAAA,OAAK,CAAC,YAAY,0CAAE,MAAM,CAAA,IAAI,OAAK,CAAC;;;;KAGzE,CAAC;AAEF;;ACxCA,qBAAe,GAAG,qQAAA,MACd,EAAsB,sLAOzB,KAPG,sBAAsB,EAOxB;;;ACDF,IAAM,kBAAkB,GAAG,UAAO,OAAO,EAAE,MAAe,EAAE,WAAyB;;;;;gBAC3E,cAAc,GAAK,OAAO,CAAC,MAAM,eAAnB,CAAoB;gBACpC,gBAAgB,GAAG;oBACvB,cAAc,gBAAA,EAAE,MAAM,QAAA;iBACvB,CAAC;gBAEM,eAAe,GAAK,OAAO,CAAC,WAAW,CAC7C,WAAW,EAAE,EAAE,eAAe,EAAE,EAAE,KAAK,EAAEA,cAAY,EAAE,SAAS,EAAE,gBAAgB,EAAE,EAAE,CACvF,gBAFsB,CAErB;gBAEK,qBAAO,OAAO,CAAC,MAA4B,CAAC,KAAK,CAAqB;wBAC3E,KAAK,EAAE,GAAG,6EAAA,EAAG,EAAqB,EAAE,KAAvB,eAAe,CAAC,KAAK,CAAE;wBACpC,SAAS,EAAE,eAAe,CAAC,SAAS;wBACpC,WAAW,EAAE,UAAU;qBACxB,CAAC,EAAA;oBAJF,sBAAO,SAIL,EAAC;;;KACJ,CAAC;AAEF;;AC3BO,IAAM,kBAAkB,GAAG,UAAC,KAAK,YAAK,OAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK,0CAAE,QAAQ,CAAC,cAAc,CAAC,CAAA,EAAA,CAAC;AACpF,AAAO,IAAM,aAAa,GAAG,UAAC,KAAK,YAAK,OAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,KAAK,0CAAE,QAAQ,CAAC,aAAa,CAAC,CAAA,EAAA,CAAC;AAC9E,AAAO,IAAM,cAAc,GAAG,UAAC,KAAK,IAAK,OAAA,KAAK,GAAG,KAAK,CAAC,YAAY,GAAG,IAAI,GAAA,CAAC;;ACA3E,IAAM,OAAO,GAAG,UAAC,OAAO;IACd,IAAA,MAAM,GAAa,OAAO,OAApB,EAAE,MAAM,GAAK,OAAO,OAAZ,CAAa;IAEnC,IAAI,MAAM,CAAC,aAAa,EAAE;QACxB,OAAO,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;KACtC;IAED,IAAI,MAAM,CAAC,aAAa,IAAI,OAAO,CAAC,OAAO,EAAE;QAC3C,IAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACxC,OAAO,CAAC,kBAAkB,CAAC,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;KAC5D;IAED,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;;ACTF,IAAM,gBAAgB,GAAG,UACvB,OAAO,EACP,IAAU,EACV,YAA4B,EAC5B,WAAyB;;;oBAElB,qBAAM,UAAU,CAAC,OAAO,EAAE;oBAC/B,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,OAAO,EAAE,CAAC,wBAAwB,CAAC,YAAY,CAAC,CAAC;iBAClD,EAAE,WAAW,CAAC,EAAA;oBAJf,sBAAO,SAIQ,EAAC;;;KACjB,CAAC;;ACXF,IAAM,cAAc,GAAG,UAAO,OAAO,EAAE,IAAU,EAAE,OAAiB,EAAE,WAAyB;;;oBACtF,qBAAM,UAAU,CACrB,OAAO,EACP;oBACE,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,OAAO,EAAE,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;iBAC/C,EACD,WAAW,CACZ,EAAA;oBARD,sBAAO,SAQN,EAAC;;;KACH,CAAC;;ACVF,IAAM,kBAAkB,GAAG,UACzB,OAAO,EACP,IAAU,EACV,OAAiB,EACjB,WAAyB;;;oBAElB,qBAAM,UAAU,CACrB,OAAO,EACP;oBACE,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,OAAO,EAAE,CAAC,kCAAkC,CAAC,OAAO,CAAC,CAAC;iBACvD,EACD,WAAW,CACZ,EAAA;oBARD,sBAAO,SAQN,EAAC;;;KACH,CAAC;;ACfF,IAAM,qBAAqB,GAAG,UAAO,OAAO,EAAE,IAAU,EAAE,eAAwB,EAAE,WAAyB;;;;oBACtF,qBAAM,UAAU,CAAC,OAAO,EAAE;oBAC7C,EAAE,EAAE,IAAI,CAAC,EAAE;oBACX,OAAO,EAAE,IAAI,CAAC,OAAO;oBACrB,OAAO,EAAE,CAAC,wBAAwB,CAAC,eAAe,CAAC,CAAC;iBACrD,EAAE,WAAW,CAAC,EAAA;;gBAJT,YAAY,GAAG,SAIN;gBAEf,sBAAO,YAAY,EAAC;;;KACrB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdF;AACA,IAAM,oBAAoB,GAAG;IAC3B,SAAS,EAAE;QACT,YAAY;QACZ,sBAAsB;KACvB;IACD,IAAI,EAAE;QACJ,kBAAkB;QAClB,kBAAkB;KACnB;CACF,CAAC;AAEF,AAAO,IAAM,oBAAoB,GAAG,UAAC,aAAa,IAAK,OAAA,oBAAoB,CAAC,SAAS,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAA,CAAC;AAC9G,AAAO,IAAM,eAAe,GAAG,UAAC,aAAa,IAAK,OAAA,oBAAoB,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAA,CAAC;;ACT7F,IAAM,gBAAgB,GAAG,UAAO,EAAmD;QAAjD,OAAO,aAAA,EAAE,aAAa,mBAAA,EAAE,SAAS,eAAA,EAAE,YAAY,kBAAA;;;;;;oBAChF,WAAW,GAAG,kBAAkB,CAAC,YAAY,CAAC,CAAC;oBAC/C,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC;oBACrC,OAAO,GAAG,CAAC,WAAW,IAAI,CAAC,MAAM,CAAC;0BAEpC,OAAO,IAAI,oBAAoB,CAAC,SAAS,CAAC,aAAa,CAAC,CAAA,EAAxD,wBAAwD;oBAC1DF,WAAM,CAAC,KAAK,CAAC,sCAAsC,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC;oBAEhE,qBAAM,OAAO,CAAC,aAAa,EAAE,EAAA;;oBAArC,KAAK,GAAG,SAA6B;oBAC3C,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;oBAClCA,WAAM,CAAC,KAAK,CAAC,yDAAyD,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;oBAE/F,sBAAO,KAAK,EAAC;wBAGf,sBAAO,aAAa,CAAC,YAAY,EAAE,EAAC;;;;CACrC,CAAC;AAEF,AAAO,IAAM,eAAe,GAAG,UAAO,EAA6D;QAA3D,OAAO,aAAA,EAAE,aAAa,mBAAA,EAAE,SAAS,eAAA,EAAE,YAAY,kBAAA,EAAE,QAAQ,cAAA;;;;;;;0BAC3F,CAAC,aAAa,CAAC,YAAY,CAAC,IAAI,eAAe,CAAC,SAAS,CAAC,aAAa,CAAC,CAAA,EAAxE,wBAAwE;oBACpE,KAAsB,SAAS,CAAC,SAAS,CAAC,KAAK,EAA7C,KAAK,WAAA,EAAE,QAAQ,cAAA,CAA+B;oBACtDA,WAAM,CAAC,KAAK,CAAC,4CAA4C,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC;yBAEhF,EAAC,MAAA,QAAQ,CAAC,MAAM,0CAAE,MAAM,CAAA,EAAxB,wBAAwB;oBACZ,qBAAM,OAAO,CAAC,oBAAoB,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,UAAA,EAAE,CAAC,EAAA;;oBAAzE,KAAK,GAAG,SAAiE;oBAC/E,aAAa,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;oBAClCA,WAAM,CAAC,KAAK,CAAC,+DAA+D,EAAE,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;oBAErG,sBAAO,KAAK,EAAC;wBAGf,sBAAO,YAAY,EAAC;wBAGtB,sBAAO,YAAY,EAAC;;;;CACrB,CAAC;AAEF,AAAO,IAAM,WAAW,GAAG,UAAC,EAAiB;QAAf,aAAa,mBAAA;IAAO,OAAA,UAAC,KAAK,EAAE,SAAS,EAAE,KAAK;;QACxE,IAAI,KAAK,GAAG,CAAC,EAAE;YACb,OAAO,KAAK,CAAC;SACd;QAED,IAAI,CAAA,MAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,0CAAE,OAAO,MAAK,eAAe,EAAE;YAC9CA,WAAM,CAAC,KAAK,CAAC,uCAAqC,SAAS,CAAC,aAAa,iEAA4D,KAAK,MAAG,CAAC,CAAC;YAC/I,aAAa,CAAC,mBAAmB,EAAE,CAAC;YACpC,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;KACd;AAZiD,CAYjD,CAAC;;ACxCF,IAAM,gBAAgB,GAAG,UAAC,MAAiB;IACzC,OAAO,IAAIG,gBAAO,CAAC;QACjB,IAAI,EAAE,MAAM,CAAC,QAAQ;QACrB,UAAU,EAAE,MAAM,CAAC,UAAU;QAC7B,mBAAmB,EAAE,KAAK;QAC1B,WAAW,EAAE;YACX,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,YAAY,EAAE,MAAM,CAAC,YAAY;SAClC;QACD,MAAM,EAAE,MAAM,CAAC,MAAM;KACtB,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,IAAM,mBAAmB,GAAG,UAAC,QAAgB,EAAE,EAAyB;QAAvB,OAAO,aAAA,EAAE,YAAY,kBAAA;IACpE,OAAO,IAAIC,qBAAa,CAAC;QACvB,OAAO,SAAA;QACP,cAAc,EAAE,UAAC,eAAe,IAAK,OAAA,eAAe,CAAC,qBAAqB,EAAE,GAAA;QAC5E,kBAAkB,EAAE,UAAC,SAAS;YAC5BJ,WAAM,CAAC,KAAK,CAAC,kCAAkC,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC;YAC5E,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;SACxC;QACD,oBAAoB,EAAE,UAAC,SAAS;YAC9BA,WAAM,CAAC,KAAK,CAAC,oCAAoC,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC,CAAC;SAC/E;KACF,EAAE,YAAY,CAAC,CAAC;AACnB,CAAC,CAAC;AAEF,IAAM,kBAAkB,GAAG;IACzB,OAAOK,uBAAO,CAAC,UAAC,EAA+B;YAA7B,aAAa,mBAAA,EAAE,YAAY,kBAAA;QAC3C,IAAI,aAAa,EAAE;YACjB,aAAa,CAAC,GAAG,CAAC,UAAC,EAA4B;oBAA1B,OAAO,aAAA,EAAE,SAAS,eAAA,EAAE,IAAI,UAAA;gBAC3C,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,2CAA2C,CAAC,EAAE;oBAClE,IAAI,CAAC,SAAS,EAAE;wBACdL,WAAM,CAAC,KAAK,CAAC,+BAA6B,OAAO,gBAAW,IAAM,CAAC,CAAC;wBACpE,OAAO;qBACR;oBAED,IAAM,eAAe,GAAG,SAAS,CAAC,GAAG,CAAC,UAAC,EAAgB;4BAAd,MAAM,YAAA,EAAE,IAAI,UAAA;wBAAO,OAAA,cAAY,MAAM,gBAAW,IAAI,MAAG;qBAAA,CAAC,CAAC;oBAElGA,WAAM,CAAC,KAAK,CAAC,+BAA6B,OAAO,oBAAe,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAW,IAAM,CAAC,CAAC;iBAC9G;aACF,CAAC,CAAC;SACJ;QAED,IAAI,YAAY,EAAE;YAChBA,WAAM,CAAC,KAAK,CAAC,sBAAoB,YAAc,CAAC,CAAC;SAClD;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,IAAM,6BAA6B,GAAG,UAAC,QAAgB;IACrD,IAAI,YAAY,GAAQ,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;IACpDA,WAAM,CAAC,KAAK,CAAC,+BAA+B,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC;IAE5E,IAAM,OAAO,GAAG,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAC/C,IAAM,aAAa,GAAG,mBAAmB,CAAC,QAAQ,EAAE,EAAE,OAAO,SAAA,EAAE,YAAY,cAAA,EAAE,CAAC,CAAC;IAC/E,IAAM,QAAQ,GAAGM,6BAAc,CAAC,EAAE,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;IAClE,IAAM,WAAW,GAAG,kBAAkB,EAAE,CAAC;IAEzC,IAAM,cAAc,GAAGC,4BAAU,CAAC,UAAO,SAAS,EAAE,EAAW;YAAT,OAAO,aAAA;;;;;wBAC3DP,WAAM,CAAC,KAAK,CAAC,uBAAuB,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC;wBAChD,qBAAM,gBAAgB,CAAC,EAAE,OAAO,SAAA,EAAE,aAAa,eAAA,EAAE,SAAS,WAAA,EAAE,YAAY,cAAA,EAAE,CAAC,EAAA;;wBAA1F,YAAY,GAAG,SAA2E,CAAC;wBAC3FA,WAAM,CAAC,KAAK,CAAC,oDAAoD,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC,CAAC;wBAEjG,sBAAO;gCACL,OAAO,wBACF,OAAO,KACV,aAAa,EAAE,YAAU,YAAY,CAAC,YAAc,GACrD;6BACF,EAAC;;;;KACH,CAAC,CAAC;IAEH,IAAM,aAAa,GAAG,IAAIQ,qBAAU,CAAC,UAAC,SAAS,EAAE,OAAO;QACtD,OAAOC,kBAAQ,CAAC,OAAO,CAAC,SAAS,CAAQ,EAAE,UAAO,QAAa;;;;;wBAC7DT,WAAM,CAAC,KAAK,CAAC,sBAAsB,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC;wBAC/C,qBAAM,eAAe,CAAC,EAAE,OAAO,SAAA,EAAE,aAAa,eAAA,EAAE,SAAS,WAAA,EAAE,YAAY,cAAA,EAAE,QAAQ,UAAA,EAAE,CAAC,EAAA;;wBAAnG,YAAY,GAAG,SAAoF,CAAC;wBAE9F,MAAM,GAAG,CAAC,QAAQ,CAAC,MAAM,IAAI,EAAE,EAAE,MAAM,CAAC,UAAC,EAAW;gCAAT,OAAO,aAAA;4BACtD,OAAA,CAAC,OAAO,CAAC,QAAQ,CAAC,2CAA2C,CAAC;gCAC9D,CAAC,OAAO,CAAC,QAAQ,CAAC,sDAAsD,CAAC;yBAAA,CAC1E,CAAC;wBAEF,4CAAY,QAAQ,KAAE,MAAM,QAAA,KAAG;;;aAChC,CAAC,CAAC;KACJ,CAAC,CAAC;IAEH,IAAM,UAAU,GAAG,IAAIU,yBAAS,CAAC;QAC/B,QAAQ,EAAE,WAAW,CAAC,EAAE,aAAa,eAAA,EAAE,CAAC;QACxC,KAAK,EAAE,cAAM,OAAA,CAAC,GAAA;KACf,CAAC,CAAC;IAEH,IAAMC,YAAU,GAAGH,qBAAU,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,UAAU,EAAE,cAAc,EAAE,aAAa,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAE9G,OAAO;QACL,UAAU,cAAA;QACV,OAAO,SAAA;QACP,aAAa,eAAA;KACd,CAAC;AACJ,CAAC,CAAC;;AC/GK,IAAM,eAAe,GAAG;IAC7B,MAAM,EAAE,IAAI;IACZ,cAAc,EAAE,CAAC,IAAI,CAAC;IACtB,IAAI,EAAE;QACJ,aAAa,EAAE,eAAQ;QACvB,WAAW,EAAE,cAAM,OAAA,EAAE,GAAA;QACrB,aAAa,EAAE,eAAQ;KACxB;IACD,OAAO,EAAE;QACP,kBAAkB,EAAE,cAAc;QAClC,iBAAiB,EAAE,aAAa;QAChC,gBAAgB,EAAE,YAAY;KAC/B;CACF,CAAC;;ACJF,IAAM,QAAQ,GAAG,UAAC,QAAgB;IAChC,IAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,IAAI,EAAE,CAAC;IAC/C,IAAM,cAAc,GAAG,QAAQ,CAAC,cAAc,IAAI,eAAe,CAAC,cAAc,CAAC;IACjF,IAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,IAAI,eAAe,CAAC,MAAM,CAAC;IAEzD,IAAM,MAAM,GAAG,+BACV,eAAe,GACf,QAAQ,KACX,WAAW,aAAA,EACX,cAAc,EAAE,WAAW,CAAC,MAAM,CAAC,IAAI,cAAc,EACrD,IAAI,EAAE,QAAQ,CAAC,IAAI,IAAI,eAAe,CAAC,IAAI,GAC3B,CAAC;IAEnB,IAAI,QAAQ,CAAC,MAAM,EAAE;QACnB,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,MAAM,QAAA,EAAE,CAAC;KAC5C;IAED,IAAI,QAAQ,CAAC,aAAa,IAAI,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE;QACzD,OAAO;YACL,MAAM,EAAE,IAAI,YAAY,YACtB,KAAK,EAAE,IAAII,iCAAa,EAAE,IACvB,QAAQ,CAAC,aAAa,EACzB;YACF,MAAM,QAAA;SACP,CAAC;KACH;IAEK,IAAA,KAAyC,6BAA6B,CAAC,MAAM,CAAC,EAA5E,UAAU,gBAAA,EAAE,OAAO,aAAA,EAAE,aAAa,mBAA0C,CAAC;IAErF,IAAM,MAAM,GAAG,IAAI,YAAY,YAC7B,IAAI,EAAE,UAAU,EAChB,KAAK,EAAE,IAAIA,iCAAa,EAAE,IACvB,QAAQ,CAAC,aAAa,EACzB,CAAC;IACF,MAAyB,CAAC,OAAO,GAAG,OAAO,CAAC;IAC5C,MAAyB,CAAC,aAAa,GAAG,aAAa,CAAC;IAEzD,OAAO;QACL,MAAM,QAAA;QACN,MAAM,QAAA;KACP,CAAC;AACJ,CAAC,CAAC;AAEF,IAAM,UAAU,GAAG,UAAC,QAAQ;IAC1B,IAAI;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;KAC7B;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,IAAI,CAAC;KACb;AACH,CAAC,CAAC;AAEF,IAAM,cAAc,GAAuB;IACzC,IAAI,EAAE,gBAAgB;IACtB,KAAK,EAAE,UAAC,GAAG,EAAE,GAAG;QACd,IAAM,eAAe,GAAG,GAAG,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;QAC/D,IAAM,YAAY,GAAG,UAAU,CAAC,eAAe,CAAC,CAAC;QAEjD,OAAO;YACL,YAAY,EAAE,UAAC,EAAiB;oBAAf,aAAa,mBAAA;gBAAO,8BAChC,aAAa,KAChB,IAAI,EAAE;wBACJ,aAAa,EAAE,UAAC,QAAQ;4BACtB,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,YAAY,KAAK,QAAQ,CAAC,YAAY,EAAE;gCACxE,GAAG,CAAC,MAAM,CAAC,yBAAyB,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC;6BACjE;yBACF;wBACD,WAAW,EAAE;4BACX,GAAG,CAAC,MAAM,CAAC,yBAAyB,EAAE,eAAe,CAAC,CAAC;4BACvD,OAAO,YAAY,CAAC;yBACrB;wBACD,aAAa,EAAE;4BACb,OAAO,GAAG,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;yBAC/C;qBACF;aACD;SACH,CAAC;KACH;CACF,CAAC;AAEM,IAAA,eAAe,GAAKC,qBAAgB,CAAC;IAC3C,QAAQ,UAAA;IACR,GAAG,KAAA;IACH,UAAU,EAAE,CAAC,cAAc,CAAC;CAC7B,CAAC,gBAJqB;;;;"}