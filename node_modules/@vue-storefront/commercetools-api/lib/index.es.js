import { Logger } from '@vue-storefront/core';

var ProductPriceFragment = "\n  fragment DefaultProductPrice on ProductPrice {\n    discounted {\n      value {\n        type\n        currencyCode\n        centAmount\n        fractionDigits\n      }\n      discount {\n        validFrom\n        validUntil\n        isActive\n        name(acceptLanguage: $acceptLanguage)\n      }\n    }\n    value {\n      type\n      currencyCode\n      centAmount\n      fractionDigits\n    }\n  }\n";
var AddressFragment = "\n  fragment DefaultAddress on Address {\n    id\n    title\n    firstName\n    lastName\n    streetName\n    streetNumber\n    postalCode\n    city\n    country\n    state\n    region\n    company\n    apartment\n    phone\n    mobile\n  }\n";
// TODO: Remove all address information and update PRO packages to use customQueries when this is implemented: https://github.com/DivanteLtd/vue-storefront/issues/5049
var CustomerFragment = "\n  " + AddressFragment + "\n\n  fragment DefaultCustomer on Customer {\n    version\n    firstName\n    lastName\n    email\n    addresses {\n      id\n    }\n    shippingAddresses {\n      ...DefaultAddress\n    }\n    billingAddresses {\n      ...DefaultAddress\n    }\n    defaultBillingAddressId\n    defaultShippingAddressId\n  }\n";
var LineItemFragment = "\n  " + ProductPriceFragment + "\n\n  fragment DefaultLineItem on LineItem {\n    id\n    productId\n    name(acceptLanguage: $acceptLanguage)\n    productSlug(acceptLanguage: $acceptLanguage)\n    quantity\n    discountedPricePerQuantity {\n      quantity\n      discountedPrice {\n        value {\n          centAmount\n        }\n        includedDiscounts {\n          discount {\n            name(acceptLanguage: $acceptLanguage)\n            isActive\n          }\n        }\n      }\n    }\n    variant {\n      id\n      sku\n      price(currency: \"USD\") {\n        tiers {\n          value {\n            centAmount\n          }\n        }\n        value {\n          centAmount\n        }\n        discounted {\n          value {\n            centAmount\n          }\n          discount {\n            isActive\n            name(acceptLanguage: $acceptLanguage)\n          }\n        }\n      }\n      images {\n        url\n        label\n      }\n      attributesRaw {\n        name\n        value\n        attributeDefinition {\n          type {\n            name\n          }\n          label(locale: $locale)\n        }\n      }\n    }\n    price {\n      ...DefaultProductPrice\n    }\n  }\n";
var ShippingMethodFragment = "\n  fragment DefaultShippingMethod on ShippingMethod {\n    id\n    version\n    name\n    isDefault\n    localizedDescription(acceptLanguage: $acceptLanguage)\n    zoneRates {\n      zone {\n        id\n        name\n      }\n      shippingRates {\n        freeAbove {\n          type\n          centAmount\n        }\n        isMatching\n        price {\n          centAmount\n        }\n      }\n    }\n  }\n";
var CartFragment = "\n  " + AddressFragment + "\n  " + CustomerFragment + "\n  " + LineItemFragment + "\n  " + ShippingMethodFragment + "\n\n  fragment DefaultCart on Cart {\n    id\n    customerId\n    customerEmail\n    lineItems {\n      ...DefaultLineItem\n    }\n    totalPrice {\n      centAmount\n    }\n    shippingAddress {\n      ...DefaultAddress\n    }\n    billingAddress {\n      ...DefaultAddress\n    }\n    customer {\n      ...DefaultCustomer\n    }\n    totalPrice {\n      centAmount\n    }\n    taxedPrice {\n      totalNet {\n        centAmount\n      }\n      totalGross {\n        centAmount\n      }\n    }\n    paymentInfo {\n      payments {\n        id\n      }\n    }\n    shippingInfo {\n      price {\n        centAmount\n      }\n      shippingMethod {\n        ...DefaultShippingMethod\n      }\n    }\n    discountCodes {\n      discountCode {\n        id\n        code\n        isActive\n        validFrom\n        validUntil\n        name(acceptLanguage: $acceptLanguage)\n      }\n    }\n    refusedGifts {\n      isActive\n      validFrom\n      validUntil\n      name(acceptLanguage: $acceptLanguage)\n    }\n    custom {\n      customFieldsRaw {\n        name\n        value\n      }\n    }\n    cartState\n    version\n  }\n";
var OrderFragment = "\n  " + AddressFragment + "\n  " + LineItemFragment + "\n\n  fragment DefaultOrder on Order {\n    lineItems {\n      ...DefaultLineItem\n    }\n    totalPrice {\n      centAmount\n    }\n    orderState\n    id\n    orderNumber\n    version\n    createdAt\n    customerEmail\n    shipmentState\n    paymentState\n    shippingAddress {\n      ...DefaultAddress\n    }\n    billingAddress {\n      ...DefaultAddress\n    }\n    cart {\n      id\n      version\n    }\n  }\n";

var AttributeType;
(function (AttributeType) {
    AttributeType["STRING"] = "StringAttribute";
    AttributeType["DATE"] = "DateAttribute";
    AttributeType["DATETIME"] = "DateTimeAttribute";
    AttributeType["TIME"] = "TimeAttribute";
    AttributeType["NUMBER"] = "NumberAttribute";
    AttributeType["ENUM"] = "EnumAttribute";
    AttributeType["LOCALIZED_ENUM"] = "LocalizedEnumAttribute";
    AttributeType["LOCALIZED_STRING"] = "LocalizedStringAttribute";
    AttributeType["MONEY"] = "MoneyAttribute";
    AttributeType["BOOLEAN"] = "BooleanAttribute";
})(AttributeType || (AttributeType = {}));

/* istanbul ignore file */
var AnonymousCartSignInMode;
(function (AnonymousCartSignInMode) {
    /** The anonymous cart is used as new active customer cart. No `LineItem`s get merged. */
    AnonymousCartSignInMode["UseAsNewActiveCustomerCart"] = "UseAsNewActiveCustomerCart";
    /** `LineItem`s of the anonymous cart will be copied to the customer’s active cart that has been modified most recently.
     *
     * The `CartState` of the anonymous cart gets changed to `Merged` while the
     * `CartState` of the customer’s cart remains `Active`.
     *
     * `CustomLineItems` and `CustomFields` of the anonymous cart will not be copied to the customers cart.
     *
     * If a `LineItem` in the anonymous cart matches an existing line item in the
     * customer’s cart (same product ID and variant ID), the maximum quantity of both
     * LineItems is used as the new quantity. In that case `CustomFields` on the
     * `LineItem` of the anonymous cart will not be in the resulting `LineItem`.
     */
    AnonymousCartSignInMode["MergeWithExistingCustomerCart"] = "MergeWithExistingCustomerCart";
})(AnonymousCartSignInMode || (AnonymousCartSignInMode = {}));
var AttributeConstraint;
(function (AttributeConstraint) {
    /** No constraints are applied to the attribute */
    AttributeConstraint["None"] = "None";
    /** Attribute value should be different in each variant */
    AttributeConstraint["Unique"] = "Unique";
    /** A set of attributes, that have this constraint, should have different combinations in each variant */
    AttributeConstraint["CombinationUnique"] = "CombinationUnique";
    /** Attribute value should be the same in all variants */
    AttributeConstraint["SameForAll"] = "SameForAll";
})(AttributeConstraint || (AttributeConstraint = {}));
var CartOrigin;
(function (CartOrigin) {
    /** The cart was created by the merchant on behalf of the customer */
    CartOrigin["Merchant"] = "Merchant";
    /** The cart was created by the customer. This is the default value */
    CartOrigin["Customer"] = "Customer";
})(CartOrigin || (CartOrigin = {}));
var CartState;
(function (CartState) {
    /** The cart was ordered. No further operations on the cart are allowed. */
    CartState["Ordered"] = "Ordered";
    /** Anonymous cart whose content was merged into a customers cart on signin. No further operations on the cart are allowed. */
    CartState["Merged"] = "Merged";
    /** The cart can be updated and ordered. It is the default state. */
    CartState["Active"] = "Active";
})(CartState || (CartState = {}));
var ChannelRole;
(function (ChannelRole) {
    /** Role tells that this channel can be used to track inventory entries.Channels with this role can be treated as warehouses */
    ChannelRole["InventorySupply"] = "InventorySupply";
    /** Role tells that this channel can be used to expose products to a specific
     * distribution channel. It can be used by the cart to select a product price.
     */
    ChannelRole["ProductDistribution"] = "ProductDistribution";
    /** Role tells that this channel can be used to track order export activities. */
    ChannelRole["OrderExport"] = "OrderExport";
    /** Role tells that this channel can be used to track order import activities. */
    ChannelRole["OrderImport"] = "OrderImport";
    /** This role can be combined with some other roles (e.g. with `InventorySupply`)
     * to represent the fact that this particular channel is the primary/master
     * channel among the channels of the same type.
     */
    ChannelRole["Primary"] = "Primary";
})(ChannelRole || (ChannelRole = {}));
var DiscountCodeState;
(function (DiscountCodeState) {
    /** The discount code is active and none of the discounts were applied because the
     * discount application was stopped by one discount that has the StackingMode of
     * StopAfterThisDiscount defined
     */
    DiscountCodeState["ApplicationStoppedByPreviousDiscount"] = "ApplicationStoppedByPreviousDiscount";
    /** The discount code is not valid or it does not contain any valid cart
     * discounts. Validity is determined based on the validFrom and validUntil dates
     */
    DiscountCodeState["NotValid"] = "NotValid";
    /** maxApplications or maxApplicationsPerCustomer for discountCode has been reached. */
    DiscountCodeState["MaxApplicationReached"] = "MaxApplicationReached";
    /** The discount code is active and it contains at least one active and valid
     * CartDiscount. The discount code cartPredicate matches the cart and at least
     * one of the contained active discount’s cart predicates matches the cart.
     */
    DiscountCodeState["MatchesCart"] = "MatchesCart";
    /** The discount code is active and it contains at least one active and valid
     * CartDiscount. But its cart predicate does not match the cart or none of the
     * contained active discount’s cart predicates match the cart
     */
    DiscountCodeState["DoesNotMatchCart"] = "DoesNotMatchCart";
    /** The discount code is not active or it does not contain any active cart discounts. */
    DiscountCodeState["NotActive"] = "NotActive";
})(DiscountCodeState || (DiscountCodeState = {}));
var InventoryMode;
(function (InventoryMode) {
    /** Adding items to cart and ordering is independent of inventory. No inventory checks or modifications.
     * This is the default mode for a new cart.
     */
    InventoryMode["None"] = "None";
    /** Creating an order will fail with an OutOfStock error if an unavailable line item exists. Line items in the cart
     * are only reserved for the duration of the ordering transaction.
     */
    InventoryMode["ReserveOnOrder"] = "ReserveOnOrder";
    /** Orders are tracked on inventory. That means, ordering a LineItem will decrement the available quantity on the
     * respective InventoryEntry. Creating an order will succeed even if the line item’s available quantity is zero or
     * negative. But creating an order will fail with an OutOfStock error if no matching inventory entry exists for a
     * line item.
     */
    InventoryMode["TrackOnly"] = "TrackOnly";
})(InventoryMode || (InventoryMode = {}));
var LineItemMode;
(function (LineItemMode) {
    /** The line item was added automatically, because a discount has added a free gift to the cart.
     * The quantity can not be increased, and it won’t be merged when the same product variant is added.
     * If the gift is removed, an entry is added to the "refusedGifts" array and the discount won’t be applied again
     * to the cart. The price can not be changed externally.
     * All other updates, such as the ones related to custom fields, can be used.
     */
    LineItemMode["GiftLineItem"] = "GiftLineItem";
    /** The line item was added during cart creation or with the update action addLineItem. Its quantity can be
     * changed without restrictions.
     */
    LineItemMode["Standard"] = "Standard";
})(LineItemMode || (LineItemMode = {}));
var LineItemPriceMode;
(function (LineItemPriceMode) {
    /** The price is selected form the product variant. This is the default mode. */
    LineItemPriceMode["Platform"] = "Platform";
    /** The line item price was set externally. Cart discounts can apply to line items
     * with this price mode. All update actions that change the quantity of a line
     * item with this price mode require the externalPrice field to be given.
     */
    LineItemPriceMode["ExternalPrice"] = "ExternalPrice";
    /** The line item price with the total was set externally. */
    LineItemPriceMode["ExternalTotal"] = "ExternalTotal";
})(LineItemPriceMode || (LineItemPriceMode = {}));
var OrderState;
(function (OrderState) {
    OrderState["Confirmed"] = "Confirmed";
    OrderState["Cancelled"] = "Cancelled";
    OrderState["Complete"] = "Complete";
    OrderState["Open"] = "Open";
})(OrderState || (OrderState = {}));
var PaymentState;
(function (PaymentState) {
    PaymentState["Paid"] = "Paid";
    PaymentState["CreditOwed"] = "CreditOwed";
    PaymentState["Pending"] = "Pending";
    PaymentState["Failed"] = "Failed";
    PaymentState["BalanceDue"] = "BalanceDue";
})(PaymentState || (PaymentState = {}));
var PublishScope;
(function (PublishScope) {
    /** Publishes the complete staged projection */
    PublishScope["All"] = "All";
    /** Publishes only prices on the staged projection */
    PublishScope["Prices"] = "Prices";
})(PublishScope || (PublishScope = {}));
var ReturnPaymentState;
(function (ReturnPaymentState) {
    ReturnPaymentState["NotRefunded"] = "NotRefunded";
    ReturnPaymentState["Refunded"] = "Refunded";
    ReturnPaymentState["Initial"] = "Initial";
    ReturnPaymentState["NonRefundable"] = "NonRefundable";
})(ReturnPaymentState || (ReturnPaymentState = {}));
var ReturnShipmentState;
(function (ReturnShipmentState) {
    ReturnShipmentState["Unusable"] = "Unusable";
    ReturnShipmentState["BackInStock"] = "BackInStock";
    ReturnShipmentState["Returned"] = "Returned";
    ReturnShipmentState["Advised"] = "Advised";
})(ReturnShipmentState || (ReturnShipmentState = {}));
var RoundingMode;
(function (RoundingMode) {
    /** [Round half down](https://en.wikipedia.org/wiki/Rounding#Round_half_down).
     * Rounding mode used by, e.g., [Avalara Sales TaxII](https://help.avalara.com/kb/001/How_does_Rounding_with_SalesTaxII_work%3F)
     */
    RoundingMode["HalfDown"] = "HalfDown";
    /** [Round half up](https://en.wikipedia.org/wiki/Rounding#Round_half_up) */
    RoundingMode["HalfUp"] = "HalfUp";
    /** [Round half to even](https://en.wikipedia.org/wiki/Rounding#Round_half_to_even).
     * Default rounding mode as used in IEEE 754 computing functions and operators.
     */
    RoundingMode["HalfEven"] = "HalfEven";
})(RoundingMode || (RoundingMode = {}));
/** In order to decide which of the matching items will actually be discounted */
var SelectionMode;
(function (SelectionMode) {
    SelectionMode["MostExpensive"] = "MostExpensive";
    SelectionMode["Cheapest"] = "Cheapest";
})(SelectionMode || (SelectionMode = {}));
var ShipmentState;
(function (ShipmentState) {
    ShipmentState["Delayed"] = "Delayed";
    ShipmentState["Backorder"] = "Backorder";
    ShipmentState["Partial"] = "Partial";
    ShipmentState["Pending"] = "Pending";
    ShipmentState["Ready"] = "Ready";
    ShipmentState["Shipped"] = "Shipped";
})(ShipmentState || (ShipmentState = {}));
var ShippingMethodState;
(function (ShippingMethodState) {
    /** Either there is no predicate defined for the ShippingMethod or the given predicate matches the cart */
    ShippingMethodState["MatchesCart"] = "MatchesCart";
    /** The ShippingMethod predicate does not match the cart. Ordering this cart will
     * fail with error ShippingMethodDoesNotMatchCart
     */
    ShippingMethodState["DoesNotMatchCart"] = "DoesNotMatchCart";
})(ShippingMethodState || (ShippingMethodState = {}));
/** Describes how this discount interacts with other discounts */
var StackingMode;
(function (StackingMode) {
    /** Don’t apply any more matching discounts after this one. */
    StackingMode["StopAfterThisDiscount"] = "StopAfterThisDiscount";
    /** Default. Continue applying other matching discounts after applying this one. */
    StackingMode["Stacking"] = "Stacking";
})(StackingMode || (StackingMode = {}));
var StateRole;
(function (StateRole) {
    StateRole["Return"] = "Return";
    StateRole["ReviewIncludedInStatistics"] = "ReviewIncludedInStatistics";
})(StateRole || (StateRole = {}));
var StateType;
(function (StateType) {
    StateType["OrderState"] = "OrderState";
    StateType["ProductState"] = "ProductState";
    StateType["ReviewState"] = "ReviewState";
    StateType["PaymentState"] = "PaymentState";
    StateType["LineItemState"] = "LineItemState";
})(StateType || (StateType = {}));
var TaxCalculationMode;
(function (TaxCalculationMode) {
    /** This calculation mode calculates the taxes on the unit price before multiplying with the quantity.
     * E.g. `($1.08 * 1.19 = $1.2852 -> $1.29 rounded) * 3 = $3.87`
     */
    TaxCalculationMode["UnitPriceLevel"] = "UnitPriceLevel";
    /** Default. This calculation mode calculates the taxes after the unit price is multiplied with the quantity.
     * E.g. `($1.08 * 3 = $3.24) * 1.19 = $3.8556 -> $3.86 rounded`
     */
    TaxCalculationMode["LineItemLevel"] = "LineItemLevel";
})(TaxCalculationMode || (TaxCalculationMode = {}));
var TaxMode;
(function (TaxMode) {
    /** No taxes are added to the cart. */
    TaxMode["Disabled"] = "Disabled";
    /** The tax amounts and the tax rates as well as the tax portions are set externally per ExternalTaxAmountDraft.
     * A cart with this tax mode can only be ordered if the cart itself and all line items, all custom line items and
     * the shipping method have an external tax amount and rate set
     */
    TaxMode["ExternalAmount"] = "ExternalAmount";
    /** The tax rates are set externally per ExternalTaxRateDraft. A cart with this tax mode can only be ordered if all
     * line items, all custom line items and the shipping method have an external tax rate set. The totalNet and
     * totalGross as well as the taxPortions fields are calculated by the platform according to the taxRoundingMode.
     */
    TaxMode["External"] = "External";
    /** The tax rates are selected by the platform from the TaxCategories based on the cart shipping address.
     * The totalNet and totalGross as well as the taxPortions fields are calculated by the platform according to the
     * taxRoundingMode.
     */
    TaxMode["Platform"] = "Platform";
})(TaxMode || (TaxMode = {}));
/** UI hint telling what kind of edit control should be displayed for a text attribute. */
var TextInputHint;
(function (TextInputHint) {
    TextInputHint["MultiLine"] = "MultiLine";
    TextInputHint["SingleLine"] = "SingleLine";
})(TextInputHint || (TextInputHint = {}));
var TransactionState;
(function (TransactionState) {
    TransactionState["Failure"] = "Failure";
    TransactionState["Success"] = "Success";
    TransactionState["Pending"] = "Pending";
    TransactionState["Initial"] = "Initial";
})(TransactionState || (TransactionState = {}));
var TransactionType;
(function (TransactionType) {
    TransactionType["Chargeback"] = "Chargeback";
    TransactionType["Refund"] = "Refund";
    TransactionType["Charge"] = "Charge";
    TransactionType["CancelAuthorization"] = "CancelAuthorization";
    TransactionType["Authorization"] = "Authorization";
})(TransactionType || (TransactionType = {}));

var hasContactInfo = function (details) { return Object.keys(details.contactInfo || {}).some(function (c) { return ['phone', 'email', 'mobile', 'fax'].includes(c); }); };
var createAddLineItemAction = function (variant, quantity) { return ({
    addLineItem: {
        variantId: variant.id,
        quantity: quantity,
        sku: variant.sku
    }
}); };
var createRemoveLineItemAction = function (product) { return ({
    removeLineItem: {
        lineItemId: product.id,
        quantity: product.quantity
    }
}); };
var createChangeLineItemQuantityAction = function (product) { return ({
    changeLineItemQuantity: {
        lineItemId: product.id,
        quantity: product.quantity
    }
}); };
var setShippingAddressAction = function (shippingDetails) {
    var _a, _b, _c, _d;
    if (hasContactInfo(shippingDetails)) {
        Logger.warn('Using `contactInfo` on Address is being deprecated in the CT API, use `email` `phone` `mobile` and `fax` fields directly.');
    }
    return {
        setShippingAddress: {
            address: {
                title: shippingDetails.title,
                salutation: shippingDetails.salutation,
                firstName: shippingDetails.firstName,
                lastName: shippingDetails.lastName,
                streetName: shippingDetails.streetName,
                streetNumber: shippingDetails.streetNumber,
                additionalStreetInfo: shippingDetails.additionalStreetInfo,
                postalCode: shippingDetails.postalCode,
                city: shippingDetails.city,
                region: shippingDetails.region,
                state: shippingDetails.state,
                country: shippingDetails.country,
                company: shippingDetails.company,
                department: shippingDetails.department,
                building: shippingDetails.building,
                apartment: shippingDetails.apartment,
                pOBox: shippingDetails.pOBox,
                phone: shippingDetails.phone || ((_a = shippingDetails.contactInfo) === null || _a === void 0 ? void 0 : _a.phone),
                mobile: shippingDetails.mobile || ((_b = shippingDetails.contactInfo) === null || _b === void 0 ? void 0 : _b.mobile),
                email: shippingDetails.email || ((_c = shippingDetails.contactInfo) === null || _c === void 0 ? void 0 : _c.email),
                fax: shippingDetails.fax || ((_d = shippingDetails.contactInfo) === null || _d === void 0 ? void 0 : _d.fax),
                additionalAddressInfo: shippingDetails.additionalAddressInfo
            }
        }
    };
};
var setShippingMethodAction = function (shippingMethodId) { return ({
    setShippingMethod: {
        shippingMethod: shippingMethodId ? { id: shippingMethodId } : null
    }
}); };
var addPayment = function (payment) { return ({
    addPayment: { payment: payment }
}); };
var setBillingAddressAction = function (billingDetails) {
    var _a, _b, _c, _d;
    if (hasContactInfo(billingDetails)) {
        Logger.warn('Using `contactInfo` on Address is being deprecated in the CT API, use `email` `phone` `mobile` and `fax` fields directly.');
    }
    return {
        setBillingAddress: {
            address: {
                title: billingDetails.title,
                salutation: billingDetails.salutation,
                firstName: billingDetails.firstName,
                lastName: billingDetails.lastName,
                streetName: billingDetails.streetName,
                streetNumber: billingDetails.streetNumber,
                additionalStreetInfo: billingDetails.additionalStreetInfo,
                postalCode: billingDetails.postalCode,
                city: billingDetails.city,
                region: billingDetails.region,
                state: billingDetails.state,
                country: billingDetails.country,
                company: billingDetails.company,
                department: billingDetails.department,
                building: billingDetails.building,
                apartment: billingDetails.apartment,
                pOBox: billingDetails.pOBox,
                phone: billingDetails.phone || ((_a = billingDetails.contactInfo) === null || _a === void 0 ? void 0 : _a.phone),
                mobile: billingDetails.mobile || ((_b = billingDetails.contactInfo) === null || _b === void 0 ? void 0 : _b.mobile),
                email: billingDetails.email || ((_c = billingDetails.contactInfo) === null || _c === void 0 ? void 0 : _c.email),
                fax: billingDetails.fax || ((_d = billingDetails.contactInfo) === null || _d === void 0 ? void 0 : _d.fax),
                additionalAddressInfo: billingDetails.additionalAddressInfo
            }
        }
    };
};
var addPaymentAction = function (paymentMethodId) { return ({
    addPayment: {
        payment: {
            id: paymentMethodId
        }
    }
}); };
var addDiscountCodeAction = function (code) { return ({
    addDiscountCode: { code: code }
}); };
var removeDiscountCodeAction = function (discountCode) { return ({
    removeDiscountCode: { discountCode: discountCode }
}); };
var setCustomerEmail = function (email) { return ({
    setCustomerEmail: { email: email }
}); };

var actions = /*#__PURE__*/Object.freeze({
  __proto__: null,
  createAddLineItemAction: createAddLineItemAction,
  createRemoveLineItemAction: createRemoveLineItemAction,
  createChangeLineItemQuantityAction: createChangeLineItemQuantityAction,
  setShippingAddressAction: setShippingAddressAction,
  setShippingMethodAction: setShippingMethodAction,
  addPayment: addPayment,
  setBillingAddressAction: setBillingAddressAction,
  addPaymentAction: addPaymentAction,
  addDiscountCodeAction: addDiscountCodeAction,
  removeDiscountCodeAction: removeDiscountCodeAction,
  setCustomerEmail: setCustomerEmail
});

export { AddressFragment, AnonymousCartSignInMode, AttributeConstraint, AttributeType, CartFragment, CartOrigin, CartState, ChannelRole, CustomerFragment, DiscountCodeState, InventoryMode, LineItemFragment, LineItemMode, LineItemPriceMode, OrderFragment, OrderState, PaymentState, ProductPriceFragment, PublishScope, ReturnPaymentState, ReturnShipmentState, RoundingMode, SelectionMode, ShipmentState, ShippingMethodFragment, ShippingMethodState, StackingMode, StateRole, StateType, TaxCalculationMode, TaxMode, TextInputHint, TransactionState, TransactionType, actions as cartActions };
//# sourceMappingURL=index.es.js.map
