'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@vue-storefront/core');
var commercetoolsApi = require('@vue-storefront/commercetools-api');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArray(to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
}

var loadCurrentCart = function (context, customQueryFn) {
    if (customQueryFn === void 0) { customQueryFn = function (user, cart) {
        if (user === void 0) { user = null; }
        if (cart === void 0) { cart = null; }
        return ({ cart: cart, user: user });
    }; }
    return __awaiter(void 0, void 0, void 0, function () {
        var _a, user, cart, profileData, data;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = customQueryFn(), user = _a.user, cart = _a.cart;
                    return [4 /*yield*/, context.$ct.api.getMe({ customer: false }, user)];
                case 1:
                    profileData = (_b.sent()).data;
                    if (profileData.me.activeCart) {
                        return [2 /*return*/, profileData.me.activeCart];
                    }
                    return [4 /*yield*/, context.$ct.api.createCart({}, cart)];
                case 2:
                    data = (_b.sent()).data;
                    return [2 /*return*/, data.cart];
            }
        });
    });
};

var getBasketItemByProduct = function (_a) {
    var currentCart = _a.currentCart, product = _a.product;
    return currentCart.lineItems.find(function (item) { return item.productId === product._id; });
};
/** returns current cart or creates new one **/
var getCurrentCart = function (context, currentCart) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (!currentCart) {
            return [2 /*return*/, loadCurrentCart(context)];
        }
        return [2 /*return*/, currentCart];
    });
}); };
var params = {
    load: function (context, _a) {
        var customQuery = _a.customQuery;
        return __awaiter(void 0, void 0, void 0, function () {
            var $ct, isGuest, profileData;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        $ct = context.$ct;
                        return [4 /*yield*/, $ct.api.isGuest()];
                    case 1:
                        isGuest = _b.sent();
                        if (isGuest) {
                            return [2 /*return*/, null];
                        }
                        return [4 /*yield*/, context.$ct.api.getMe({ customer: false }, customQuery)];
                    case 2:
                        profileData = (_b.sent()).data;
                        return [2 /*return*/, profileData.me.activeCart];
                }
            });
        });
    },
    addItem: function (context, _a) {
        var currentCart = _a.currentCart, product = _a.product, quantity = _a.quantity, customQuery = _a.customQuery;
        return __awaiter(void 0, void 0, void 0, function () {
            var loadedCart, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, getCurrentCart(context, currentCart)];
                    case 1:
                        loadedCart = _b.sent();
                        return [4 /*yield*/, context.$ct.api.addToCart(loadedCart, product, quantity, customQuery)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data.cart];
                }
            });
        });
    },
    removeItem: function (context, _a) {
        var currentCart = _a.currentCart, product = _a.product, customQuery = _a.customQuery;
        return __awaiter(void 0, void 0, void 0, function () {
            var loadedCart, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, getCurrentCart(context, currentCart)];
                    case 1:
                        loadedCart = _b.sent();
                        return [4 /*yield*/, context.$ct.api.removeFromCart(loadedCart, product, customQuery)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data.cart];
                }
            });
        });
    },
    updateItemQty: function (context, _a) {
        var currentCart = _a.currentCart, product = _a.product, quantity = _a.quantity, customQuery = _a.customQuery;
        return __awaiter(void 0, void 0, void 0, function () {
            var loadedCart, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, getCurrentCart(context, currentCart)];
                    case 1:
                        loadedCart = _b.sent();
                        return [4 /*yield*/, context.$ct.api.updateCartQuantity(loadedCart, __assign(__assign({}, product), { quantity: quantity }), customQuery)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, data.cart];
                }
            });
        });
    },
    clear: function (context, _a) {
        var currentCart = _a.currentCart;
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, currentCart];
            });
        });
    },
    applyCoupon: function (context, _a) {
        var currentCart = _a.currentCart, couponCode = _a.couponCode, customQuery = _a.customQuery;
        return __awaiter(void 0, void 0, void 0, function () {
            var loadedCart, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, getCurrentCart(context, currentCart)];
                    case 1:
                        loadedCart = _b.sent();
                        return [4 /*yield*/, context.$ct.api.applyCartCoupon(loadedCart, couponCode, customQuery)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, { updatedCart: data.cart, updatedCoupon: couponCode }];
                }
            });
        });
    },
    removeCoupon: function (context, _a) {
        var currentCart = _a.currentCart, coupon = _a.coupon, customQuery = _a.customQuery;
        return __awaiter(void 0, void 0, void 0, function () {
            var loadedCart, data;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, getCurrentCart(context, currentCart)];
                    case 1:
                        loadedCart = _b.sent();
                        return [4 /*yield*/, context.$ct.api.removeCartCoupon(loadedCart, { id: coupon.id, typeId: 'discount-code' }, customQuery)];
                    case 2:
                        data = (_b.sent()).data;
                        return [2 /*return*/, { updatedCart: data.cart }];
                }
            });
        });
    },
    isInCart: function (context, _a) {
        var currentCart = _a.currentCart, product = _a.product;
        return Boolean(currentCart && getBasketItemByProduct({ currentCart: currentCart, product: product }));
    }
};
var useCart = core.useCartFactory(params);

var params$1 = {
    categorySearch: function (context, _a) { return __awaiter(void 0, void 0, void 0, function () {
        var categoryResponse;
        var customQuery = _a.customQuery, searchParams = __rest(_a, ["customQuery"]);
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, context.$ct.api.getCategory(searchParams, customQuery)];
                case 1:
                    categoryResponse = _b.sent();
                    return [2 /*return*/, categoryResponse.data.categories.results];
            }
        });
    }); }
};
var useCategory = core.useCategoryFactory(params$1);

var getTranslated = function (rawAttribute, context) {
    var locale = context.$ct.config.locale;
    if (rawAttribute.attributeDefinition.type.name === 'ltext') {
        return rawAttribute.value[locale];
    }
    if (rawAttribute.attributeDefinition.type.name === 'lenum') {
        return rawAttribute.value.label[locale];
    }
    return rawAttribute.value;
};
var enhanceProduct = function (productResponse, context) {
    productResponse.data._variants = productResponse.data.products.results
        .map(function (product) {
        var current = product.masterData.current;
        return current.allVariants.map(function (variant) { return (__assign(__assign({}, variant), { attributesRaw: variant.attributesRaw.map(function (raw) { return (__assign(__assign({}, raw), { _translated: getTranslated(raw, context) })); }), _name: current.name, _slug: current.slug, _id: product.id, _master: current.masterVariant.id === variant.id, _description: current.description, _categoriesRef: current.categoriesRef.map(function (cr) { return cr.id; }), _rating: product.reviewRatingStatistics })); });
    })
        .reduce(function (prev, curr) { return __spreadArray(__spreadArray([], prev), curr); }, []);
    return productResponse;
};

var mapPaginationParams = (function (_a) {
    var page = _a.page, perPage = _a.perPage;
    if (perPage && page) {
        return {
            limit: perPage,
            offset: (page - 1) * perPage
        };
    }
});

var getAttributeValue = function (attribute) {
    /**
     * List of attribute types: https://docs.commercetools.com/api/projects/productTypes#attributetype
     */
    switch (attribute.attributeDefinition.type.name) {
        case 'text':
        case 'ltext':
        case 'boolean':
        case 'number':
        case 'date':
        case 'time':
        case 'datetime':
        case 'money':
        case 'set':
            return attribute.value;
        case 'lenum':
        case 'enum':
            return attribute.value.key;
        case 'reference':
            return { typeId: attribute.value.typeId, id: attribute.value.id };
        default:
            return null;
    }
};
var formatAttributeList = function (attributes) {
    return attributes.map(function (attr) {
        var attrValue = getAttributeValue(attr);
        return {
            name: attr.name,
            value: attrValue,
            label: attr._translated
        };
    });
};
var getVariantByAttributes = function (products, attributes) {
    if (!products || products.length === 0) {
        return null;
    }
    var configurationKeys = Object.keys(attributes);
    return products.find(function (product) {
        var currentAttributes = formatAttributeList(product.attributesRaw);
        return configurationKeys.every(function (attrName) {
            return currentAttributes.find(function (_a) {
                var name = _a.name, value = _a.value;
                return attrName === name && attributes[attrName] === value;
            });
        });
    });
};
var getPrice = function (price) { return price ? price.value.centAmount / 100 : null; };
var getDiscount = function (product) { var _a; return (_a = product.price) === null || _a === void 0 ? void 0 : _a.discounted; };
var getSpecialPrice = function (product) {
    var discount = getDiscount(product);
    if (product.__typename === 'LineItem') {
        var discountedPricePerQuantity = product.discountedPricePerQuantity;
        var discountsLength = discountedPricePerQuantity.length;
        if (discountsLength > 0) {
            return getPrice(discountedPricePerQuantity[discountsLength - 1].discountedPrice);
        }
    }
    if (discount === null || discount === void 0 ? void 0 : discount.discount.isActive) {
        return getPrice(discount);
    }
    return null;
};
var createPrice = function (product) {
    if (!product) {
        return { regular: null, special: null };
    }
    var regularPrice = getPrice(product.price);
    var specialPrice = getSpecialPrice(product);
    return {
        regular: regularPrice,
        special: specialPrice
    };
};

var extractAttributes = function (product) { return product.attributesRaw; };
var flattenAttributes = function (prev, curr) { return __spreadArray(__spreadArray([], prev), (curr || [])); };
var getFilterFromAttribute = function (attribute, prev) {
    var attrValue = getAttributeValue(attribute);
    var filter = prev[attribute.name] || {
        type: attribute.attributeDefinition.type.name,
        options: []
    };
    var option = {
        value: attrValue,
        label: attribute.label || (typeof attrValue === 'string' ? attrValue : null),
        selected: false
    };
    var hasSuchOption = filter.options.some(function (opt) { return opt.value === option.value; });
    hasSuchOption || filter.options.push(option);
    return filter;
};
var getFiltersFromProductsAttributes = (function (products) {
    if (!products) {
        return {};
    }
    return products.map(extractAttributes).reduce(flattenAttributes, []).reduce(function (prev, attribute) {
        prev[attribute.name] = getFilterFromAttribute(attribute, prev);
        return prev;
    }, {});
});

var getCouponsFromCart = (function (cart) {
    var coupons = cart === null || cart === void 0 ? void 0 : cart.discountCodes;
    if (!coupons) {
        return;
    }
    return coupons.map(function (coupon) { return ({
        id: coupon.discountCode.id,
        name: coupon.discountCode.name,
        code: coupon.discountCode.code,
        value: null
    }); });
});

var makeId = (function () { return Math.random().toString().substr(2); });

// TODO: move to the config file
var ITEMS_PER_PAGE = [20, 40, 100];
var factoryParams = {
    search: function (context, params) { return __awaiter(void 0, void 0, void 0, function () {
        var itemsPerPage, categoryResponse, categories, inputFilters, filters, productResponse, enhancedProductResponse, products, facets;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    itemsPerPage = params.input.itemsPerPage;
                    return [4 /*yield*/, context.$ct.api.getCategory({ slug: params.input.categorySlug })];
                case 1:
                    categoryResponse = _a.sent();
                    categories = categoryResponse.data.categories.results;
                    inputFilters = params.input.filters;
                    filters = Object.keys(inputFilters).reduce(function (prev, curr) { return (__spreadArray(__spreadArray([], prev), inputFilters[curr].map(function (value) { return ({ type: commercetoolsApi.AttributeType.STRING, name: curr, value: value }); }))); }, []);
                    return [4 /*yield*/, context.$ct.api.getProduct({
                            catId: categories[0].id,
                            limit: itemsPerPage,
                            offset: (params.input.page - 1) * itemsPerPage,
                            filters: filters
                            // TODO: https://github.com/DivanteLtd/vue-storefront/issues/4857
                            // sort: params.sort
                        })];
                case 2:
                    productResponse = _a.sent();
                    enhancedProductResponse = enhanceProduct(productResponse, context);
                    products = enhancedProductResponse.data._variants;
                    facets = getFiltersFromProductsAttributes(products);
                    return [2 /*return*/, {
                            products: products,
                            categories: categories,
                            facets: facets,
                            total: productResponse.data.products.total,
                            perPageOptions: ITEMS_PER_PAGE,
                            itemsPerPage: itemsPerPage
                        }];
            }
        });
    }); }
};
var index = core.useFacetFactory(factoryParams);

var factoryParams$1 = {
    provide: function () {
        return {
            cart: useCart()
        };
    },
    make: function (context, _a) {
        var customQuery = _a.customQuery;
        return __awaiter(void 0, void 0, void 0, function () {
            var _b, id, version, response;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _b = context.cart.cart.value, id = _b.id, version = _b.version;
                        return [4 /*yield*/, context.$ct.api.createMyOrderFromCart({ id: id, version: version }, customQuery)];
                    case 1:
                        response = _c.sent();
                        return [2 /*return*/, response.data.order];
                }
            });
        });
    }
};
var useMakeOrder = core.useMakeOrderFactory(factoryParams$1);

var productsSearch = function (context, _a) { return __awaiter(void 0, void 0, void 0, function () {
    var apiSearchParams, productResponse, enhancedProductResponse, products;
    var customQuery = _a.customQuery, searchParams = __rest(_a, ["customQuery"]);
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                apiSearchParams = __assign(__assign({}, searchParams), mapPaginationParams(searchParams));
                return [4 /*yield*/, context.$ct.api.getProduct(apiSearchParams, customQuery)];
            case 1:
                productResponse = _b.sent();
                enhancedProductResponse = enhanceProduct(productResponse, context);
                products = enhancedProductResponse.data._variants;
                return [2 /*return*/, products];
        }
    });
}); };
var useProduct = core.useProductFactory({
    productsSearch: productsSearch
});

/* istanbul ignore file */
var params$2 = {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    searchReviews: function (context, params) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            console.log('Mocked: searchReviews');
            return [2 /*return*/, {}];
        });
    }); },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    addReview: function (context, params) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            console.log('Mocked: addReview');
            return [2 /*return*/, {}];
        });
    }); }
};
var useReview = core.useReviewFactory(params$2);

var params$3 = {
    provide: function () {
        return {
            cart: useCart()
        };
    },
    load: function (context, _a) {
        var customQuery = _a.customQuery;
        return __awaiter(void 0, void 0, void 0, function () {
            var _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!!((_c = (_b = context.cart.cart) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.shippingAddress)) return [3 /*break*/, 2];
                        return [4 /*yield*/, context.cart.load({ customQuery: customQuery })];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2 /*return*/, context.cart.cart.value.shippingAddress];
                }
            });
        });
    },
    save: function (context, _a) {
        var shippingDetails = _a.shippingDetails, customQuery = _a.customQuery;
        return __awaiter(void 0, void 0, void 0, function () {
            var cartResponse;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, context.$ct.api.updateCart({
                            id: context.cart.cart.value.id,
                            version: context.cart.cart.value.version,
                            actions: [
                                commercetoolsApi.cartActions.setShippingMethodAction(),
                                commercetoolsApi.cartActions.setShippingAddressAction(shippingDetails)
                            ]
                        }, customQuery)];
                    case 1:
                        cartResponse = _b.sent();
                        context.cart.setCart(cartResponse.data.cart);
                        return [2 /*return*/, context.cart.cart.value.shippingAddress];
                }
            });
        });
    }
};
var index$1 = core.useShippingFactory(params$3);

var params$4 = {
    provide: function () {
        return {
            cart: useCart()
        };
    },
    load: function (context, _a) {
        var customQuery = _a.customQuery, state = _a.state;
        return __awaiter(void 0, void 0, void 0, function () {
            var _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!!((_c = (_b = context.cart.cart) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.shippingInfo)) return [3 /*break*/, 2];
                        return [4 /*yield*/, context.cart.load({ customQuery: customQuery })];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2 /*return*/, __assign(__assign({}, state.value), { response: context.cart.cart.value.shippingInfo })];
                }
            });
        });
    },
    save: function (context, _a) {
        var shippingMethod = _a.shippingMethod, customQuery = _a.customQuery, state = _a.state;
        return __awaiter(void 0, void 0, void 0, function () {
            var cartResponse;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, context.$ct.api.updateCart({
                            id: context.cart.cart.value.id,
                            version: context.cart.cart.value.version,
                            actions: [
                                commercetoolsApi.cartActions.setShippingMethodAction(shippingMethod.id)
                            ]
                        }, customQuery)];
                    case 1:
                        cartResponse = _b.sent();
                        context.cart.setCart(cartResponse.data.cart);
                        return [2 /*return*/, __assign(__assign({}, state.value), { response: context.cart.cart.value.shippingInfo })];
                }
            });
        });
    }
};
var index$2 = core.useShippingProviderFactory(params$4);

var params$5 = {
    provide: function () {
        return {
            cart: useCart()
        };
    },
    load: function (context, _a) {
        var customQuery = _a.customQuery;
        return __awaiter(void 0, void 0, void 0, function () {
            var _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!!((_c = (_b = context.cart.cart) === null || _b === void 0 ? void 0 : _b.value) === null || _c === void 0 ? void 0 : _c.billingAddress)) return [3 /*break*/, 2];
                        return [4 /*yield*/, context.cart.load({ customQuery: customQuery })];
                    case 1:
                        _d.sent();
                        _d.label = 2;
                    case 2: return [2 /*return*/, context.cart.cart.value.billingAddress];
                }
            });
        });
    },
    save: function (context, _a) {
        var billingDetails = _a.billingDetails, customQuery = _a.customQuery;
        return __awaiter(void 0, void 0, void 0, function () {
            var cartResponse;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, context.$ct.api.updateCart({
                            id: context.cart.cart.value.id,
                            version: context.cart.cart.value.version,
                            actions: [
                                commercetoolsApi.cartActions.setBillingAddressAction(billingDetails)
                            ]
                        }, customQuery)];
                    case 1:
                        cartResponse = _b.sent();
                        context.cart.setCart(cartResponse.data.cart);
                        return [2 /*return*/, context.cart.cart.value.billingAddress];
                }
            });
        });
    }
};
var index$3 = core.useBillingFactory(params$5);

var authenticate = function (userData, fn) { return __awaiter(void 0, void 0, void 0, function () {
    var userResponse, err_1;
    var _a, _b, _c, _d, _e;
    return __generator(this, function (_f) {
        switch (_f.label) {
            case 0:
                _f.trys.push([0, 2, , 3]);
                return [4 /*yield*/, fn(userData)];
            case 1:
                userResponse = _f.sent();
                return [2 /*return*/, userResponse.data.user];
            case 2:
                err_1 = _f.sent();
                err_1.message = ((_b = (_a = err_1 === null || err_1 === void 0 ? void 0 : err_1.graphQLErrors) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.message) || err_1.message;
                core.Logger.error('useUser.authenticate', err_1.message);
                throw ((_e = (_d = (_c = err_1 === null || err_1 === void 0 ? void 0 : err_1.response) === null || _c === void 0 ? void 0 : _c.data) === null || _d === void 0 ? void 0 : _d.graphQLErrors) === null || _e === void 0 ? void 0 : _e[0]) || err_1;
            case 3: return [2 /*return*/];
        }
    });
}); };

var load = function (context) { return __awaiter(void 0, void 0, void 0, function () {
    var isGuest, profile;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, context.$ct.api.isGuest()];
            case 1:
                isGuest = _a.sent();
                if (isGuest) {
                    return [2 /*return*/, null];
                }
                return [4 /*yield*/, context.$ct.api.getMe({ customer: true })];
            case 2:
                profile = _a.sent();
                return [2 /*return*/, profile.data.me.customer];
        }
    });
}); };
var getCurrentUser = function (context, currentUser) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (!currentUser) {
            return [2 /*return*/, load(context)];
        }
        return [2 /*return*/, currentUser];
    });
}); };
var params$6 = {
    provide: function () {
        return useCart();
    },
    load: load,
    logOut: function (context) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, context.$ct.api.customerSignOut()];
                case 1:
                    _a.sent();
                    context.setCart(null);
                    return [2 /*return*/];
            }
        });
    }); },
    updateUser: function (context, _a) {
        var currentUser = _a.currentUser, updatedUserData = _a.updatedUserData;
        return __awaiter(void 0, void 0, void 0, function () {
            var loadedUser, user;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, getCurrentUser(context, currentUser)];
                    case 1:
                        loadedUser = _b.sent();
                        return [4 /*yield*/, context.$ct.api.customerUpdateMe(loadedUser, updatedUserData)];
                    case 2:
                        user = (_b.sent()).user;
                        return [2 /*return*/, user];
                }
            });
        });
    },
    register: function (context, _a) {
        var email = _a.email, password = _a.password, firstName = _a.firstName, lastName = _a.lastName;
        return __awaiter(void 0, void 0, void 0, function () {
            var _b, customer, cart;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, authenticate({ email: email, password: password, firstName: firstName, lastName: lastName }, context.$ct.api.customerSignMeUp)];
                    case 1:
                        _b = _c.sent(), customer = _b.customer, cart = _b.cart;
                        context.setCart(cart);
                        return [2 /*return*/, customer];
                }
            });
        });
    },
    logIn: function (context, _a) {
        var username = _a.username, password = _a.password;
        return __awaiter(void 0, void 0, void 0, function () {
            var customerLogin, _b, customer, cart;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        customerLogin = { email: username, password: password };
                        return [4 /*yield*/, authenticate(customerLogin, context.$ct.api.customerSignMeIn)];
                    case 1:
                        _b = _c.sent(), customer = _b.customer, cart = _b.cart;
                        context.setCart(cart);
                        return [2 /*return*/, customer];
                }
            });
        });
    },
    changePassword: function changePassword(context, _a) {
        var currentUser = _a.currentUser, currentPassword = _a.currentPassword, newPassword = _a.newPassword;
        return __awaiter(this, void 0, void 0, function () {
            var loadedUser, userResponse;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, getCurrentUser(context, currentUser)];
                    case 1:
                        loadedUser = _b.sent();
                        return [4 /*yield*/, context.$ct.api.customerChangeMyPassword(loadedUser.version, currentPassword, newPassword)];
                    case 2:
                        userResponse = _b.sent();
                        // we do need to re-authenticate user to acquire new token - otherwise all subsequent requests will fail as unauthorized
                        return [4 /*yield*/, this.logOut(context)];
                    case 3:
                        // we do need to re-authenticate user to acquire new token - otherwise all subsequent requests will fail as unauthorized
                        _b.sent();
                        return [4 /*yield*/, params$6.logIn(context, { username: userResponse.data.user.email, password: newPassword })];
                    case 4: return [2 /*return*/, _b.sent()];
                }
            });
        });
    }
};

var index$4 = core.useUserFactory(params$6);

var addresses = [
    {
        id: '_1231231253623423',
        firstName: 'John',
        lastName: 'Doe',
        streetName: 'Warsawska',
        streetNumber: '24',
        apartment: '193A',
        city: 'Palo Alto',
        state: 'California',
        postalCode: '26-620',
        country: 'US',
        phone: '560123456',
        email: '',
        company: null,
        isDefault: true
    },
    {
        id: '_245463456456356',
        firstName: 'Jonatan',
        lastName: 'Doe',
        streetName: 'Starachowicka',
        streetNumber: '20',
        apartment: '193A',
        city: 'Las Vegas',
        state: 'Nevada',
        postalCode: '53-603',
        country: 'US',
        phone: '560123456',
        email: '',
        company: null,
        isDefault: true
    }
];
var billing = {
    addresses: addresses
};
var disableOldDefault = function () {
    var oldDefault = addresses.find(function (address) { return address.isDefault; });
    if (oldDefault) {
        oldDefault.isDefault = false;
    }
};
var sortDefaultAtTop = function (a, b) {
    if (a.isDefault) {
        return -1;
    }
    else if (b.isDefault) {
        return 1;
    }
    return 0;
};
var params$7 = {
    addAddress: function (context, params) { return __awaiter(void 0, void 0, void 0, function () {
        var newAddress;
        return __generator(this, function (_a) {
            console.log('Mocked: addAddress', params.address);
            newAddress = __assign(__assign({}, params.address), { id: makeId() });
            if (params.address.isDefault) {
                disableOldDefault();
                addresses.unshift(newAddress);
            }
            else {
                addresses.push(newAddress);
            }
            return [2 /*return*/, Promise.resolve(billing)];
        });
    }); },
    deleteAddress: function (context, params) { return __awaiter(void 0, void 0, void 0, function () {
        var indexToRemove;
        return __generator(this, function (_a) {
            console.log('Mocked: deleteAddress', params);
            indexToRemove = addresses.findIndex(function (address) { return address.id === params.address.id; });
            if (indexToRemove < 0) {
                return [2 /*return*/, Promise.reject('This address does not exist')];
            }
            addresses.splice(indexToRemove, 1);
            return [2 /*return*/, Promise.resolve(billing)];
        });
    }); },
    updateAddress: function (context, params) { return __awaiter(void 0, void 0, void 0, function () {
        var indexToUpdate, isNewDefault;
        return __generator(this, function (_a) {
            console.log('Mocked: updateAddress', params);
            indexToUpdate = addresses.findIndex(function (address) { return address.id === params.address.id; });
            if (indexToUpdate < 0) {
                return [2 /*return*/, Promise.reject('This address does not exist')];
            }
            isNewDefault = params.address.isDefault && addresses[0].id !== params.address.id;
            if (isNewDefault) {
                disableOldDefault();
            }
            addresses[indexToUpdate] = params.address;
            if (isNewDefault) {
                addresses.sort(sortDefaultAtTop);
            }
            return [2 /*return*/, Promise.resolve(billing)];
        });
    }); },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    load: function (context, params) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            console.log('Mocked: load');
            return [2 /*return*/, Promise.resolve(billing)];
        });
    }); },
    setDefaultAddress: function (context, params) { return __awaiter(void 0, void 0, void 0, function () {
        var isDefault, indexToUpdate;
        return __generator(this, function (_a) {
            console.log('Mocked: setDefaultAddress');
            isDefault = function (id) { return addresses[0].id === id; };
            if (!isDefault(params.address.id)) {
                indexToUpdate = addresses.findIndex(function (address) { return address.id === params.address.id; });
                if (indexToUpdate < 0) {
                    return [2 /*return*/, Promise.reject('This address does not exist')];
                }
                disableOldDefault();
                addresses[indexToUpdate].isDefault = true;
                addresses.sort(sortDefaultAtTop);
            }
            return [2 /*return*/, Promise.resolve(billing)];
        });
    }); }
};
var index$5 = core.useUserBillingFactory(params$7);

var params$8 = {
    searchOrders: function (context, _a) {
        var _b;
        if (_a === void 0) { _a = {}; }
        return __awaiter(void 0, void 0, void 0, function () {
            var result, data;
            var customQuery = _a.customQuery, searchParams = __rest(_a, ["customQuery"]);
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, context.$ct.api.getOrders(searchParams, customQuery)];
                    case 1:
                        result = _c.sent();
                        data = (((_b = result.data) === null || _b === void 0 ? void 0 : _b.me.orders) || { results: [], total: 0 }).results;
                        return [2 /*return*/, data];
                }
            });
        });
    }
};
var index$6 = core.useUserOrderFactory(params$8);

var addresses$1 = [
    {
        id: '_1231231253623423',
        firstName: 'John',
        lastName: 'Doe',
        streetName: 'Warsawska',
        streetNumber: '193A',
        apartment: '193A',
        city: 'Palo Alto',
        state: 'California',
        postalCode: '26-620',
        country: 'US',
        phone: '560123456',
        email: '',
        company: null,
        isDefault: true
    },
    {
        id: '_245463456456356',
        firstName: 'Jonatan',
        lastName: 'Doe',
        streetName: 'Starachowicka',
        streetNumber: '193A',
        apartment: '193A',
        city: 'Las Vegas',
        state: 'Nevada',
        postalCode: '53-603',
        country: 'US',
        phone: '560123456',
        email: '',
        company: null,
        isDefault: true
    }
];
var shipping = {
    addresses: addresses$1
};
var disableOldDefault$1 = function () {
    var oldDefault = addresses$1.find(function (address) { return address.isDefault; });
    if (oldDefault) {
        oldDefault.isDefault = false;
    }
};
var sortDefaultAtTop$1 = function (a, b) {
    if (a.isDefault) {
        return -1;
    }
    else if (b.isDefault) {
        return 1;
    }
    return 0;
};
var params$9 = {
    addAddress: function (context, params) { return __awaiter(void 0, void 0, void 0, function () {
        var newAddress;
        return __generator(this, function (_a) {
            console.log('Mocked: addAddress', params.address);
            newAddress = __assign(__assign({}, params.address), { id: makeId() });
            if (params.address.isDefault) {
                disableOldDefault$1();
                addresses$1.unshift(newAddress);
            }
            else {
                addresses$1.push(newAddress);
            }
            return [2 /*return*/, Promise.resolve(shipping)];
        });
    }); },
    deleteAddress: function (context, params) { return __awaiter(void 0, void 0, void 0, function () {
        var indexToRemove;
        return __generator(this, function (_a) {
            console.log('Mocked: deleteAddress', params);
            indexToRemove = addresses$1.findIndex(function (address) { return address.id === params.address.id; });
            if (indexToRemove < 0) {
                return [2 /*return*/, Promise.reject('This address does not exist')];
            }
            addresses$1.splice(indexToRemove, 1);
            return [2 /*return*/, Promise.resolve(shipping)];
        });
    }); },
    updateAddress: function (context, params) { return __awaiter(void 0, void 0, void 0, function () {
        var indexToUpdate, isNewDefault;
        return __generator(this, function (_a) {
            console.log('Mocked: updateAddress', params);
            indexToUpdate = addresses$1.findIndex(function (address) { return address.id === params.address.id; });
            if (indexToUpdate < 0) {
                return [2 /*return*/, Promise.reject('This address does not exist')];
            }
            isNewDefault = params.address.isDefault && addresses$1[0].id !== params.address.id;
            if (isNewDefault) {
                disableOldDefault$1();
            }
            addresses$1[indexToUpdate] = params.address;
            if (isNewDefault) {
                addresses$1.sort(sortDefaultAtTop$1);
            }
            return [2 /*return*/, Promise.resolve(shipping)];
        });
    }); },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    load: function (context, params) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            console.log('Mocked: load');
            return [2 /*return*/, Promise.resolve(shipping)];
        });
    }); },
    setDefaultAddress: function (context, params) { return __awaiter(void 0, void 0, void 0, function () {
        var isDefault, indexToUpdate;
        return __generator(this, function (_a) {
            console.log('Mocked: setDefaultAddress');
            isDefault = function (id) { return addresses$1[0].id === id; };
            if (!isDefault(params.address.id)) {
                indexToUpdate = addresses$1.findIndex(function (address) { return address.id === params.address.id; });
                if (indexToUpdate < 0) {
                    return [2 /*return*/, Promise.reject('This address does not exist')];
                }
                disableOldDefault$1();
                addresses$1[indexToUpdate].isDefault = true;
                addresses$1.sort(sortDefaultAtTop$1);
            }
            return [2 /*return*/, Promise.resolve(shipping)];
        });
    }); }
};
var index$7 = core.useUserShippingFactory(params$9);

/* istanbul ignore file */
// @todo: implement wishlist
// https://github.com/DivanteLtd/vue-storefront/issues/4420
var params$a = {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    load: function (context) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, {}];
        });
    }); },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    addItem: function (context, _a) {
        var currentWishlist = _a.currentWishlist, product = _a.product;
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, {}];
            });
        });
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    removeItem: function (context, _a) {
        var currentWishlist = _a.currentWishlist, product = _a.product;
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, {}];
            });
        });
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    clear: function (context, _a) {
        var currentWishlist = _a.currentWishlist;
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_b) {
                return [2 /*return*/, {}];
            });
        });
    },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    isInWishlist: function (context, _a) {
        var currentWishlist = _a.currentWishlist;
        return false;
    }
};
var index$8 = core.useWishlistFactory(params$a);

var getProductName = function (product) { var _a; return ((_a = product) === null || _a === void 0 ? void 0 : _a._name) || ''; };
var getProductSlug = function (product) { var _a; return ((_a = product) === null || _a === void 0 ? void 0 : _a._slug) || ''; };
var getProductPrice = function (product) { return createPrice(product); };
var getProductGallery = function (product) {
    var images = (product === null || product === void 0 ? void 0 : product.images) || [];
    return images.map(function (image) { return ({
        small: image.url,
        big: image.url,
        normal: image.url
    }); });
};
var getProductCoverImage = function (product) { var _a, _b; return ((_b = (_a = product === null || product === void 0 ? void 0 : product.images) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.url) || ''; };
var getProductFiltered = function (products, filters) {
    if (filters === void 0) { filters = {}; }
    if (!products) {
        return [];
    }
    if (filters.attributes && Object.keys(filters.attributes).length > 0) {
        return [getVariantByAttributes(products, filters.attributes)];
    }
    if (filters.master) {
        return products.filter(function (product) { return product._master; });
    }
    return products;
};
var getProductAttributes = function (products, filterByAttributeName) {
    var isSingleProduct = !Array.isArray(products);
    var productList = (isSingleProduct ? [products] : products);
    if (!products || productList.length === 0) {
        return {};
    }
    var formatAttributes = function (product) {
        return formatAttributeList(product.attributesRaw).filter(function (attribute) { return filterByAttributeName ? filterByAttributeName.includes(attribute.name) : attribute; });
    };
    var reduceToUniques = function (prev, curr) {
        var isAttributeExist = prev.some(function (el) { return el.name === curr.name && el.value === curr.value; });
        if (!isAttributeExist) {
            return __spreadArray(__spreadArray([], prev), [curr]);
        }
        return prev;
    };
    var reduceByAttributeName = function (prev, curr) {
        var _a;
        return (__assign(__assign({}, prev), (_a = {}, _a[curr.name] = isSingleProduct ? curr.value : __spreadArray(__spreadArray([], (prev[curr.name] || [])), [
            {
                value: curr.value,
                label: curr.label
            }
        ]), _a)));
    };
    return productList
        .map(function (product) { return formatAttributes(product); })
        .reduce(function (prev, curr) { return __spreadArray(__spreadArray([], prev), curr); }, [])
        .reduce(reduceToUniques, [])
        .reduce(reduceByAttributeName, {});
};
var getProductDescription = function (product) { var _a; return ((_a = product) === null || _a === void 0 ? void 0 : _a._description) || ''; };
var getProductCategoryIds = function (product) { var _a; return ((_a = product) === null || _a === void 0 ? void 0 : _a._categoriesRef) || ''; };
var getProductId = function (product) { var _a; return ((_a = product) === null || _a === void 0 ? void 0 : _a._id) || ''; };
var getFormattedPrice = function (price) { return price; };
var getTotalReviews = function (product) { var _a, _b; return ((_b = (_a = product) === null || _a === void 0 ? void 0 : _a._rating) === null || _b === void 0 ? void 0 : _b.count) || 0; };
var getAverageRating = function (product) { var _a, _b; return ((_b = (_a = product) === null || _a === void 0 ? void 0 : _a._rating) === null || _b === void 0 ? void 0 : _b.averageRating) || 0; };
var productGetters = {
    getName: getProductName,
    getSlug: getProductSlug,
    getPrice: getProductPrice,
    getGallery: getProductGallery,
    getCoverImage: getProductCoverImage,
    getFiltered: getProductFiltered,
    getAttributes: getProductAttributes,
    getDescription: getProductDescription,
    getCategoryIds: getProductCategoryIds,
    getId: getProductId,
    getFormattedPrice: getFormattedPrice,
    getTotalReviews: getTotalReviews,
    getAverageRating: getAverageRating
};

var getCartItems = function (cart) {
    if (!cart) {
        return [];
    }
    return cart.lineItems;
};
var getCartItemName = function (product) { return (product === null || product === void 0 ? void 0 : product.name) || ''; };
var getCartItemImage = function (product) { var _a, _b; return ((_b = (_a = product === null || product === void 0 ? void 0 : product.variant) === null || _a === void 0 ? void 0 : _a.images[0]) === null || _b === void 0 ? void 0 : _b.url) || ''; };
var getCartItemPrice = function (product) { return createPrice(product); };
var getCartItemQty = function (product) { return (product === null || product === void 0 ? void 0 : product.quantity) || 0; };
var getCartItemAttributes = function (product, filterByAttributeName) {
    return getProductAttributes(product.variant, filterByAttributeName);
};
var getCartItemSku = function (product) { var _a; return ((_a = product === null || product === void 0 ? void 0 : product.variant) === null || _a === void 0 ? void 0 : _a.sku) || ''; };
var getCartSubtotalPrice = function (cart, selectSpecialPrices) {
    if (selectSpecialPrices === void 0) { selectSpecialPrices = false; }
    return getCartItems(cart).reduce(function (total, cartItem) {
        var _a = getCartItemPrice(cartItem), special = _a.special, regular = _a.regular;
        return total + (selectSpecialPrices && special ? special : regular);
    }, 0);
};
var getCartTotals = function (cart) {
    if (!cart) {
        return {
            total: 0,
            subtotal: 0,
            special: 0
        };
    }
    return {
        total: cart.totalPrice.centAmount / 100,
        subtotal: getCartSubtotalPrice(cart),
        special: getCartSubtotalPrice(cart, true)
    };
};
var getCartShippingPrice = function (cart) {
    var _a, _b, _c;
    var total = (_a = cart === null || cart === void 0 ? void 0 : cart.totalPrice) === null || _a === void 0 ? void 0 : _a.centAmount;
    var shippingInfo = cart === null || cart === void 0 ? void 0 : cart.shippingInfo;
    var centAmount = (_c = (_b = shippingInfo === null || shippingInfo === void 0 ? void 0 : shippingInfo.shippingMethod) === null || _b === void 0 ? void 0 : _b.zoneRates[0].shippingRates[0].freeAbove) === null || _c === void 0 ? void 0 : _c.centAmount;
    if (!shippingInfo || !total || (centAmount && total >= centAmount)) {
        return 0;
    }
    return shippingInfo.price.centAmount / 100;
};
var getCartTotalItems = function (cart) {
    if (!cart) {
        return 0;
    }
    return cart.lineItems.reduce(function (previous, current) { return previous + current.quantity; }, 0);
};
var getFormattedPrice$1 = function (price) { return price; };
var getCoupons = function (cart) {
    return getCouponsFromCart(cart);
};
// eslint-disable-next-line
var getDiscounts = function (cart) {
    return [];
};
var cartGetters = {
    getTotals: getCartTotals,
    getShippingPrice: getCartShippingPrice,
    getItems: getCartItems,
    getItemName: getCartItemName,
    getItemImage: getCartItemImage,
    getItemPrice: getCartItemPrice,
    getItemQty: getCartItemQty,
    getItemAttributes: getCartItemAttributes,
    getItemSku: getCartItemSku,
    getTotalItems: getCartTotalItems,
    getFormattedPrice: getFormattedPrice$1,
    getCoupons: getCoupons,
    getDiscounts: getDiscounts
};

var getCategoryTree = function (category) {
    var getRoot = function (category) { return (category.parent ? getRoot(category.parent) : category); };
    var buildTree = function (rootCategory) { return ({
        label: rootCategory.name,
        slug: rootCategory.slug,
        id: rootCategory.id,
        isCurrent: rootCategory.id === category.id,
        items: rootCategory.children.map(buildTree)
    }); };
    if (!category) {
        return null;
    }
    return buildTree(getRoot(category));
};
var categoryGetters = {
    getTree: getCategoryTree
};

/* istanbul ignore file */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getItems = function (review) { return []; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getReviewId = function (item) { return ''; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getReviewAuthor = function (item) { return ''; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getReviewMessage = function (item) { return ''; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getReviewRating = function (item) { return 0; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getReviewDate = function (item) { return ''; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getTotalReviews$1 = function (review) { return 0; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getAverageRating$1 = function (review) { return 0; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getRatesCount = function (review) { return []; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getReviewsPage = function (review) { return 1; };
var reviewGetters = {
    getItems: getItems,
    getReviewId: getReviewId,
    getReviewAuthor: getReviewAuthor,
    getReviewMessage: getReviewMessage,
    getReviewRating: getReviewRating,
    getReviewDate: getReviewDate,
    getTotalReviews: getTotalReviews$1,
    getAverageRating: getAverageRating$1,
    getRatesCount: getRatesCount,
    getReviewsPage: getReviewsPage
};

var getUserFirstName = function (user) { return (user === null || user === void 0 ? void 0 : user.firstName) || ''; };
var getUserLastName = function (user) { return (user === null || user === void 0 ? void 0 : user.lastName) || ''; };
var getUserFullName = function (user) { return user ? user.firstName + " " + user.lastName : ''; };
var getUserEmailAddress = function (user) { return (user === null || user === void 0 ? void 0 : user.email) || ''; };
var userGetters = {
    getFirstName: getUserFirstName,
    getLastName: getUserLastName,
    getFullName: getUserFullName,
    getEmailAddress: getUserEmailAddress
};

var userShippingGetters = {
    getAddresses: function (shipping, criteria) {
        if (!criteria || !Object.keys(criteria).length) {
            return shipping.addresses;
        }
        var entries = Object.entries(criteria);
        return shipping.addresses.filter(function (address) { return entries.every(function (_a) {
            var key = _a[0], value = _a[1];
            return address[key] === value;
        }); });
    },
    getDefault: function (shipping) { return shipping.addresses.find(function (_a) {
        var isDefault = _a.isDefault;
        return isDefault;
    }); },
    getTotal: function (shipping) { return shipping.addresses.length; },
    getPostCode: function (address) { return (address === null || address === void 0 ? void 0 : address.postalCode) || ''; },
    getStreetName: function (address) { return (address === null || address === void 0 ? void 0 : address.streetName) || ''; },
    getStreetNumber: function (address) { return (address === null || address === void 0 ? void 0 : address.streetNumber) || ''; },
    getCity: function (address) { return (address === null || address === void 0 ? void 0 : address.city) || ''; },
    getFirstName: function (address) { return (address === null || address === void 0 ? void 0 : address.firstName) || ''; },
    getLastName: function (address) { return (address === null || address === void 0 ? void 0 : address.lastName) || ''; },
    getCountry: function (address) { return (address === null || address === void 0 ? void 0 : address.country) || ''; },
    getPhone: function (address) { return (address === null || address === void 0 ? void 0 : address.phone) || ''; },
    getEmail: function (address) { return (address === null || address === void 0 ? void 0 : address.email) || ''; },
    getProvince: function (address) { return (address === null || address === void 0 ? void 0 : address.state) || ''; },
    getCompanyName: function (address) { return (address === null || address === void 0 ? void 0 : address.company) || ''; },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getTaxNumber: function (address) { return ''; },
    getId: function (address) { return (address === null || address === void 0 ? void 0 : address.id) || ''; },
    getApartmentNumber: function (address) { return (address === null || address === void 0 ? void 0 : address.apartment) || ''; },
    isDefault: function (address) { return (address === null || address === void 0 ? void 0 : address.isDefault) || false; }
};

var userBillingGetters = {
    getAddresses: function (billing, criteria) {
        if (!criteria || !Object.keys(criteria).length) {
            return billing.addresses;
        }
        var entries = Object.entries(criteria);
        return billing.addresses.filter(function (address) { return entries.every(function (_a) {
            var key = _a[0], value = _a[1];
            return address[key] === value;
        }); });
    },
    getDefault: function (billing) { return billing.addresses.find(function (_a) {
        var isDefault = _a.isDefault;
        return isDefault;
    }); },
    getTotal: function (billing) { return billing.addresses.length; },
    getPostCode: function (address) { return (address === null || address === void 0 ? void 0 : address.postalCode) || ''; },
    getStreetName: function (address) { return (address === null || address === void 0 ? void 0 : address.streetName) || ''; },
    getStreetNumber: function (address) { return (address === null || address === void 0 ? void 0 : address.streetNumber) || ''; },
    getCity: function (address) { return (address === null || address === void 0 ? void 0 : address.city) || ''; },
    getFirstName: function (address) { return (address === null || address === void 0 ? void 0 : address.firstName) || ''; },
    getLastName: function (address) { return (address === null || address === void 0 ? void 0 : address.lastName) || ''; },
    getCountry: function (address) { return (address === null || address === void 0 ? void 0 : address.country) || ''; },
    getPhone: function (address) { return (address === null || address === void 0 ? void 0 : address.phone) || ''; },
    getEmail: function (address) { return (address === null || address === void 0 ? void 0 : address.email) || ''; },
    getProvince: function (address) { return (address === null || address === void 0 ? void 0 : address.state) || ''; },
    getCompanyName: function (address) { return (address === null || address === void 0 ? void 0 : address.company) || ''; },
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    getTaxNumber: function (address) { return ''; },
    getId: function (address) { return (address === null || address === void 0 ? void 0 : address.id) || ''; },
    getApartmentNumber: function (address) { return (address === null || address === void 0 ? void 0 : address.apartment) || ''; },
    isDefault: function (address) { return (address === null || address === void 0 ? void 0 : address.isDefault) || false; }
};

/* istanbul ignore file */
var AnonymousCartSignInMode;
(function (AnonymousCartSignInMode) {
    /** The anonymous cart is used as new active customer cart. No `LineItem`s get merged. */
    AnonymousCartSignInMode["UseAsNewActiveCustomerCart"] = "UseAsNewActiveCustomerCart";
    /** `LineItem`s of the anonymous cart will be copied to the customer’s active cart that has been modified most recently.
     *
     * The `CartState` of the anonymous cart gets changed to `Merged` while the
     * `CartState` of the customer’s cart remains `Active`.
     *
     * `CustomLineItems` and `CustomFields` of the anonymous cart will not be copied to the customers cart.
     *
     * If a `LineItem` in the anonymous cart matches an existing line item in the
     * customer’s cart (same product ID and variant ID), the maximum quantity of both
     * LineItems is used as the new quantity. In that case `CustomFields` on the
     * `LineItem` of the anonymous cart will not be in the resulting `LineItem`.
     */
    AnonymousCartSignInMode["MergeWithExistingCustomerCart"] = "MergeWithExistingCustomerCart";
})(AnonymousCartSignInMode || (AnonymousCartSignInMode = {}));
var AttributeConstraint;
(function (AttributeConstraint) {
    /** No constraints are applied to the attribute */
    AttributeConstraint["None"] = "None";
    /** Attribute value should be different in each variant */
    AttributeConstraint["Unique"] = "Unique";
    /** A set of attributes, that have this constraint, should have different combinations in each variant */
    AttributeConstraint["CombinationUnique"] = "CombinationUnique";
    /** Attribute value should be the same in all variants */
    AttributeConstraint["SameForAll"] = "SameForAll";
})(AttributeConstraint || (AttributeConstraint = {}));
var CartOrigin;
(function (CartOrigin) {
    /** The cart was created by the merchant on behalf of the customer */
    CartOrigin["Merchant"] = "Merchant";
    /** The cart was created by the customer. This is the default value */
    CartOrigin["Customer"] = "Customer";
})(CartOrigin || (CartOrigin = {}));
var CartState;
(function (CartState) {
    /** The cart was ordered. No further operations on the cart are allowed. */
    CartState["Ordered"] = "Ordered";
    /** Anonymous cart whose content was merged into a customers cart on signin. No further operations on the cart are allowed. */
    CartState["Merged"] = "Merged";
    /** The cart can be updated and ordered. It is the default state. */
    CartState["Active"] = "Active";
})(CartState || (CartState = {}));
var ChannelRole;
(function (ChannelRole) {
    /** Role tells that this channel can be used to track inventory entries.Channels with this role can be treated as warehouses */
    ChannelRole["InventorySupply"] = "InventorySupply";
    /** Role tells that this channel can be used to expose products to a specific
     * distribution channel. It can be used by the cart to select a product price.
     */
    ChannelRole["ProductDistribution"] = "ProductDistribution";
    /** Role tells that this channel can be used to track order export activities. */
    ChannelRole["OrderExport"] = "OrderExport";
    /** Role tells that this channel can be used to track order import activities. */
    ChannelRole["OrderImport"] = "OrderImport";
    /** This role can be combined with some other roles (e.g. with `InventorySupply`)
     * to represent the fact that this particular channel is the primary/master
     * channel among the channels of the same type.
     */
    ChannelRole["Primary"] = "Primary";
})(ChannelRole || (ChannelRole = {}));
var DiscountCodeState;
(function (DiscountCodeState) {
    /** The discount code is active and none of the discounts were applied because the
     * discount application was stopped by one discount that has the StackingMode of
     * StopAfterThisDiscount defined
     */
    DiscountCodeState["ApplicationStoppedByPreviousDiscount"] = "ApplicationStoppedByPreviousDiscount";
    /** The discount code is not valid or it does not contain any valid cart
     * discounts. Validity is determined based on the validFrom and validUntil dates
     */
    DiscountCodeState["NotValid"] = "NotValid";
    /** maxApplications or maxApplicationsPerCustomer for discountCode has been reached. */
    DiscountCodeState["MaxApplicationReached"] = "MaxApplicationReached";
    /** The discount code is active and it contains at least one active and valid
     * CartDiscount. The discount code cartPredicate matches the cart and at least
     * one of the contained active discount’s cart predicates matches the cart.
     */
    DiscountCodeState["MatchesCart"] = "MatchesCart";
    /** The discount code is active and it contains at least one active and valid
     * CartDiscount. But its cart predicate does not match the cart or none of the
     * contained active discount’s cart predicates match the cart
     */
    DiscountCodeState["DoesNotMatchCart"] = "DoesNotMatchCart";
    /** The discount code is not active or it does not contain any active cart discounts. */
    DiscountCodeState["NotActive"] = "NotActive";
})(DiscountCodeState || (DiscountCodeState = {}));
var InventoryMode;
(function (InventoryMode) {
    /** Adding items to cart and ordering is independent of inventory. No inventory checks or modifications.
     * This is the default mode for a new cart.
     */
    InventoryMode["None"] = "None";
    /** Creating an order will fail with an OutOfStock error if an unavailable line item exists. Line items in the cart
     * are only reserved for the duration of the ordering transaction.
     */
    InventoryMode["ReserveOnOrder"] = "ReserveOnOrder";
    /** Orders are tracked on inventory. That means, ordering a LineItem will decrement the available quantity on the
     * respective InventoryEntry. Creating an order will succeed even if the line item’s available quantity is zero or
     * negative. But creating an order will fail with an OutOfStock error if no matching inventory entry exists for a
     * line item.
     */
    InventoryMode["TrackOnly"] = "TrackOnly";
})(InventoryMode || (InventoryMode = {}));
var LineItemMode;
(function (LineItemMode) {
    /** The line item was added automatically, because a discount has added a free gift to the cart.
     * The quantity can not be increased, and it won’t be merged when the same product variant is added.
     * If the gift is removed, an entry is added to the "refusedGifts" array and the discount won’t be applied again
     * to the cart. The price can not be changed externally.
     * All other updates, such as the ones related to custom fields, can be used.
     */
    LineItemMode["GiftLineItem"] = "GiftLineItem";
    /** The line item was added during cart creation or with the update action addLineItem. Its quantity can be
     * changed without restrictions.
     */
    LineItemMode["Standard"] = "Standard";
})(LineItemMode || (LineItemMode = {}));
var LineItemPriceMode;
(function (LineItemPriceMode) {
    /** The price is selected form the product variant. This is the default mode. */
    LineItemPriceMode["Platform"] = "Platform";
    /** The line item price was set externally. Cart discounts can apply to line items
     * with this price mode. All update actions that change the quantity of a line
     * item with this price mode require the externalPrice field to be given.
     */
    LineItemPriceMode["ExternalPrice"] = "ExternalPrice";
    /** The line item price with the total was set externally. */
    LineItemPriceMode["ExternalTotal"] = "ExternalTotal";
})(LineItemPriceMode || (LineItemPriceMode = {}));
var OrderState;
(function (OrderState) {
    OrderState["Confirmed"] = "Confirmed";
    OrderState["Cancelled"] = "Cancelled";
    OrderState["Complete"] = "Complete";
    OrderState["Open"] = "Open";
})(OrderState || (OrderState = {}));
var PaymentState;
(function (PaymentState) {
    PaymentState["Paid"] = "Paid";
    PaymentState["CreditOwed"] = "CreditOwed";
    PaymentState["Pending"] = "Pending";
    PaymentState["Failed"] = "Failed";
    PaymentState["BalanceDue"] = "BalanceDue";
})(PaymentState || (PaymentState = {}));
var PublishScope;
(function (PublishScope) {
    /** Publishes the complete staged projection */
    PublishScope["All"] = "All";
    /** Publishes only prices on the staged projection */
    PublishScope["Prices"] = "Prices";
})(PublishScope || (PublishScope = {}));
var ReturnPaymentState;
(function (ReturnPaymentState) {
    ReturnPaymentState["NotRefunded"] = "NotRefunded";
    ReturnPaymentState["Refunded"] = "Refunded";
    ReturnPaymentState["Initial"] = "Initial";
    ReturnPaymentState["NonRefundable"] = "NonRefundable";
})(ReturnPaymentState || (ReturnPaymentState = {}));
var ReturnShipmentState;
(function (ReturnShipmentState) {
    ReturnShipmentState["Unusable"] = "Unusable";
    ReturnShipmentState["BackInStock"] = "BackInStock";
    ReturnShipmentState["Returned"] = "Returned";
    ReturnShipmentState["Advised"] = "Advised";
})(ReturnShipmentState || (ReturnShipmentState = {}));
var RoundingMode;
(function (RoundingMode) {
    /** [Round half down](https://en.wikipedia.org/wiki/Rounding#Round_half_down).
     * Rounding mode used by, e.g., [Avalara Sales TaxII](https://help.avalara.com/kb/001/How_does_Rounding_with_SalesTaxII_work%3F)
     */
    RoundingMode["HalfDown"] = "HalfDown";
    /** [Round half up](https://en.wikipedia.org/wiki/Rounding#Round_half_up) */
    RoundingMode["HalfUp"] = "HalfUp";
    /** [Round half to even](https://en.wikipedia.org/wiki/Rounding#Round_half_to_even).
     * Default rounding mode as used in IEEE 754 computing functions and operators.
     */
    RoundingMode["HalfEven"] = "HalfEven";
})(RoundingMode || (RoundingMode = {}));
/** In order to decide which of the matching items will actually be discounted */
var SelectionMode;
(function (SelectionMode) {
    SelectionMode["MostExpensive"] = "MostExpensive";
    SelectionMode["Cheapest"] = "Cheapest";
})(SelectionMode || (SelectionMode = {}));
var ShipmentState;
(function (ShipmentState) {
    ShipmentState["Delayed"] = "Delayed";
    ShipmentState["Backorder"] = "Backorder";
    ShipmentState["Partial"] = "Partial";
    ShipmentState["Pending"] = "Pending";
    ShipmentState["Ready"] = "Ready";
    ShipmentState["Shipped"] = "Shipped";
})(ShipmentState || (ShipmentState = {}));
var ShippingMethodState;
(function (ShippingMethodState) {
    /** Either there is no predicate defined for the ShippingMethod or the given predicate matches the cart */
    ShippingMethodState["MatchesCart"] = "MatchesCart";
    /** The ShippingMethod predicate does not match the cart. Ordering this cart will
     * fail with error ShippingMethodDoesNotMatchCart
     */
    ShippingMethodState["DoesNotMatchCart"] = "DoesNotMatchCart";
})(ShippingMethodState || (ShippingMethodState = {}));
/** Describes how this discount interacts with other discounts */
var StackingMode;
(function (StackingMode) {
    /** Don’t apply any more matching discounts after this one. */
    StackingMode["StopAfterThisDiscount"] = "StopAfterThisDiscount";
    /** Default. Continue applying other matching discounts after applying this one. */
    StackingMode["Stacking"] = "Stacking";
})(StackingMode || (StackingMode = {}));
var StateRole;
(function (StateRole) {
    StateRole["Return"] = "Return";
    StateRole["ReviewIncludedInStatistics"] = "ReviewIncludedInStatistics";
})(StateRole || (StateRole = {}));
var StateType;
(function (StateType) {
    StateType["OrderState"] = "OrderState";
    StateType["ProductState"] = "ProductState";
    StateType["ReviewState"] = "ReviewState";
    StateType["PaymentState"] = "PaymentState";
    StateType["LineItemState"] = "LineItemState";
})(StateType || (StateType = {}));
var TaxCalculationMode;
(function (TaxCalculationMode) {
    /** This calculation mode calculates the taxes on the unit price before multiplying with the quantity.
     * E.g. `($1.08 * 1.19 = $1.2852 -> $1.29 rounded) * 3 = $3.87`
     */
    TaxCalculationMode["UnitPriceLevel"] = "UnitPriceLevel";
    /** Default. This calculation mode calculates the taxes after the unit price is multiplied with the quantity.
     * E.g. `($1.08 * 3 = $3.24) * 1.19 = $3.8556 -> $3.86 rounded`
     */
    TaxCalculationMode["LineItemLevel"] = "LineItemLevel";
})(TaxCalculationMode || (TaxCalculationMode = {}));
var TaxMode;
(function (TaxMode) {
    /** No taxes are added to the cart. */
    TaxMode["Disabled"] = "Disabled";
    /** The tax amounts and the tax rates as well as the tax portions are set externally per ExternalTaxAmountDraft.
     * A cart with this tax mode can only be ordered if the cart itself and all line items, all custom line items and
     * the shipping method have an external tax amount and rate set
     */
    TaxMode["ExternalAmount"] = "ExternalAmount";
    /** The tax rates are set externally per ExternalTaxRateDraft. A cart with this tax mode can only be ordered if all
     * line items, all custom line items and the shipping method have an external tax rate set. The totalNet and
     * totalGross as well as the taxPortions fields are calculated by the platform according to the taxRoundingMode.
     */
    TaxMode["External"] = "External";
    /** The tax rates are selected by the platform from the TaxCategories based on the cart shipping address.
     * The totalNet and totalGross as well as the taxPortions fields are calculated by the platform according to the
     * taxRoundingMode.
     */
    TaxMode["Platform"] = "Platform";
})(TaxMode || (TaxMode = {}));
/** UI hint telling what kind of edit control should be displayed for a text attribute. */
var TextInputHint;
(function (TextInputHint) {
    TextInputHint["MultiLine"] = "MultiLine";
    TextInputHint["SingleLine"] = "SingleLine";
})(TextInputHint || (TextInputHint = {}));
var TransactionState;
(function (TransactionState) {
    TransactionState["Failure"] = "Failure";
    TransactionState["Success"] = "Success";
    TransactionState["Pending"] = "Pending";
    TransactionState["Initial"] = "Initial";
})(TransactionState || (TransactionState = {}));
var TransactionType;
(function (TransactionType) {
    TransactionType["Chargeback"] = "Chargeback";
    TransactionType["Refund"] = "Refund";
    TransactionType["Charge"] = "Charge";
    TransactionType["CancelAuthorization"] = "CancelAuthorization";
    TransactionType["Authorization"] = "Authorization";
})(TransactionType || (TransactionType = {}));

var _a;
var getOrderDate = function (order) { return (order === null || order === void 0 ? void 0 : order.createdAt) || ''; };
var getOrderId = function (order) { return (order === null || order === void 0 ? void 0 : order.id) || ''; };
var orderStatusMap = (_a = {},
    _a[OrderState.Open] = core.AgnosticOrderStatus.Open,
    _a[OrderState.Confirmed] = core.AgnosticOrderStatus.Confirmed,
    _a[OrderState.Complete] = core.AgnosticOrderStatus.Complete,
    _a[OrderState.Cancelled] = core.AgnosticOrderStatus.Cancelled,
    _a);
var getOrderStatus = function (order) { return (order === null || order === void 0 ? void 0 : order.orderState) ? orderStatusMap[order.orderState] : ''; };
var getOrderPrice = function (order) { return order ? order.totalPrice.centAmount / 100 : 0; };
var getOrderItems = function (order) { return (order === null || order === void 0 ? void 0 : order.lineItems) || []; };
var getOrderItemSku = function (item) { return (item === null || item === void 0 ? void 0 : item.productId) || ''; };
var getOrderItemName = function (item) { return (item === null || item === void 0 ? void 0 : item.name) || ''; };
var getOrderItemQty = function (item) { return (item === null || item === void 0 ? void 0 : item.quantity) || 0; };
var getOrderItemPrice = function (item) { return item ? item.price.value.centAmount / 100 : 0; };
var getFormattedPrice$2 = function (price) { return price; };
var orderGetters = {
    getDate: getOrderDate,
    getId: getOrderId,
    getStatus: getOrderStatus,
    getPrice: getOrderPrice,
    getItems: getOrderItems,
    getItemSku: getOrderItemSku,
    getItemName: getOrderItemName,
    getItemQty: getOrderItemQty,
    getItemPrice: getOrderItemPrice,
    getFormattedPrice: getFormattedPrice$2
};

/* istanbul ignore file */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getWishlistItems = function (wishlist) { return []; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getWishlistItemName = function (product) { return ''; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getWishlistItemImage = function (product) { return ''; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getWishlistItemPrice = function (product) { return ({ regular: 0, special: 0 }); };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getWishlistItemQty = function (product) { return 1; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getWishlistItemAttributes = function (product, filterByAttributeName) { return ({ '': '' }); };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getWishlistItemSku = function (product) { return ''; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getWishlistTotals = function (wishlist) { return ({ total: 0, subtotal: 0 }); };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getWishlistShippingPrice = function (wishlist) { return 0; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getWishlistTotalItems = function (wishlist) { return 0; };
// eslint-disable-next-line @typescript-eslint/no-unused-vars
var getFormattedPrice$3 = function (price) { return ''; };
var wishlistGetters = {
    getTotals: getWishlistTotals,
    getShippingPrice: getWishlistShippingPrice,
    getItems: getWishlistItems,
    getItemName: getWishlistItemName,
    getItemImage: getWishlistItemImage,
    getItemPrice: getWishlistItemPrice,
    getItemQty: getWishlistItemQty,
    getItemAttributes: getWishlistItemAttributes,
    getItemSku: getWishlistItemSku,
    getTotalItems: getWishlistTotalItems,
    getFormattedPrice: getFormattedPrice$3
};

var buildBreadcrumbsList = function (rootCat, bc) {
    var newBc = __spreadArray(__spreadArray([], bc), [{ text: rootCat.name, link: rootCat.slug }]);
    return rootCat.parent ? buildBreadcrumbsList(rootCat.parent, newBc) : newBc;
};
var buildBreadcrumbs = function (rootCat) {
    return buildBreadcrumbsList(rootCat, [])
        .reverse()
        .reduce(function (prev, curr, index) {
        var _a;
        return (__spreadArray(__spreadArray([], prev), [
            __assign(__assign({}, curr), { link: (((_a = prev[index - 1]) === null || _a === void 0 ? void 0 : _a.link) || '') + "/" + curr.link })
        ]));
    }, []);
};
var filterFacets = function (criteria) { return function (f) { return criteria ? criteria.includes(f) : true; }; };
var createFacetsFromOptions = function (facets, filters, filterKey) {
    var _a;
    var options = ((_a = facets[filterKey]) === null || _a === void 0 ? void 0 : _a.options) || [];
    var selectedList = filters && filters[filterKey] ? filters[filterKey] : [];
    return options
        .map(function (_a) {
        var label = _a.label, value = _a.value;
        return ({
            type: 'attribute',
            id: label,
            attrName: filterKey,
            value: value,
            selected: selectedList.includes(value),
            count: null
        });
    });
};
var reduceForFacets = function (facets, filters) { return function (prev, curr) { return (__spreadArray(__spreadArray([], prev), createFacetsFromOptions(facets, filters, curr))); }; };
var reduceForGroupedFacets = function (facets, filters) { return function (prev, curr) { return (__spreadArray(__spreadArray([], prev), [
    {
        id: curr,
        label: curr,
        options: createFacetsFromOptions(facets, filters, curr),
        count: null
    }
])); }; };
var buildFacets = function (searchData, reduceFn, criteria) {
    if (!searchData.data) {
        return [];
    }
    var facets = searchData.data.facets, filters = searchData.input.filters;
    return Object.keys(facets)
        .filter(filterFacets(criteria))
        .reduce(reduceFn(facets, filters), []);
};

var getAll = function (searchData, criteria) { return buildFacets(searchData, reduceForFacets, criteria); };
var getGrouped = function (searchData, criteria) {
    return buildFacets(searchData, reduceForGroupedFacets, criteria);
};
var getSortOptions = function (searchData) {
    var _a;
    var options = [
        { type: 'sort', id: 'latest', value: 'Latest', count: null },
        { type: 'sort', id: 'price-up', value: 'Price from low to high', count: null },
        { type: 'sort', id: 'price-down', value: 'Price from high to low', count: null }
    ].map(function (o) { return (__assign(__assign({}, o), { selected: o.id === searchData.input.sort })); });
    var selected = ((_a = options.find(function (o) { return o.id === searchData.input.sort; })) === null || _a === void 0 ? void 0 : _a.id) || 'latest';
    return { options: options, selected: selected };
};
var getCategoryTree$1 = function (searchData) {
    if (!searchData.data) {
        return {};
    }
    return getCategoryTree(searchData.data.categories[0]);
};
var getProducts = function (searchData) {
    var _a;
    return getProductFiltered(((_a = searchData.data) === null || _a === void 0 ? void 0 : _a.products) || [], { master: true });
};
var getPagination = function (searchData) {
    if (!searchData.data) {
        return {};
    }
    return {
        currentPage: searchData.input.page,
        totalPages: Math.ceil(searchData.data.total / searchData.data.itemsPerPage),
        totalItems: searchData.data.total,
        itemsPerPage: searchData.input.itemsPerPage,
        pageOptions: searchData.data.perPageOptions
    };
};
var getBreadcrumbs = function (searchData) {
    if (!searchData.data) {
        return [];
    }
    return __spreadArray([
        { text: 'Home', link: '/' }
    ], buildBreadcrumbs(searchData.data.categories[0]).map(function (b) { return (__assign(__assign({}, b), { link: "/c" + b.link })); }));
};
var facetGetters = {
    getSortOptions: getSortOptions,
    getGrouped: getGrouped,
    getAll: getAll,
    getProducts: getProducts,
    getCategoryTree: getCategoryTree$1,
    getBreadcrumbs: getBreadcrumbs,
    getPagination: getPagination
};

/* istanbul ignore file */
core.track('VSFCommercetools');

exports.cartGetters = cartGetters;
exports.categoryGetters = categoryGetters;
exports.facetGetters = facetGetters;
exports.orderGetters = orderGetters;
exports.productGetters = productGetters;
exports.reviewGetters = reviewGetters;
exports.useBilling = index$3;
exports.useCart = useCart;
exports.useCategory = useCategory;
exports.useFacet = index;
exports.useMakeOrder = useMakeOrder;
exports.useProduct = useProduct;
exports.useReview = useReview;
exports.useShipping = index$1;
exports.useShippingProvider = index$2;
exports.useUser = index$4;
exports.useUserBilling = index$5;
exports.useUserOrder = index$6;
exports.useUserShipping = index$7;
exports.useWishlist = index$8;
exports.userBillingGetters = userBillingGetters;
exports.userGetters = userGetters;
exports.userShippingGetters = userShippingGetters;
exports.wishlistGetters = wishlistGetters;
//# sourceMappingURL=index.cjs.js.map
